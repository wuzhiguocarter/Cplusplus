Command-Line Tools
##################

cmake(1)
********

Synopsis
========

 cmake [<options>] (<path-to-source> | <path-to-existing-build>)
 cmake [(-D <var>=<value>)...] -P <cmake-script-file>
 cmake --build <dir> [<options>...] [-- <build-tool-options>...]
 cmake -E <command> [<options>...]
 cmake --find-package <options>...

Description
===========

The "cmake" executable is the CMake command-line interface.  It may be
used to configure projects in scripts.  Project configuration settings
may be specified on the command line with the -D option.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name CMakeLists.txt.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

``-C <initial-cache>``
 Pre-load a script to populate the cache.

 When cmake is first run in an empty build tree, it creates a
 CMakeCache.txt file and populates it with customizable settings for
 the project.  This option may be used to specify a file from which
 to load cache entries before the first pass through the project's
 cmake listfiles.  The loaded entries take priority over the
 project's default values.  The given file should be a CMake script
 containing SET commands that use the CACHE option, not a
 cache-format file.

``-D <var>:<type>=<value>, -D <var>=<value>``
 Create a cmake cache entry.

 When cmake is first run in an empty build tree, it creates a
 CMakeCache.txt file and populates it with customizable settings for
 the project.  This option may be used to specify a setting that
 takes priority over the project's default value.  The option may be
 repeated for as many cache entries as desired.

 If the ``:<type>`` portion is given it must be one of the types
 specified by the ``set()`` command documentation for its
 ``CACHE`` signature.
 If the ``:<type>`` portion is omitted the entry will be created
 with no type if it does not exist with a type already.  If a
 command in the project sets the type to ``PATH`` or ``FILEPATH``
 then the ``<value>`` will be converted to an absolute path.

 This option may also be given as a single argument:
 ``-D<var>:<type>=<value>`` or ``-D<var>=<value>``.

``-U <globbing_expr>``
 Remove matching entries from CMake cache.

 This option may be used to remove one or more variables from the
 CMakeCache.txt file, globbing expressions using * and ? are
 supported.  The option may be repeated for as many cache entries as
 desired.

 Use with care, you can make your CMakeCache.txt non-working.

``-G <generator-name>``
 Specify a build system generator.

 CMake may support multiple native build systems on certain
 platforms.  A generator is responsible for generating a particular
 build system.  Possible generator names are specified in the
 ``cmake-generators(7)`` manual.

``-T <toolset-name>``
 Specify toolset name if supported by generator.

 Some CMake generators support a toolset name to be given to the
 native build system to choose a compiler.  This is supported only on
 specific generators:

 ::

   Visual Studio >= 10
   Xcode >= 3.0

 See native build system documentation for allowed toolset names.

``-A <platform-name>``
 Specify platform name if supported by generator.

 Some CMake generators support a platform name to be given to the
 native build system to choose a compiler or SDK.  This is supported only on
 specific generators::

   Visual Studio >= 8

 See native build system documentation for allowed platform names.

``-Wno-dev``
 Suppress developer warnings.

 Suppress warnings that are meant for the author of the
 CMakeLists.txt files. By default this will also turn off
 deprecation warnings.

``-Wdev``
 Enable developer warnings.

 Enable warnings that are meant for the author of the CMakeLists.txt
 files. By default this will also turn on deprecation warnings.

``-Werror=dev``
 Make developer warnings errors.

 Make warnings that are meant for the author of the CMakeLists.txt files
 errors. By default this will also turn on deprecated warnings as errors.

``-Wno-error=dev``
 Make developer warnings not errors.

 Make warnings that are meant for the author of the CMakeLists.txt files not
 errors. By default this will also turn off deprecated warnings as errors.

``-Wdeprecated``
 Enable deprecated functionality warnings.

 Enable warnings for usage of deprecated functionality, that are meant
 for the author of the CMakeLists.txt files.

``-Wno-deprecated``
 Suppress deprecated functionality warnings.

 Suppress warnings for usage of deprecated functionality, that are meant
 for the author of the CMakeLists.txt files.

``-Werror=deprecated``
 Make deprecated macro and function warnings errors.

 Make warnings for usage of deprecated macros and functions, that are meant
 for the author of the CMakeLists.txt files, errors.

``-Wno-error=deprecated``
 Make deprecated macro and function warnings not errors.

 Make warnings for usage of deprecated macros and functions, that are meant
 for the author of the CMakeLists.txt files, not errors.

``-E <command> [<options>...]``
 See `Command-Line Tool Mode`_.

``-L[A][H]``
 List non-advanced cached variables.

 List cache variables will run CMake and list all the variables from
 the CMake cache that are not marked as INTERNAL or ADVANCED.  This
 will effectively display current CMake settings, which can then be
 changed with -D option.  Changing some of the variables may result
 in more variables being created.  If A is specified, then it will
 display also advanced variables.  If H is specified, it will also
 display help for each variable.

``--build <dir>``
 See `Build Tool Mode`_.

``-N``
 View mode only.

 Only load the cache.  Do not actually run configure and generate
 steps.

``-P <file>``
 Process script mode.

 Process the given cmake file as a script written in the CMake
 language.  No configure or generate step is performed and the cache
 is not modified.  If variables are defined using -D, this must be
 done before the -P argument.

``--find-package``
 See `Find-Package Tool Mode`_.

``--graphviz=[file]``
 Generate graphviz of dependencies, see CMakeGraphVizOptions.cmake for more.

 Generate a graphviz input file that will contain all the library and
 executable dependencies in the project.  See the documentation for
 CMakeGraphVizOptions.cmake for more details.

``--system-information [file]``
 Dump information about this system.

 Dump a wide range of information about the current system.  If run
 from the top of a binary tree for a CMake project it will dump
 additional information such as the cache, log files etc.

``--debug-trycompile``
 Do not delete the try_compile build tree. Only useful on one try_compile at a time.

 Do not delete the files and directories created for try_compile
 calls.  This is useful in debugging failed try_compiles.  It may
 however change the results of the try-compiles as old junk from a
 previous try-compile may cause a different test to either pass or
 fail incorrectly.  This option is best used for one try-compile at a
 time, and only when debugging.

``--debug-output``
 Put cmake in a debug mode.

 Print extra information during the cmake run like stack traces with
 message(send_error ) calls.

``--trace``
 Put cmake in trace mode.

 Print a trace of all calls made and from where.

``--trace-expand``
 Put cmake in trace mode.

 Like ``--trace``, but with variables expanded.

``--warn-uninitialized``
 Warn about uninitialized values.

 Print a warning when an uninitialized variable is used.

``--warn-unused-vars``
 Warn about unused variables.

 Find variables that are declared or set, but not used.

``--no-warn-unused-cli``
 Don't warn about command line options.

 Don't find variables that are declared on the command line, but not
 used.

``--check-system-vars``
 Find problems with variable usage in system files.

 Normally, unused and uninitialized variables are searched for only
 in CMAKE_SOURCE_DIR and CMAKE_BINARY_DIR.  This flag tells CMake to
 warn about other files as well.

``--help,-help,-usage,-h,-H,/?``
 Print usage information and exit.

 Usage describes the basic command line interface and its options.

``--version,-version,/V [<f>]``
 Show program name/version banner and exit.

 If a file is specified, the version is written into it.
 The help is printed to a named <f>ile if given.

``--help-full [<f>]``
 Print all help manuals and exit.

 All manuals are printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual <man> [<f>]``
 Print one help manual and exit.

 The specified manual is printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual-list [<f>]``
 List help manuals available and exit.

 The list contains all manuals for which help may be obtained by
 using the ``--help-manual`` option followed by a manual name.
 The help is printed to a named <f>ile if given.

``--help-command <cmd> [<f>]``
 Print help for one command and exit.

 The ``cmake-commands(7)`` manual entry for ``<cmd>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-command-list [<f>]``
 List commands with help available and exit.

 The list contains all commands for which help may be obtained by
 using the ``--help-command`` option followed by a command name.
 The help is printed to a named <f>ile if given.

``--help-commands [<f>]``
 Print cmake-commands manual and exit.

 The ``cmake-commands(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module <mod> [<f>]``
 Print help for one module and exit.

 The ``cmake-modules(7)`` manual entry for ``<mod>`` is printed
 in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module-list [<f>]``
 List modules with help available and exit.

 The list contains all modules for which help may be obtained by
 using the ``--help-module`` option followed by a module name.
 The help is printed to a named <f>ile if given.

``--help-modules [<f>]``
 Print cmake-modules manual and exit.

 The ``cmake-modules(7)`` manual is printed in a human-readable
 text format.
 The help is printed to a named <f>ile if given.

``--help-policy <cmp> [<f>]``
 Print help for one policy and exit.

 The ``cmake-policies(7)`` manual entry for ``<cmp>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-policy-list [<f>]``
 List policies with help available and exit.

 The list contains all policies for which help may be obtained by
 using the ``--help-policy`` option followed by a policy name.
 The help is printed to a named <f>ile if given.

``--help-policies [<f>]``
 Print cmake-policies manual and exit.

 The ``cmake-policies(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property <prop> [<f>]``
 Print help for one property and exit.

 The ``cmake-properties(7)`` manual entries for ``<prop>`` are
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property-list [<f>]``
 List properties with help available and exit.

 The list contains all properties for which help may be obtained by
 using the ``--help-property`` option followed by a property name.
 The help is printed to a named <f>ile if given.

``--help-properties [<f>]``
 Print cmake-properties manual and exit.

 The ``cmake-properties(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable <var> [<f>]``
 Print help for one variable and exit.

 The ``cmake-variables(7)`` manual entry for ``<var>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable-list [<f>]``
 List variables with help available and exit.

 The list contains all variables for which help may be obtained by
 using the ``--help-variable`` option followed by a variable name.
 The help is printed to a named <f>ile if given.

``--help-variables [<f>]``
 Print cmake-variables manual and exit.

 The ``cmake-variables(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

Build Tool Mode
===============

CMake provides a command-line signature to build an already-generated
project binary tree::

 cmake --build <dir> [<options>...] [-- <build-tool-options>...]

This abstracts a native build tool's command-line interface with the
following options:

``--build <dir>``
  Project binary directory to be built.  This is required and must be first.

``--target <tgt>``
  Build ``<tgt>`` instead of default targets.  May only be specified once.

``--config <cfg>``
  For multi-configuration tools, choose configuration ``<cfg>``.

``--clean-first``
  Build target ``clean`` first, then build.
  (To clean only, use ``--target clean``.)

``--use-stderr``
  Ignored.  Behavior is default in CMake >= 3.0.

``--``
  Pass remaining options to the native tool.

Run ``cmake --build`` with no options for quick help.

Command-Line Tool Mode
======================

CMake provides builtin command-line tools through the signature::

 cmake -E <command> [<options>...]

Run ``cmake -E`` or ``cmake -E help`` for a summary of commands.
Available commands are:

``chdir <dir> <cmd> [<arg>...]``
  Change the current working directory and run a command.

``compare_files <file1> <file2>``
  Check if ``<file1>`` is same as ``<file2>``. If files are the same,
  then returns 0, if not it returns 1.

``copy <file>... <destination>``
  Copy files to ``<destination>`` (either file or directory).
  If multiple files are specified, the ``<destination>`` must be
  directory and it must exist.

``copy_directory <dir>... <destination>``
  Copy directories to ``<destination>`` directory.
  If ``<destination>`` directory does not exist it will be created.

``copy_if_different <file>... <destination>``
  Copy files to ``<destination>`` (either file or directory) if
  they have changed.
  If multiple files are specified, the ``<destination>`` must be
  directory and it must exist.

``echo [<string>...]``
  Displays arguments as text.

``echo_append [<string>...]``
  Displays arguments as text but no new line.

``env [--unset=NAME]... [NAME=VALUE]... COMMAND [ARG]...``
  Run command in a modified environment.

``environment``
  Display the current environment variables.

``make_directory <dir>...``
  Create ``<dir>`` directories.  If necessary, create parent
  directories too.  If a directory already exists it will be
  silently ignored.

``md5sum <file>...``
  Create MD5 checksum of files in ``md5sum`` compatible format::

 351abe79cd3800b38cdfb25d45015a15  file1.txt
 052f86c15bbde68af55c7f7b340ab639  file2.txt

``remove [-f] <file>...``
  Remove the file(s), use ``-f`` to force it.  If a file does
  not exist it will be silently ignored.

``remove_directory <dir>``
  Remove a directory and its contents.  If a directory does
  not exist it will be silently ignored.

``rename <oldname> <newname>``
  Rename a file or directory (on one volume).

``sleep <number>...``
  Sleep for given number of seconds.

``tar [cxt][vf][zjJ] file.tar [<options>...] [--] [<file>...]``
  Create or extract a tar or zip archive.  Options are:

  ``--``
    Stop interpreting options and treat all remaining arguments
    as file names even if they start in ``-``.
  ``--files-from=<file>``
    Read file names from the given file, one per line.
    Blank lines are ignored.  Lines may not start in ``-``
    except for ``--add-file=<name>`` to add files whose
    names start in ``-``.
  ``--mtime=<date>``
    Specify modification time recorded in tarball entries.
  ``--format=<format>``
    Specify the format of the archive to be created.
    Supported formats are: ``7zip``, ``gnutar``, ``pax``,
    ``paxr`` (restricted pax, default), and ``zip``.

``time <command> [<args>...]``
  Run command and return elapsed time.

``touch <file>``
  Touch a file.

``touch_nocreate <file>``
  Touch a file if it exists but do not create it.  If a file does
  not exist it will be silently ignored.

UNIX-specific Command-Line Tools
--------------------------------

The following ``cmake -E`` commands are available only on UNIX:

``create_symlink <old> <new>``
  Create a symbolic link ``<new>`` naming ``<old>``.

Windows-specific Command-Line Tools
-----------------------------------

The following ``cmake -E`` commands are available only on Windows:

``delete_regv <key>``
  Delete Windows registry value.

``env_vs8_wince <sdkname>``
  Displays a batch file which sets the environment for the provided
  Windows CE SDK installed in VS2005.

``env_vs9_wince <sdkname>``
  Displays a batch file which sets the environment for the provided
  Windows CE SDK installed in VS2008.

``write_regv <key> <value>``
  Write Windows registry value.

Find-Package Tool Mode
======================

CMake provides a helper for Makefile-based projects with the signature::

 cmake --find-package <options>...

This runs in a pkg-config like mode.

Search a package using ``find_package()`` and print the resulting flags
to stdout.  This can be used to use cmake instead of pkg-config to find
installed libraries in plain Makefile-based projects or in autoconf-based
projects (via ``share/aclocal/cmake.m4``).

.. note::
  This mode is not well-supported due to some technical limitations.
  It is kept for compatibility but should not be used in new projects.

See Also
========

The following resources are available to get help using CMake:

Home Page
 https://cmake.org

 The primary starting point for learning about CMake.

Frequently Asked Questions
 https://cmake.org/Wiki/CMake_FAQ

 A Wiki is provided containing answers to frequently asked questions.

Online Documentation
 https://cmake.org/documentation

 Links to available documentation may be found on this web page.

Mailing List
 https://cmake.org/mailing-lists

 For help and discussion about using cmake, a mailing list is
 provided at cmake@cmake.org.  The list is member-post-only but one
 may sign up on the CMake web page.  Please first read the full
 documentation at https://cmake.org before posting questions to
 the list.

ctest(1)
********

Synopsis
========

 ctest [<options>]

Description
===========

The "ctest" executable is the CMake test driver program.
CMake-generated build trees created for projects that use the
ENABLE_TESTING and ADD_TEST commands have testing support.  This
program will run the tests and report results.

Options
=======

``-C <cfg>, --build-config <cfg>``
 Choose configuration to test.

 Some CMake-generated build trees can have multiple build
 configurations in the same tree.  This option can be used to specify
 which one should be tested.  Example configurations are "Debug" and
 "Release".

``-V,--verbose``
 Enable verbose output from tests.

 Test output is normally suppressed and only summary information is
 displayed.  This option will show all test output.

``-VV,--extra-verbose``
 Enable more verbose output from tests.

 Test output is normally suppressed and only summary information is
 displayed.  This option will show even more test output.

``--debug``
 Displaying more verbose internals of CTest.

 This feature will result in a large number of output that is mostly
 useful for debugging dashboard problems.

``--output-on-failure``
 Output anything outputted by the test program if the test should fail.
 This option can also be enabled by setting the environment variable
 ``CTEST_OUTPUT_ON_FAILURE``.

``-F``
 Enable failover.

 This option allows ctest to resume a test set execution that was
 previously interrupted.  If no interruption occurred, the -F option
 will have no effect.

``-j <jobs>, --parallel <jobs>``
 Run the tests in parallel using the given number of jobs.

 This option tells ctest to run the tests in parallel using given
 number of jobs.  This option can also be set by setting the
 environment variable ``CTEST_PARALLEL_LEVEL``.

``--test-load <level>``
 While running tests in parallel (e.g. with ``-j``), try not to start
 tests when they may cause the CPU load to pass above a given threshold.

 When ``ctest`` is run as a `Dashboard Client`_ this sets the
 ``TestLoad`` option of the `CTest Test Step`_.

``-Q,--quiet``
 Make ctest quiet.

 This option will suppress all the output.  The output log file will
 still be generated if the --output-log is specified.  Options such
 as --verbose, --extra-verbose, and --debug are ignored if --quiet is
 specified.

``-O <file>, --output-log <file>``
 Output to log file

 This option tells ctest to write all its output to a log file.

``-N,--show-only``
 Disable actual execution of tests.

 This option tells ctest to list the tests that would be run but not
 actually run them.  Useful in conjunction with the -R and -E
 options.

``-L <regex>, --label-regex <regex>``
 Run tests with labels matching regular expression.

 This option tells ctest to run only the tests whose labels match the
 given regular expression.

``-R <regex>, --tests-regex <regex>``
 Run tests matching regular expression.

 This option tells ctest to run only the tests whose names match the
 given regular expression.

``-E <regex>, --exclude-regex <regex>``
 Exclude tests matching regular expression.

 This option tells ctest to NOT run the tests whose names match the
 given regular expression.

``-LE <regex>, --label-exclude <regex>``
 Exclude tests with labels matching regular expression.

 This option tells ctest to NOT run the tests whose labels match the
 given regular expression.

``-D <dashboard>, --dashboard <dashboard>``
 Execute dashboard test

 This option tells ctest to act as a CDash client and perform a
 dashboard test.  All tests are <Mode><Test>, where Mode can be
 Experimental, Nightly, and Continuous, and Test can be Start,
 Update, Configure, Build, Test, Coverage, and Submit.

``-D <var>:<type>=<value>``
 Define a variable for script mode

 Pass in variable values on the command line.  Use in conjunction
 with -S to pass variable values to a dashboard script.  Parsing -D
 arguments as variable values is only attempted if the value
 following -D does not match any of the known dashboard types.

``-M <model>, --test-model <model>``
 Sets the model for a dashboard

 This option tells ctest to act as a CDash client where the TestModel
 can be Experimental, Nightly, and Continuous.  Combining -M and -T
 is similar to -D

``-T <action>, --test-action <action>``
 Sets the dashboard action to perform

 This option tells ctest to act as a CDash client and perform some
 action such as start, build, test etc.  Combining -M and -T is
 similar to -D

``--track <track>``
 Specify the track to submit dashboard to

 Submit dashboard to specified track instead of default one.  By
 default, the dashboard is submitted to Nightly, Experimental, or
 Continuous track, but by specifying this option, the track can be
 arbitrary.

``-S <script>, --script <script>``
 Execute a dashboard for a configuration

 This option tells ctest to load in a configuration script which sets
 a number of parameters such as the binary and source directories.
 Then ctest will do what is required to create and run a dashboard.
 This option basically sets up a dashboard and then runs ctest -D
 with the appropriate options.

``-SP <script>, --script-new-process <script>``
 Execute a dashboard for a configuration

 This option does the same operations as -S but it will do them in a
 separate process.  This is primarily useful in cases where the
 script may modify the environment and you do not want the modified
 environment to impact other -S scripts.

``-A <file>, --add-notes <file>``
 Add a notes file with submission

 This option tells ctest to include a notes file when submitting
 dashboard.

``-I [Start,End,Stride,test#,test#|Test file], --tests-information``
 Run a specific number of tests by number.

 This option causes ctest to run tests starting at number Start,
 ending at number End, and incrementing by Stride.  Any additional
 numbers after Stride are considered individual test numbers.  Start,
 End,or stride can be empty.  Optionally a file can be given that
 contains the same syntax as the command line.

``-U, --union``
 Take the Union of -I and -R

 When both -R and -I are specified by default the intersection of
 tests are run.  By specifying -U the union of tests is run instead.

``--rerun-failed``
 Run only the tests that failed previously

 This option tells ctest to perform only the tests that failed during
 its previous run.  When this option is specified, ctest ignores all
 other options intended to modify the list of tests to run (-L, -R,
 -E, -LE, -I, etc).  In the event that CTest runs and no tests fail,
 subsequent calls to ctest with the --rerun-failed option will run
 the set of tests that most recently failed (if any).

``--repeat-until-fail <n>``
 Require each test to run ``<n>`` times without failing in order to pass.

 This is useful in finding sporadic failures in test cases.

``--max-width <width>``
 Set the max width for a test name to output

 Set the maximum width for each test name to show in the output.
 This allows the user to widen the output to avoid clipping the test
 name which can be very annoying.

``--interactive-debug-mode [0|1]``
 Set the interactive mode to 0 or 1.

 This option causes ctest to run tests in either an interactive mode
 or a non-interactive mode.  On Windows this means that in
 non-interactive mode, all system debug pop up windows are blocked.
 In dashboard mode (Experimental, Nightly, Continuous), the default
 is non-interactive.  When just running tests not for a dashboard the
 default is to allow popups and interactive debugging.

``--no-label-summary``
 Disable timing summary information for labels.

 This option tells ctest not to print summary information for each
 label associated with the tests run.  If there are no labels on the
 tests, nothing extra is printed.

``--build-and-test``
 Configure, build and run a test.

 This option tells ctest to configure (i.e.  run cmake on), build,
 and or execute a test.  The configure and test steps are optional.
 The arguments to this command line are the source and binary
 directories.  By default this will run CMake on the Source/Bin
 directories specified unless --build-nocmake is specified.
 The --build-generator option *must* be provided to use
 --build-and-test.  If --test-command is specified then that will be
 run after the build is complete.  Other options that affect this
 mode are --build-target --build-nocmake, --build-run-dir,
 --build-two-config, --build-exe-dir,
 --build-project,--build-noclean, --build-options

``--build-target``
 Specify a specific target to build.

 This option goes with the --build-and-test option, if left out the
 all target is built.

``--build-nocmake``
 Run the build without running cmake first.

 Skip the cmake step.

``--build-run-dir``
 Specify directory to run programs from.

 Directory where programs will be after it has been compiled.

``--build-two-config``
 Run CMake twice

``--build-exe-dir``
 Specify the directory for the executable.

``--build-generator``
 Specify the generator to use.

``--build-generator-platform``
 Specify the generator-specific platform.

``--build-generator-toolset``
 Specify the generator-specific toolset.

``--build-project``
 Specify the name of the project to build.

``--build-makeprogram``
 Override the make program chosen by CTest with a given one.

``--build-noclean``
 Skip the make clean step.

``--build-config-sample``
 A sample executable to use to determine the configuration

 A sample executable to use to determine the configuration that
 should be used.  e.g.  Debug/Release/etc

``--build-options``
 Add extra options to the build step.

 This option must be the last option with the exception of
 --test-command

``--test-command``
 The test to run with the --build-and-test option.

``--test-output-size-passed <size>``
 Limit the output for passed tests to <size> bytes.

``--test-output-size-failed <size>``
 Limit the output for failed tests to <size> bytes.

``--test-timeout``
 The time limit in seconds, internal use only.

``--tomorrow-tag``
 Nightly or experimental starts with next day tag.

 This is useful if the build will not finish in one day.

``--ctest-config``
 The configuration file used to initialize CTest state when submitting dashboards.

 This option tells CTest to use different initialization file instead
 of CTestConfiguration.tcl.  This way multiple initialization files
 can be used for example to submit to multiple dashboards.

``--overwrite``
 Overwrite CTest configuration option.

 By default ctest uses configuration options from configuration file.
 This option will overwrite the configuration option.

``--extra-submit <file>[;<file>]``
 Submit extra files to the dashboard.

 This option will submit extra files to the dashboard.

``--force-new-ctest-process``
 Run child CTest instances as new processes

 By default CTest will run child CTest instances within the same
 process.  If this behavior is not desired, this argument will
 enforce new processes for child CTest processes.

``--schedule-random``
 Use a random order for scheduling tests

 This option will run the tests in a random order.  It is commonly
 used to detect implicit dependencies in a test suite.

``--submit-index``
 Legacy option for old Dart2 dashboard server feature.
 Do not use.

``--timeout <seconds>``
 Set a global timeout on all tests.

 This option will set a global timeout on all tests that do not
 already have a timeout set on them.

``--stop-time <time>``
 Set a time at which all tests should stop running.

 Set a real time of day at which all tests should timeout.  Example:
 7:00:00 -0400.  Any time format understood by the curl date parser
 is accepted.  Local time is assumed if no timezone is specified.

``--http1.0``
 Submit using HTTP 1.0.

 This option will force CTest to use HTTP 1.0 to submit files to the
 dashboard, instead of HTTP 1.1.

``--no-compress-output``
 Do not compress test output when submitting.

 This flag will turn off automatic compression of test output.  Use
 this to maintain compatibility with an older version of CDash which
 doesn't support compressed test output.

``--print-labels``
 Print all available test labels.

 This option will not run any tests, it will simply print the list of
 all labels associated with the test set.

``--help,-help,-usage,-h,-H,/?``
 Print usage information and exit.

 Usage describes the basic command line interface and its options.

``--version,-version,/V [<f>]``
 Show program name/version banner and exit.

 If a file is specified, the version is written into it.
 The help is printed to a named <f>ile if given.

``--help-full [<f>]``
 Print all help manuals and exit.

 All manuals are printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual <man> [<f>]``
 Print one help manual and exit.

 The specified manual is printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual-list [<f>]``
 List help manuals available and exit.

 The list contains all manuals for which help may be obtained by
 using the ``--help-manual`` option followed by a manual name.
 The help is printed to a named <f>ile if given.

``--help-command <cmd> [<f>]``
 Print help for one command and exit.

 The ``cmake-commands(7)`` manual entry for ``<cmd>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-command-list [<f>]``
 List commands with help available and exit.

 The list contains all commands for which help may be obtained by
 using the ``--help-command`` option followed by a command name.
 The help is printed to a named <f>ile if given.

``--help-commands [<f>]``
 Print cmake-commands manual and exit.

 The ``cmake-commands(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module <mod> [<f>]``
 Print help for one module and exit.

 The ``cmake-modules(7)`` manual entry for ``<mod>`` is printed
 in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module-list [<f>]``
 List modules with help available and exit.

 The list contains all modules for which help may be obtained by
 using the ``--help-module`` option followed by a module name.
 The help is printed to a named <f>ile if given.

``--help-modules [<f>]``
 Print cmake-modules manual and exit.

 The ``cmake-modules(7)`` manual is printed in a human-readable
 text format.
 The help is printed to a named <f>ile if given.

``--help-policy <cmp> [<f>]``
 Print help for one policy and exit.

 The ``cmake-policies(7)`` manual entry for ``<cmp>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-policy-list [<f>]``
 List policies with help available and exit.

 The list contains all policies for which help may be obtained by
 using the ``--help-policy`` option followed by a policy name.
 The help is printed to a named <f>ile if given.

``--help-policies [<f>]``
 Print cmake-policies manual and exit.

 The ``cmake-policies(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property <prop> [<f>]``
 Print help for one property and exit.

 The ``cmake-properties(7)`` manual entries for ``<prop>`` are
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property-list [<f>]``
 List properties with help available and exit.

 The list contains all properties for which help may be obtained by
 using the ``--help-property`` option followed by a property name.
 The help is printed to a named <f>ile if given.

``--help-properties [<f>]``
 Print cmake-properties manual and exit.

 The ``cmake-properties(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable <var> [<f>]``
 Print help for one variable and exit.

 The ``cmake-variables(7)`` manual entry for ``<var>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable-list [<f>]``
 List variables with help available and exit.

 The list contains all variables for which help may be obtained by
 using the ``--help-variable`` option followed by a variable name.
 The help is printed to a named <f>ile if given.

``--help-variables [<f>]``
 Print cmake-variables manual and exit.

 The ``cmake-variables(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

Dashboard Client
================

CTest can operate as a client for the `CDash`_ software quality dashboard
application.  As a dashboard client, CTest performs a sequence of steps
to configure, build, and test software, and then submits the results to
a `CDash`_ server.

Dashboard Client Steps
----------------------

CTest defines an ordered list of testing steps of which some or all may
be run as a dashboard client:

``Start``
  Start a new dashboard submission to be composed of results recorded
  by the following steps.
  See the `CTest Start Step`_ section below.

``Update``
  Update the source tree from its version control repository.
  Record the old and new versions and the list of updated source files.
  See the `CTest Update Step`_ section below.

``Configure``
  Configure the software by running a command in the build tree.
  Record the configuration output log.
  See the `CTest Configure Step`_ section below.

``Build``
  Build the software by running a command in the build tree.
  Record the build output log and detect warnings and errors.
  See the `CTest Build Step`_ section below.

``Test``
  Test the software by loading a ``CTestTestfile.cmake``
  from the build tree and executing the defined tests.
  Record the output and result of each test.
  See the `CTest Test Step`_ section below.

``Coverage``
  Compute coverage of the source code by running a coverage
  analysis tool and recording its output.
  See the `CTest Coverage Step`_ section below.

``MemCheck``
  Run the software test suite through a memory check tool.
  Record the test output, results, and issues reported by the tool.
  See the `CTest MemCheck Step`_ section below.

``Submit``
  Submit results recorded from other testing steps to the
  software quality dashboard server.
  See the `CTest Submit Step`_ section below.

Dashboard Client Modes
----------------------

CTest defines three modes of operation as a dashboard client:

``Nightly``
  This mode is intended to be invoked once per day, typically at night.
  It enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``,
  ``Coverage``, and ``Submit`` steps by default.  Selected steps run even
  if the ``Update`` step reports no changes to the source tree.

``Continuous``
  This mode is intended to be invoked repeatedly throughout the day.
  It enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``,
  ``Coverage``, and ``Submit`` steps by default, but exits after the
  ``Update`` step if it reports no changes to the source tree.

``Experimental``
  This mode is intended to be invoked by a developer to test local changes.
  It enables the ``Start``, ``Configure``, ``Build``, ``Test``, ``Coverage``,
  and ``Submit`` steps by default.

Dashboard Client via CTest Command-Line
---------------------------------------

CTest can perform testing on an already-generated build tree.
Run the ``ctest`` command with the current working directory set
to the build tree and use one of these signatures::

 ctest -D <mode>[<step>]
 ctest -M <mode> [ -T <step> ]...

The ``<mode>`` must be one of the above `Dashboard Client Modes`_,
and each ``<step>`` must be one of the above `Dashboard Client Steps`_.

CTest reads the `Dashboard Client Configuration`_ settings from
a file in the build tree called either ``CTestConfiguration.ini``
or ``DartConfiguration.tcl`` (the names are historical).  The format
of the file is::

 # Lines starting in '#' are comments.
 # Other non-blank lines are key-value pairs.
 <setting>: <value>

where ``<setting>`` is the setting name and ``<value>`` is the
setting value.

In build trees generated by CMake, this configuration file is
generated by the ``CTest`` module if included by the project.
The module uses variables to obtain a value for each setting
as documented with the settings below.

Dashboard Client via CTest Script
---------------------------------

CTest can perform testing driven by a ``cmake-language(7)``
script that creates and maintains the source and build tree as
well as performing the testing steps.  Run the ``ctest`` command
with the current working directory set outside of any build tree
and use one of these signatures::

 ctest -S <script>
 ctest -SP <script>

The ``<script>`` file must call :ref:`CTest Commands` commands
to run testing steps explicitly as documented below.  The commands
obtain `Dashboard Client Configuration`_ settings from their
arguments or from variables set in the script.

Dashboard Client Configuration
==============================

The `Dashboard Client Steps`_ may be configured by named
settings as documented in the following sections.

CTest Start Step
----------------

Start a new dashboard submission to be composed of results recorded
by the following steps.

In a `CTest Script`_, the ``ctest_start()`` command runs this step.
Arguments to the command may specify some of the step settings.
The command first runs the command-line specified by the
``CTEST_CHECKOUT_COMMAND`` variable, if set, to initialize the source
directory.

Configuration settings include:

``BuildDirectory``
  The full path to the project build tree.

  * `CTest Script`_ variable: ``CTEST_BINARY_DIRECTORY``
  * ``CTest`` module variable: ``PROJECT_BINARY_DIR``

``SourceDirectory``
  The full path to the project source tree.

  * `CTest Script`_ variable: ``CTEST_SOURCE_DIRECTORY``
  * ``CTest`` module variable: ``PROJECT_SOURCE_DIR``

CTest Update Step
-----------------

In a `CTest Script`_, the ``ctest_update()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings to specify the version control tool include:

``BZRCommand``
  ``bzr`` command-line tool to use if source tree is managed by Bazaar.

  * `CTest Script`_ variable: ``CTEST_BZR_COMMAND``
  * ``CTest`` module variable: none

``BZRUpdateOptions``
  Command-line options to the ``BZRCommand`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_BZR_UPDATE_OPTIONS``
  * ``CTest`` module variable: none

``CVSCommand``
  ``cvs`` command-line tool to use if source tree is managed by CVS.

  * `CTest Script`_ variable: ``CTEST_CVS_COMMAND``
  * ``CTest`` module variable: ``CVSCOMMAND``

``CVSUpdateOptions``
  Command-line options to the ``CVSCommand`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_CVS_UPDATE_OPTIONS``
  * ``CTest`` module variable: ``CVS_UPDATE_OPTIONS``

``GITCommand``
  ``git`` command-line tool to use if source tree is managed by Git.

  * `CTest Script`_ variable: ``CTEST_GIT_COMMAND``
  * ``CTest`` module variable: ``GITCOMMAND``

  The source tree is updated by ``git fetch`` followed by
  ``git reset --hard`` to the ``FETCH_HEAD``.  The result is the same
  as ``git pull`` except that any local moficiations are overwritten.
  Use ``GITUpdateCustom`` to specify a different approach.

``GITInitSubmodules``
  If set, CTest will update the repository's submodules before updating.

  * `CTest Script`_ variable: ``CTEST_GIT_INIT_SUBMODULES``
  * ``CTest`` module variable: ``CTEST_GIT_INIT_SUBMODULES``

``GITUpdateCustom``
  Specify a custom command line (as a semicolon-separated list) to run
  in the source tree (Git work tree) to update it instead of running
  the ``GITCommand``.

  * `CTest Script`_ variable: ``CTEST_GIT_UPDATE_CUSTOM``
  * ``CTest`` module variable: ``CTEST_GIT_UPDATE_CUSTOM``

``GITUpdateOptions``
  Command-line options to the ``GITCommand`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_GIT_UPDATE_OPTIONS``
  * ``CTest`` module variable: ``GIT_UPDATE_OPTIONS``

``HGCommand``
  ``hg`` command-line tool to use if source tree is managed by Mercurial.

  * `CTest Script`_ variable: ``CTEST_HG_COMMAND``
  * ``CTest`` module variable: none

``HGUpdateOptions``
  Command-line options to the ``HGCommand`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_HG_UPDATE_OPTIONS``
  * ``CTest`` module variable: none

``P4Client``
  Value of the ``-c`` option to the ``P4Command``.

  * `CTest Script`_ variable: ``CTEST_P4_CLIENT``
  * ``CTest`` module variable: ``CTEST_P4_CLIENT``

``P4Command``
  ``p4`` command-line tool to use if source tree is managed by Perforce.

  * `CTest Script`_ variable: ``CTEST_P4_COMMAND``
  * ``CTest`` module variable: ``P4COMMAND``

``P4Options``
  Command-line options to the ``P4Command`` for all invocations.

  * `CTest Script`_ variable: ``CTEST_P4_OPTIONS``
  * ``CTest`` module variable: ``CTEST_P4_OPTIONS``

``P4UpdateCustom``
  Specify a custom command line (as a semicolon-separated list) to run
  in the source tree (Perforce tree) to update it instead of running
  the ``P4Command``.

  * `CTest Script`_ variable: none
  * ``CTest`` module variable: ``CTEST_P4_UPDATE_CUSTOM``

``P4UpdateOptions``
  Command-line options to the ``P4Command`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_P4_UPDATE_OPTIONS``
  * ``CTest`` module variable: ``CTEST_P4_UPDATE_OPTIONS``

``SVNCommand``
  ``svn`` command-line tool to use if source tree is managed by Subversion.

  * `CTest Script`_ variable: ``CTEST_SVN_COMMAND``
  * ``CTest`` module variable: ``SVNCOMMAND``

``SVNOptions``
  Command-line options to the ``SVNCommand`` for all invocations.

  * `CTest Script`_ variable: ``CTEST_SVN_OPTIONS``
  * ``CTest`` module variable: ``CTEST_SVN_OPTIONS``

``SVNUpdateOptions``
  Command-line options to the ``SVNCommand`` when updating the source.

  * `CTest Script`_ variable: ``CTEST_SVN_UPDATE_OPTIONS``
  * ``CTest`` module variable: ``SVN_UPDATE_OPTIONS``

``UpdateCommand``
  Specify the version-control command-line tool to use without
  detecting the VCS that manages the source tree.

  * `CTest Script`_ variable: ``CTEST_UPDATE_COMMAND``
  * ``CTest`` module variable: ``<VCS>COMMAND``
    when ``UPDATE_TYPE`` is ``<vcs>``, else ``UPDATE_COMMAND``

``UpdateOptions``
  Command-line options to the ``UpdateCommand``.

  * `CTest Script`_ variable: ``CTEST_UPDATE_OPTIONS``
  * ``CTest`` module variable: ``<VCS>_UPDATE_OPTIONS``
    when ``UPDATE_TYPE`` is ``<vcs>``, else ``UPDATE_OPTIONS``

``UpdateType``
  Specify the version-control system that manages the source
  tree if it cannot be detected automatically.
  The value may be ``bzr``, ``cvs``, ``git``, ``hg``,
  ``p4``, or ``svn``.

  * `CTest Script`_ variable: none, detected from source tree
  * ``CTest`` module variable: ``UPDATE_TYPE`` if set,
    else ``CTEST_UPDATE_TYPE``

``UpdateVersionOnly``
  Specify that you want the version control update command to only
  discover the current version that is checked out, and not to update
  to a different version.

  * `CTest Script`_ variable: ``CTEST_UPDATE_VERSION_ONLY``



Additional configuration settings include:

``NightlyStartTime``
  In the ``Nightly`` dashboard mode, specify the "nightly start time".
  With centralized version control systems (``cvs`` and ``svn``),
  the ``Update`` step checks out the version of the software as of
  this time so that multiple clients choose a common version to test.
  This is not well-defined in distributed version-control systems so
  the setting is ignored.

  * `CTest Script`_ variable: ``CTEST_NIGHTLY_START_TIME``
  * ``CTest`` module variable: ``NIGHTLY_START_TIME`` if set,
    else ``CTEST_NIGHTLY_START_TIME``

CTest Configure Step
--------------------

In a `CTest Script`_, the ``ctest_configure()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``ConfigureCommand``
  Command-line to launch the software configuration process.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: ``CTEST_CONFIGURE_COMMAND``
  * ``CTest`` module variable: ``CMAKE_COMMAND``
    followed by ``PROJECT_SOURCE_DIR``

CTest Build Step
----------------

In a `CTest Script`_, the ``ctest_build()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``DefaultCTestConfigurationType``
  When the build system to be launched allows build-time selection
  of the configuration (e.g. ``Debug``, ``Release``), this specifies
  the default configuration to be built when no ``-C`` option is
  given to the ``ctest`` command.  The value will be substituted into
  the value of ``MakeCommand`` to replace the literal string
  ``${CTEST_CONFIGURATION_TYPE}`` if it appears.

  * `CTest Script`_ variable: ``CTEST_CONFIGURATION_TYPE``
  * ``CTest`` module variable: ``DEFAULT_CTEST_CONFIGURATION_TYPE``,
    initialized by the ``CMAKE_CONFIG_TYPE`` environment variable

``MakeCommand``
  Command-line to launch the software build process.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: ``CTEST_BUILD_COMMAND``
  * ``CTest`` module variable: ``MAKECOMMAND``,
    initialized by the ``build_command()`` command

``UseLaunchers``
  For build trees generated by CMake using one of the
  :ref:`Makefile Generators` or the ``Ninja``
  generator, specify whether the
  ``CTEST_USE_LAUNCHERS`` feature is enabled by the
  ``CTestUseLaunchers`` module (also included by the
  ``CTest`` module).  When enabled, the generated build
  system wraps each invocation of the compiler, linker, or
  custom command line with a "launcher" that communicates
  with CTest via environment variables and files to report
  granular build warning and error information.  Otherwise,
  CTest must "scrape" the build output log for diagnostics.

  * `CTest Script`_ variable: ``CTEST_USE_LAUNCHERS``
  * ``CTest`` module variable: ``CTEST_USE_LAUNCHERS``

CTest Test Step
---------------

In a `CTest Script`_, the ``ctest_test()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``TestLoad``
  While running tests in parallel (e.g. with ``-j``), try not to start
  tests when they may cause the CPU load to pass above a given threshold.

  * `CTest Script`_ variable: ``CTEST_TEST_LOAD``
  * ``CTest`` module variable: ``CTEST_TEST_LOAD``

``TimeOut``
  The default timeout for each test if not specified by the
  ``TIMEOUT`` test property.

  * `CTest Script`_ variable: ``CTEST_TEST_TIMEOUT``
  * ``CTest`` module variable: ``DART_TESTING_TIMEOUT``

CTest Coverage Step
-------------------

In a `CTest Script`_, the ``ctest_coverage()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``CoverageCommand``
  Command-line tool to perform software coverage analysis.
  It will be executed in the location specified by the
  ``BuildDirectory`` setting.

  * `CTest Script`_ variable: ``CTEST_COVERAGE_COMMAND``
  * ``CTest`` module variable: ``COVERAGE_COMMAND``

``CoverageExtraFlags``
  Specify command-line options to the ``CoverageCommand`` tool.

  * `CTest Script`_ variable: ``CTEST_COVERAGE_EXTRA_FLAGS``
  * ``CTest`` module variable: ``COVERAGE_EXTRA_FLAGS``

CTest MemCheck Step
-------------------

In a `CTest Script`_, the ``ctest_memcheck()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``MemoryCheckCommand``
  Command-line tool to perform dynamic analysis.  Test command lines
  will be launched through this tool.

  * `CTest Script`_ variable: ``CTEST_MEMORYCHECK_COMMAND``
  * ``CTest`` module variable: ``MEMORYCHECK_COMMAND``

``MemoryCheckCommandOptions``
  Specify command-line options to the ``MemoryCheckCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: ``CTEST_MEMORYCHECK_COMMAND_OPTIONS``
  * ``CTest`` module variable: ``MEMORYCHECK_COMMAND_OPTIONS``

``MemoryCheckType``
  Specify the type of memory checking to perform.

  * `CTest Script`_ variable: ``CTEST_MEMORYCHECK_TYPE``
  * ``CTest`` module variable: ``MEMORYCHECK_TYPE``

``MemoryCheckSanitizerOptions``
  Specify options to sanitizers when running with a sanitize-enabled build.

  * `CTest Script`_ variable: ``CTEST_MEMORYCHECK_SANITIZER_OPTIONS``
  * ``CTest`` module variable: ``MEMORYCHECK_SANITIZER_OPTIONS``

``MemoryCheckSuppressionFile``
  Specify a file containing suppression rules for the
  ``MemoryCheckCommand`` tool.  It will be passed with options
  appropriate to the tool.

  * `CTest Script`_ variable: ``CTEST_MEMORYCHECK_SUPPRESSIONS_FILE``
  * ``CTest`` module variable: ``MEMORYCHECK_SUPPRESSIONS_FILE``

Additional configuration settings include:

``BoundsCheckerCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Bounds Checker.

  * `CTest Script`_ variable: none
  * ``CTest`` module variable: none

``PurifyCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Purify.

  * `CTest Script`_ variable: none
  * ``CTest`` module variable: ``PURIFYCOMMAND``

``ValgrindCommand``
  Specify a ``MemoryCheckCommand`` that is known to be command-line
  compatible with Valgrind.

  * `CTest Script`_ variable: none
  * ``CTest`` module variable: ``VALGRIND_COMMAND``

``ValgrindCommandOptions``
  Specify command-line options to the ``ValgrindCommand`` tool.
  They will be placed prior to the test command line.

  * `CTest Script`_ variable: none
  * ``CTest`` module variable: ``VALGRIND_COMMAND_OPTIONS``

CTest Submit Step
-----------------

In a `CTest Script`_, the ``ctest_submit()`` command runs this step.
Arguments to the command may specify some of the step settings.

Configuration settings include:

``BuildName``
  Describe the dashboard client platform with a short string.
  (Operating system, compiler, etc.)

  * `CTest Script`_ variable: ``CTEST_BUILD_NAME``
  * ``CTest`` module variable: ``BUILDNAME``

``CDashVersion``
  Specify the version of `CDash`_ on the server.

  * `CTest Script`_ variable: none, detected from server
  * ``CTest`` module variable: ``CTEST_CDASH_VERSION``

``CTestSubmitRetryCount``
  Specify a number of attempts to retry submission on network failure.

  * `CTest Script`_ variable: none,
    use the ``ctest_submit()`` ``RETRY_COUNT`` option.
  * ``CTest`` module variable: ``CTEST_SUBMIT_RETRY_COUNT``

``CTestSubmitRetryDelay``
  Specify a delay before retrying submission on network failure.

  * `CTest Script`_ variable: none,
    use the ``ctest_submit()`` ``RETRY_DELAY`` option.
  * ``CTest`` module variable: ``CTEST_SUBMIT_RETRY_DELAY``

``CurlOptions``
  Specify a semicolon-separated list of options to control the
  Curl library that CTest uses internally to connect to the
  server.  Possible options are ``CURLOPT_SSL_VERIFYPEER_OFF``
  and ``CURLOPT_SSL_VERIFYHOST_OFF``.

  * `CTest Script`_ variable: ``CTEST_CURL_OPTIONS``
  * ``CTest`` module variable: ``CTEST_CURL_OPTIONS``

``DropLocation``
  The path on the dashboard server to send the submission.

  * `CTest Script`_ variable: ``CTEST_DROP_LOCATION``
  * ``CTest`` module variable: ``DROP_LOCATION`` if set,
    else ``CTEST_DROP_LOCATION``

``DropMethod``
  Specify the method by which results should be submitted to the
  dashboard server.  The value may be ``cp``, ``ftp``, ``http``,
  ``https``, ``scp``, or ``xmlrpc`` (if CMake was built with
  support for it).

  * `CTest Script`_ variable: ``CTEST_DROP_METHOD``
  * ``CTest`` module variable: ``DROP_METHOD`` if set,
    else ``CTEST_DROP_METHOD``

``DropSite``
  The dashboard server name
  (for ``ftp``, ``http``, and ``https``, ``scp``, and ``xmlrpc``).

  * `CTest Script`_ variable: ``CTEST_DROP_SITE``
  * ``CTest`` module variable: ``DROP_SITE`` if set,
    else ``CTEST_DROP_SITE``

``DropSitePassword``
  The dashboard server login password, if any
  (for ``ftp``, ``http``, and ``https``).

  * `CTest Script`_ variable: ``CTEST_DROP_SITE_PASSWORD``
  * ``CTest`` module variable: ``DROP_SITE_PASSWORD`` if set,
    else ``CTEST_DROP_SITE_PASWORD``

``DropSiteUser``
  The dashboard server login user name, if any
  (for ``ftp``, ``http``, and ``https``).

  * `CTest Script`_ variable: ``CTEST_DROP_SITE_USER``
  * ``CTest`` module variable: ``DROP_SITE_USER`` if set,
    else ``CTEST_DROP_SITE_USER``

``IsCDash``
  Specify whether the dashboard server is `CDash`_ or an older
  dashboard server implementation requiring ``TriggerSite``.

  * `CTest Script`_ variable: ``CTEST_DROP_SITE_CDASH``
  * ``CTest`` module variable: ``CTEST_DROP_SITE_CDASH``

``ScpCommand``
  ``scp`` command-line tool to use when ``DropMethod`` is ``scp``.

  * `CTest Script`_ variable: ``CTEST_SCP_COMMAND``
  * ``CTest`` module variable: ``SCPCOMMAND``

``Site``
  Describe the dashboard client host site with a short string.
  (Hostname, domain, etc.)

  * `CTest Script`_ variable: ``CTEST_SITE``
  * ``CTest`` module variable: ``SITE``,
    initialized by the ``site_name()`` command

``TriggerSite``
  Legacy option to support older dashboard server implementations.
  Not used when ``IsCDash`` is true.

  * `CTest Script`_ variable: ``CTEST_TRIGGER_SITE``
  * ``CTest`` module variable: ``TRIGGER_SITE`` if set,
    else ``CTEST_TRIGGER_SITE``

See Also
========

The following resources are available to get help using CMake:

Home Page
 https://cmake.org

 The primary starting point for learning about CMake.

Frequently Asked Questions
 https://cmake.org/Wiki/CMake_FAQ

 A Wiki is provided containing answers to frequently asked questions.

Online Documentation
 https://cmake.org/documentation

 Links to available documentation may be found on this web page.

Mailing List
 https://cmake.org/mailing-lists

 For help and discussion about using cmake, a mailing list is
 provided at cmake@cmake.org.  The list is member-post-only but one
 may sign up on the CMake web page.  Please first read the full
 documentation at https://cmake.org before posting questions to
 the list.

cpack(1)
********

Synopsis
========

 cpack -G <generator> [<options>]

Description
===========

The "cpack" executable is the CMake packaging program.
CMake-generated build trees created for projects that use the
INSTALL_* commands have packaging support.  This program will generate
the package.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name CMakeLists.txt.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

``-G <generator>``
 Use the specified generator to generate package.

 CPack may support multiple native packaging systems on certain
 platforms.  A generator is responsible for generating input files
 for particular system and invoking that systems.  Possible generator
 names are specified in the Generators section.

``-C <Configuration>``
 Specify the project configuration

 This option specifies the configuration that the project was build
 with, for example 'Debug', 'Release'.

``-D <var>=<value>``
 Set a CPack variable.

 Set a variable that can be used by the generator.

``--config <config file>``
 Specify the config file.

 Specify the config file to use to create the package.  By default
 CPackConfig.cmake in the current directory will be used.

``--verbose,-V``
 enable verbose output

 Run cpack with verbose output.

``--debug``
 enable debug output (for CPack developers)

 Run cpack with debug output (for CPack developers).

``-P <package name>``
 override/define CPACK_PACKAGE_NAME

 If the package name is not specified on cpack command line
 thenCPack.cmake defines it as CMAKE_PROJECT_NAME

``-R <package version>``
 override/define CPACK_PACKAGE_VERSION

 If version is not specified on cpack command line thenCPack.cmake
 defines it from CPACK_PACKAGE_VERSION_[MAJOR|MINOR|PATCH]look into
 CPack.cmake for detail

``-B <package directory>``
 override/define CPACK_PACKAGE_DIRECTORY

 The directory where CPack will be doing its packaging work.The
 resulting package will be found there.  Inside this directoryCPack
 creates '_CPack_Packages' sub-directory which is theCPack temporary
 directory.

``--vendor <vendor name>``
 override/define CPACK_PACKAGE_VENDOR

 If vendor is not specified on cpack command line (or inside
 CMakeLists.txt) thenCPack.cmake defines it with a default value

``--help,-help,-usage,-h,-H,/?``
 Print usage information and exit.

 Usage describes the basic command line interface and its options.

``--version,-version,/V [<f>]``
 Show program name/version banner and exit.

 If a file is specified, the version is written into it.
 The help is printed to a named <f>ile if given.

``--help-full [<f>]``
 Print all help manuals and exit.

 All manuals are printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual <man> [<f>]``
 Print one help manual and exit.

 The specified manual is printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual-list [<f>]``
 List help manuals available and exit.

 The list contains all manuals for which help may be obtained by
 using the ``--help-manual`` option followed by a manual name.
 The help is printed to a named <f>ile if given.

``--help-command <cmd> [<f>]``
 Print help for one command and exit.

 The ``cmake-commands(7)`` manual entry for ``<cmd>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-command-list [<f>]``
 List commands with help available and exit.

 The list contains all commands for which help may be obtained by
 using the ``--help-command`` option followed by a command name.
 The help is printed to a named <f>ile if given.

``--help-commands [<f>]``
 Print cmake-commands manual and exit.

 The ``cmake-commands(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module <mod> [<f>]``
 Print help for one module and exit.

 The ``cmake-modules(7)`` manual entry for ``<mod>`` is printed
 in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module-list [<f>]``
 List modules with help available and exit.

 The list contains all modules for which help may be obtained by
 using the ``--help-module`` option followed by a module name.
 The help is printed to a named <f>ile if given.

``--help-modules [<f>]``
 Print cmake-modules manual and exit.

 The ``cmake-modules(7)`` manual is printed in a human-readable
 text format.
 The help is printed to a named <f>ile if given.

``--help-policy <cmp> [<f>]``
 Print help for one policy and exit.

 The ``cmake-policies(7)`` manual entry for ``<cmp>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-policy-list [<f>]``
 List policies with help available and exit.

 The list contains all policies for which help may be obtained by
 using the ``--help-policy`` option followed by a policy name.
 The help is printed to a named <f>ile if given.

``--help-policies [<f>]``
 Print cmake-policies manual and exit.

 The ``cmake-policies(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property <prop> [<f>]``
 Print help for one property and exit.

 The ``cmake-properties(7)`` manual entries for ``<prop>`` are
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property-list [<f>]``
 List properties with help available and exit.

 The list contains all properties for which help may be obtained by
 using the ``--help-property`` option followed by a property name.
 The help is printed to a named <f>ile if given.

``--help-properties [<f>]``
 Print cmake-properties manual and exit.

 The ``cmake-properties(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable <var> [<f>]``
 Print help for one variable and exit.

 The ``cmake-variables(7)`` manual entry for ``<var>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable-list [<f>]``
 List variables with help available and exit.

 The list contains all variables for which help may be obtained by
 using the ``--help-variable`` option followed by a variable name.
 The help is printed to a named <f>ile if given.

``--help-variables [<f>]``
 Print cmake-variables manual and exit.

 The ``cmake-variables(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

See Also
========

The following resources are available to get help using CMake:

Home Page
 https://cmake.org

 The primary starting point for learning about CMake.

Frequently Asked Questions
 https://cmake.org/Wiki/CMake_FAQ

 A Wiki is provided containing answers to frequently asked questions.

Online Documentation
 https://cmake.org/documentation

 Links to available documentation may be found on this web page.

Mailing List
 https://cmake.org/mailing-lists

 For help and discussion about using cmake, a mailing list is
 provided at cmake@cmake.org.  The list is member-post-only but one
 may sign up on the CMake web page.  Please first read the full
 documentation at https://cmake.org before posting questions to
 the list.

Interactive Dialogs
###################

cmake-gui(1)
************

Synopsis
========

 cmake-gui [<options>]
 cmake-gui [<options>] (<path-to-source> | <path-to-existing-build>)

Description
===========

The "cmake-gui" executable is the CMake GUI.  Project configuration
settings may be specified interactively.  Brief instructions are
provided at the bottom of the window when the program is running.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name CMakeLists.txt.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

``--help,-help,-usage,-h,-H,/?``
 Print usage information and exit.

 Usage describes the basic command line interface and its options.

``--version,-version,/V [<f>]``
 Show program name/version banner and exit.

 If a file is specified, the version is written into it.
 The help is printed to a named <f>ile if given.

``--help-full [<f>]``
 Print all help manuals and exit.

 All manuals are printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual <man> [<f>]``
 Print one help manual and exit.

 The specified manual is printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual-list [<f>]``
 List help manuals available and exit.

 The list contains all manuals for which help may be obtained by
 using the ``--help-manual`` option followed by a manual name.
 The help is printed to a named <f>ile if given.

``--help-command <cmd> [<f>]``
 Print help for one command and exit.

 The ``cmake-commands(7)`` manual entry for ``<cmd>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-command-list [<f>]``
 List commands with help available and exit.

 The list contains all commands for which help may be obtained by
 using the ``--help-command`` option followed by a command name.
 The help is printed to a named <f>ile if given.

``--help-commands [<f>]``
 Print cmake-commands manual and exit.

 The ``cmake-commands(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module <mod> [<f>]``
 Print help for one module and exit.

 The ``cmake-modules(7)`` manual entry for ``<mod>`` is printed
 in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module-list [<f>]``
 List modules with help available and exit.

 The list contains all modules for which help may be obtained by
 using the ``--help-module`` option followed by a module name.
 The help is printed to a named <f>ile if given.

``--help-modules [<f>]``
 Print cmake-modules manual and exit.

 The ``cmake-modules(7)`` manual is printed in a human-readable
 text format.
 The help is printed to a named <f>ile if given.

``--help-policy <cmp> [<f>]``
 Print help for one policy and exit.

 The ``cmake-policies(7)`` manual entry for ``<cmp>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-policy-list [<f>]``
 List policies with help available and exit.

 The list contains all policies for which help may be obtained by
 using the ``--help-policy`` option followed by a policy name.
 The help is printed to a named <f>ile if given.

``--help-policies [<f>]``
 Print cmake-policies manual and exit.

 The ``cmake-policies(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property <prop> [<f>]``
 Print help for one property and exit.

 The ``cmake-properties(7)`` manual entries for ``<prop>`` are
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property-list [<f>]``
 List properties with help available and exit.

 The list contains all properties for which help may be obtained by
 using the ``--help-property`` option followed by a property name.
 The help is printed to a named <f>ile if given.

``--help-properties [<f>]``
 Print cmake-properties manual and exit.

 The ``cmake-properties(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable <var> [<f>]``
 Print help for one variable and exit.

 The ``cmake-variables(7)`` manual entry for ``<var>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable-list [<f>]``
 List variables with help available and exit.

 The list contains all variables for which help may be obtained by
 using the ``--help-variable`` option followed by a variable name.
 The help is printed to a named <f>ile if given.

``--help-variables [<f>]``
 Print cmake-variables manual and exit.

 The ``cmake-variables(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

See Also
========

The following resources are available to get help using CMake:

Home Page
 https://cmake.org

 The primary starting point for learning about CMake.

Frequently Asked Questions
 https://cmake.org/Wiki/CMake_FAQ

 A Wiki is provided containing answers to frequently asked questions.

Online Documentation
 https://cmake.org/documentation

 Links to available documentation may be found on this web page.

Mailing List
 https://cmake.org/mailing-lists

 For help and discussion about using cmake, a mailing list is
 provided at cmake@cmake.org.  The list is member-post-only but one
 may sign up on the CMake web page.  Please first read the full
 documentation at https://cmake.org before posting questions to
 the list.

ccmake(1)
*********

Synopsis
========

 ccmake [<options>] (<path-to-source> | <path-to-existing-build>)

Description
===========

The "ccmake" executable is the CMake curses interface.  Project
configuration settings may be specified interactively through this
GUI.  Brief instructions are provided at the bottom of the terminal
when the program is running.

CMake is a cross-platform build system generator.  Projects specify
their build process with platform-independent CMake listfiles included
in each directory of a source tree with the name CMakeLists.txt.
Users build a project by using CMake to generate a build system for a
native tool on their platform.

Options
=======

``-C <initial-cache>``
 Pre-load a script to populate the cache.

 When cmake is first run in an empty build tree, it creates a
 CMakeCache.txt file and populates it with customizable settings for
 the project.  This option may be used to specify a file from which
 to load cache entries before the first pass through the project's
 cmake listfiles.  The loaded entries take priority over the
 project's default values.  The given file should be a CMake script
 containing SET commands that use the CACHE option, not a
 cache-format file.

``-D <var>:<type>=<value>, -D <var>=<value>``
 Create a cmake cache entry.

 When cmake is first run in an empty build tree, it creates a
 CMakeCache.txt file and populates it with customizable settings for
 the project.  This option may be used to specify a setting that
 takes priority over the project's default value.  The option may be
 repeated for as many cache entries as desired.

 If the ``:<type>`` portion is given it must be one of the types
 specified by the ``set()`` command documentation for its
 ``CACHE`` signature.
 If the ``:<type>`` portion is omitted the entry will be created
 with no type if it does not exist with a type already.  If a
 command in the project sets the type to ``PATH`` or ``FILEPATH``
 then the ``<value>`` will be converted to an absolute path.

 This option may also be given as a single argument:
 ``-D<var>:<type>=<value>`` or ``-D<var>=<value>``.

``-U <globbing_expr>``
 Remove matching entries from CMake cache.

 This option may be used to remove one or more variables from the
 CMakeCache.txt file, globbing expressions using * and ? are
 supported.  The option may be repeated for as many cache entries as
 desired.

 Use with care, you can make your CMakeCache.txt non-working.

``-G <generator-name>``
 Specify a build system generator.

 CMake may support multiple native build systems on certain
 platforms.  A generator is responsible for generating a particular
 build system.  Possible generator names are specified in the
 ``cmake-generators(7)`` manual.

``-T <toolset-name>``
 Specify toolset name if supported by generator.

 Some CMake generators support a toolset name to be given to the
 native build system to choose a compiler.  This is supported only on
 specific generators:

 ::

   Visual Studio >= 10
   Xcode >= 3.0

 See native build system documentation for allowed toolset names.

``-A <platform-name>``
 Specify platform name if supported by generator.

 Some CMake generators support a platform name to be given to the
 native build system to choose a compiler or SDK.  This is supported only on
 specific generators::

   Visual Studio >= 8

 See native build system documentation for allowed platform names.

``-Wno-dev``
 Suppress developer warnings.

 Suppress warnings that are meant for the author of the
 CMakeLists.txt files. By default this will also turn off
 deprecation warnings.

``-Wdev``
 Enable developer warnings.

 Enable warnings that are meant for the author of the CMakeLists.txt
 files. By default this will also turn on deprecation warnings.

``-Werror=dev``
 Make developer warnings errors.

 Make warnings that are meant for the author of the CMakeLists.txt files
 errors. By default this will also turn on deprecated warnings as errors.

``-Wno-error=dev``
 Make developer warnings not errors.

 Make warnings that are meant for the author of the CMakeLists.txt files not
 errors. By default this will also turn off deprecated warnings as errors.

``-Wdeprecated``
 Enable deprecated functionality warnings.

 Enable warnings for usage of deprecated functionality, that are meant
 for the author of the CMakeLists.txt files.

``-Wno-deprecated``
 Suppress deprecated functionality warnings.

 Suppress warnings for usage of deprecated functionality, that are meant
 for the author of the CMakeLists.txt files.

``-Werror=deprecated``
 Make deprecated macro and function warnings errors.

 Make warnings for usage of deprecated macros and functions, that are meant
 for the author of the CMakeLists.txt files, errors.

``-Wno-error=deprecated``
 Make deprecated macro and function warnings not errors.

 Make warnings for usage of deprecated macros and functions, that are meant
 for the author of the CMakeLists.txt files, not errors.

``--help,-help,-usage,-h,-H,/?``
 Print usage information and exit.

 Usage describes the basic command line interface and its options.

``--version,-version,/V [<f>]``
 Show program name/version banner and exit.

 If a file is specified, the version is written into it.
 The help is printed to a named <f>ile if given.

``--help-full [<f>]``
 Print all help manuals and exit.

 All manuals are printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual <man> [<f>]``
 Print one help manual and exit.

 The specified manual is printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-manual-list [<f>]``
 List help manuals available and exit.

 The list contains all manuals for which help may be obtained by
 using the ``--help-manual`` option followed by a manual name.
 The help is printed to a named <f>ile if given.

``--help-command <cmd> [<f>]``
 Print help for one command and exit.

 The ``cmake-commands(7)`` manual entry for ``<cmd>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-command-list [<f>]``
 List commands with help available and exit.

 The list contains all commands for which help may be obtained by
 using the ``--help-command`` option followed by a command name.
 The help is printed to a named <f>ile if given.

``--help-commands [<f>]``
 Print cmake-commands manual and exit.

 The ``cmake-commands(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module <mod> [<f>]``
 Print help for one module and exit.

 The ``cmake-modules(7)`` manual entry for ``<mod>`` is printed
 in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-module-list [<f>]``
 List modules with help available and exit.

 The list contains all modules for which help may be obtained by
 using the ``--help-module`` option followed by a module name.
 The help is printed to a named <f>ile if given.

``--help-modules [<f>]``
 Print cmake-modules manual and exit.

 The ``cmake-modules(7)`` manual is printed in a human-readable
 text format.
 The help is printed to a named <f>ile if given.

``--help-policy <cmp> [<f>]``
 Print help for one policy and exit.

 The ``cmake-policies(7)`` manual entry for ``<cmp>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-policy-list [<f>]``
 List policies with help available and exit.

 The list contains all policies for which help may be obtained by
 using the ``--help-policy`` option followed by a policy name.
 The help is printed to a named <f>ile if given.

``--help-policies [<f>]``
 Print cmake-policies manual and exit.

 The ``cmake-policies(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property <prop> [<f>]``
 Print help for one property and exit.

 The ``cmake-properties(7)`` manual entries for ``<prop>`` are
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-property-list [<f>]``
 List properties with help available and exit.

 The list contains all properties for which help may be obtained by
 using the ``--help-property`` option followed by a property name.
 The help is printed to a named <f>ile if given.

``--help-properties [<f>]``
 Print cmake-properties manual and exit.

 The ``cmake-properties(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable <var> [<f>]``
 Print help for one variable and exit.

 The ``cmake-variables(7)`` manual entry for ``<var>`` is
 printed in a human-readable text format.
 The help is printed to a named <f>ile if given.

``--help-variable-list [<f>]``
 List variables with help available and exit.

 The list contains all variables for which help may be obtained by
 using the ``--help-variable`` option followed by a variable name.
 The help is printed to a named <f>ile if given.

``--help-variables [<f>]``
 Print cmake-variables manual and exit.

 The ``cmake-variables(7)`` manual is printed in a
 human-readable text format.
 The help is printed to a named <f>ile if given.

See Also
========

The following resources are available to get help using CMake:

Home Page
 https://cmake.org

 The primary starting point for learning about CMake.

Frequently Asked Questions
 https://cmake.org/Wiki/CMake_FAQ

 A Wiki is provided containing answers to frequently asked questions.

Online Documentation
 https://cmake.org/documentation

 Links to available documentation may be found on this web page.

Mailing List
 https://cmake.org/mailing-lists

 For help and discussion about using cmake, a mailing list is
 provided at cmake@cmake.org.  The list is member-post-only but one
 may sign up on the CMake web page.  Please first read the full
 documentation at https://cmake.org before posting questions to
 the list.

Reference Manuals
#################

cmake-buildsystem(7)
********************

Introduction
============

A CMake-based buildsystem is organized as a set of high-level logical
targets.  Each target corresponds to an executable or library, or
is a custom target containing custom commands.  Dependencies between the
targets are expressed in the buildsystem to determine the build order
and the rules for regeneration in response to change.

Binary Targets
==============

Executables and libraries are defined using the ``add_executable()``
and ``add_library()`` commands.  The resulting binary files have
appropriate prefixes, suffixes and extensions for the platform targeted.
Dependencies between binary targets are expressed using the
``target_link_libraries()`` command:

 add_library(archive archive.cpp zip.cpp lzma.cpp)
 add_executable(zipapp zipapp.cpp)
 target_link_libraries(zipapp archive)

``archive`` is defined as a static library -- an archive containing objects
compiled from ``archive.cpp``, ``zip.cpp``, and ``lzma.cpp``.  ``zipapp``
is defined as an executable formed by compiling and linking ``zipapp.cpp``.
When linking the ``zipapp`` executable, the ``archive`` static library is
linked in.

Binary Executables
------------------

The ``add_executable()`` command defines an executable target:

 add_executable(mytool mytool.cpp)

Commands such as ``add_custom_command()``, which generates rules to be
run at build time can transparently use an ``EXECUTABLE``
target as a ``COMMAND`` executable.  The buildsystem rules will ensure that
the executable is built before attempting to run the command.

Binary Library Types
--------------------

Normal Libraries
^^^^^^^^^^^^^^^^

By default, the ``add_library()`` command defines a static library,
unless a type is specified.  A type may be specified when using the command:

 add_library(archive SHARED archive.cpp zip.cpp lzma.cpp)

 add_library(archive STATIC archive.cpp zip.cpp lzma.cpp)

The ``BUILD_SHARED_LIBS`` variable may be enabled to change the
behavior of ``add_library()`` to build shared libraries by default.

In the context of the buildsystem definition as a whole, it is largely
irrelevant whether particular libraries are ``SHARED`` or ``STATIC`` --
the commands, dependency specifications and other APIs work similarly
regardless of the library type.  The ``MODULE`` library type is
dissimilar in that it is generally not linked to -- it is not used in
the right-hand-side of the ``target_link_libraries()`` command.
It is a type which is loaded as a plugin using runtime techniques.
If the library does not export any unmanaged symbols (e.g. Windows
resource DLL, C++/CLI DLL), it is required that the library not be a
``SHARED`` library because CMake expects ``SHARED`` libraries to export
at least one symbol.

 add_library(archive MODULE 7z.cpp)

Apple Frameworks
""""""""""""""""

A ``SHARED`` library may be marked with the ``FRAMEWORK``
target property to create an OS X or iOS Framework Bundle.
The ``MACOSX_FRAMEWORK_IDENTIFIER`` sets ``CFBundleIdentifier`` key
and it uniquely identifies the bundle.

 add_library(MyFramework SHARED MyFramework.cpp)
 set_target_properties(MyFramework PROPERTIES
   FRAMEWORK TRUE
   FRAMEWORK_VERSION A
   MACOSX_FRAMEWORK_IDENTIFIER org.cmake.MyFramework
 )

Object Libraries
^^^^^^^^^^^^^^^^

The ``OBJECT`` library type is also not linked to. It defines a non-archival
collection of object files resulting from compiling the given source files.
The object files collection can be used as source inputs to other targets:

 add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)

 add_library(archiveExtras STATIC $<TARGET_OBJECTS:archive> extras.cpp)

 add_executable(test_exe $<TARGET_OBJECTS:archive> test.cpp)

``OBJECT`` libraries may only be used locally as sources in a buildsystem --
they may not be installed, exported, or used in the right hand side of
``target_link_libraries()``.  They also may not be used as the ``TARGET``
in a use of the ``add_custom_command(TARGET)`` command signature.

Although object libraries may not be named directly in calls to
the ``target_link_libraries()`` command, they can be "linked"
indirectly by using an :ref:`Interface Library <Interface Libraries>`
whose ``INTERFACE_SOURCES`` target property is set to name
``$<TARGET_OBJECTS:objlib>``.

Build Specification and Usage Requirements
==========================================

The ``target_include_directories()``, ``target_compile_definitions()``
and ``target_compile_options()`` commands specify the build specifications
and the usage requirements of binary targets.  The commands populate the
``INCLUDE_DIRECTORIES``, ``COMPILE_DEFINITIONS`` and
``COMPILE_OPTIONS`` target properties respectively, and/or the
``INTERFACE_INCLUDE_DIRECTORIES``, ``INTERFACE_COMPILE_DEFINITIONS``
and ``INTERFACE_COMPILE_OPTIONS`` target properties.

Each of the commands has a ``PRIVATE``, ``PUBLIC`` and ``INTERFACE`` mode.  The
``PRIVATE`` mode populates only the non-``INTERFACE_`` variant of the target
property and the ``INTERFACE`` mode populates only the ``INTERFACE_`` variants.
The ``PUBLIC`` mode populates both variants of the respective target property.
Each command may be invoked with multiple uses of each keyword:

 target_compile_definitions(archive
   PRIVATE BUILDING_WITH_LZMA
   INTERFACE USING_ARCHIVE_LIB
 )

Note that usage requirements are not designed as a way to make downstreams
use particular ``COMPILE_OPTIONS`` or
``COMPILE_DEFINITIONS`` etc for convenience only.  The contents of
the properties must be **requirements**, not merely recommendations or
convenience.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

Target Properties
-----------------

The contents of the ``INCLUDE_DIRECTORIES``,
``COMPILE_DEFINITIONS`` and ``COMPILE_OPTIONS`` target
properties are used appropriately when compiling the source files of a
binary target.

Entries in the ``INCLUDE_DIRECTORIES`` are added to the compile line
with ``-I`` or ``-isystem`` prefixes and in the order of appearance in the
property value.

Entries in the ``COMPILE_DEFINITIONS`` are prefixed with ``-D`` or
``/D`` and added to the compile line in an unspecified order.  The
``DEFINE_SYMBOL`` target property is also added as a compile
definition as a special convenience case for ``SHARED`` and ``MODULE``
library targets.

Entries in the ``COMPILE_OPTIONS`` are escaped for the shell and added
in the order of appearance in the property value.  Several compile options have
special separate handling, such as ``POSITION_INDEPENDENT_CODE``.

The contents of the ``INTERFACE_INCLUDE_DIRECTORIES``,
``INTERFACE_COMPILE_DEFINITIONS`` and
``INTERFACE_COMPILE_OPTIONS`` target properties are
*Usage Requirements* -- they specify content which consumers
must use to correctly compile and link with the target they appear on.
For any binary target, the contents of each ``INTERFACE_`` property on
each target specified in a ``target_link_libraries()`` command is
consumed:

 set(srcs archive.cpp zip.cpp)
 if (LZMA_FOUND)
   list(APPEND srcs lzma.cpp)
 endif()
 add_library(archive SHARED ${srcs})
 if (LZMA_FOUND)
   # The archive library sources are compiled with -DBUILDING_WITH_LZMA
   target_compile_definitions(archive PRIVATE BUILDING_WITH_LZMA)
 endif()
 target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

 add_executable(consumer)
 # Link consumer to archive and consume its usage requirements. The consumer
 # executable sources are compiled with -DUSING_ARCHIVE_LIB.
 target_link_libraries(consumer archive)

Because it is common to require that the source directory and corresponding
build directory are added to the ``INCLUDE_DIRECTORIES``, the
``CMAKE_INCLUDE_CURRENT_DIR`` variable can be enabled to conveniently
add the corresponding directories to the ``INCLUDE_DIRECTORIES`` of
all targets.  The variable ``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE``
can be enabled to add the corresponding directories to the
``INTERFACE_INCLUDE_DIRECTORIES`` of all targets.  This makes use of
targets in multiple different directories convenient through use of the
``target_link_libraries()`` command.


Transitive Usage Requirements
-----------------------------

The usage requirements of a target can transitively propagate to dependents.
The ``target_link_libraries()`` command has ``PRIVATE``,
``INTERFACE`` and ``PUBLIC`` keywords to control the propagation.

 add_library(archive archive.cpp)
 target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

 add_library(serialization serialization.cpp)
 target_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)

 add_library(archiveExtras extras.cpp)
 target_link_libraries(archiveExtras PUBLIC archive)
 target_link_libraries(archiveExtras PRIVATE serialization)
 # archiveExtras is compiled with -DUSING_ARCHIVE_LIB
 # and -DUSING_SERIALIZATION_LIB

 add_executable(consumer consumer.cpp)
 # consumer is compiled with -DUSING_ARCHIVE_LIB
 target_link_libraries(consumer archiveExtras)

Because ``archive`` is a ``PUBLIC`` dependency of ``archiveExtras``, the
usage requirements of it are propagated to ``consumer`` too.  Because
``serialization`` is a ``PRIVATE`` dependency of ``archive``, the usage
requirements of it are not propagated to ``consumer``.

Generally, a dependency should be specified in a use of
``target_link_libraries()`` with the ``PRIVATE`` keyword if it is used by
only the implementation of a library, and not in the header files.  If a
dependency is additionally used in the header files of a library (e.g. for
class inheritance), then it should be specified as a ``PUBLIC`` dependency.
A dependency which is not used by the implementation of a library, but only by
its headers should be specified as an ``INTERFACE`` dependency.  The
``target_link_libraries()`` command may be invoked with multiple uses of
each keyword:

 target_link_libraries(archiveExtras
   PUBLIC archive
   PRIVATE serialization
 )

Usage requirements are propagated by reading the ``INTERFACE_`` variants
of target properties from dependencies and appending the values to the
non-``INTERFACE_`` variants of the operand.  For example, the
``INTERFACE_INCLUDE_DIRECTORIES`` of dependencies is read and
appended to the ``INCLUDE_DIRECTORIES`` of the operand.  In cases
where order is relevant and maintained, and the order resulting from the
``target_link_libraries()`` calls does not allow correct compilation,
use of an appropriate command to set the property directly may update the
order.

For example, if the linked libraries for a target must be specified
in the order ``lib1`` ``lib2`` ``lib3`` , but the include directories must
be specified in the order ``lib3`` ``lib1`` ``lib2``:

 target_link_libraries(myExe lib1 lib2 lib3)
 target_include_directories(myExe
   PRIVATE $<TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES>)

Note that care must be taken when specifying usage requirements for targets
which will be exported for installation using the ``install(EXPORT)``
command.  See :ref:`Creating Packages` for more.

Compatible Interface Properties
-------------------------------

Some target properties are required to be compatible between a target and
the interface of each dependency.  For example, the
``POSITION_INDEPENDENT_CODE`` target property may specify a
boolean value of whether a target should be compiled as
position-independent-code, which has platform-specific consequences.
A target may also specify the usage requirement
``INTERFACE_POSITION_INDEPENDENT_CODE`` to communicate that
consumers must be compiled as position-independent-code.

 add_executable(exe1 exe1.cpp)
 set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE ON)

 add_library(lib1 SHARED lib1.cpp)
 set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

 add_executable(exe2 exe2.cpp)
 target_link_libraries(exe2 lib1)

Here, both ``exe1`` and ``exe2`` will be compiled as position-independent-code.
``lib1`` will also be compiled as position-independent-code because that is the
default setting for ``SHARED`` libraries.  If dependencies have conflicting,
non-compatible requirements ``cmake(1)`` issues a diagnostic:

 add_library(lib1 SHARED lib1.cpp)
 set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

 add_library(lib2 SHARED lib2.cpp)
 set_property(TARGET lib2 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1)
 set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE OFF)

 add_executable(exe2 exe2.cpp)
 target_link_libraries(exe2 lib1 lib2)

The ``lib1`` requirement ``INTERFACE_POSITION_INDEPENDENT_CODE`` is not
"compatible" with the ``POSITION_INDEPENDENT_CODE`` property of the ``exe1``
target.  The library requires that consumers are built as
position-independent-code, while the executable specifies to not built as
position-independent-code, so a diagnostic is issued.

The ``lib1`` and ``lib2`` requirements are not "compatible".  One of them
requires that consumers are built as position-independent-code, while
the other requires that consumers are not built as position-independent-code.
Because ``exe2`` links to both and they are in conflict, a diagnostic is
issued.

To be "compatible", the ``POSITION_INDEPENDENT_CODE`` property,
if set must be either the same, in a boolean sense, as the
``INTERFACE_POSITION_INDEPENDENT_CODE`` property of all transitively
specified dependencies on which that property is set.

This property of "compatible interface requirement" may be extended to other
properties by specifying the property in the content of the
``COMPATIBLE_INTERFACE_BOOL`` target property.  Each specified property
must be compatible between the consuming target and the corresponding property
with an ``INTERFACE_`` prefix from each dependency:

 add_library(lib1Version2 SHARED lib1_v2.cpp)
 set_property(TARGET lib1Version2 PROPERTY INTERFACE_CUSTOM_PROP ON)
 set_property(TARGET lib1Version2 APPEND PROPERTY
   COMPATIBLE_INTERFACE_BOOL CUSTOM_PROP
 )

 add_library(lib1Version3 SHARED lib1_v3.cpp)
 set_property(TARGET lib1Version3 PROPERTY INTERFACE_CUSTOM_PROP OFF)

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1Version2) # CUSTOM_PROP will be ON

 add_executable(exe2 exe2.cpp)
 target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic

Non-boolean properties may also participate in "compatible interface"
computations.  Properties specified in the
``COMPATIBLE_INTERFACE_STRING``
property must be either unspecified or compare to the same string among
all transitively specified dependencies. This can be useful to ensure
that multiple incompatible versions of a library are not linked together
through transitive requirements of a target:

 add_library(lib1Version2 SHARED lib1_v2.cpp)
 set_property(TARGET lib1Version2 PROPERTY INTERFACE_LIB_VERSION 2)
 set_property(TARGET lib1Version2 APPEND PROPERTY
   COMPATIBLE_INTERFACE_STRING LIB_VERSION
 )

 add_library(lib1Version3 SHARED lib1_v3.cpp)
 set_property(TARGET lib1Version3 PROPERTY INTERFACE_LIB_VERSION 3)

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1Version2) # LIB_VERSION will be "2"

 add_executable(exe2 exe2.cpp)
 target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic

The ``COMPATIBLE_INTERFACE_NUMBER_MAX`` target property specifies
that content will be evaluated numerically and the maximum number among all
specified will be calculated:

 add_library(lib1Version2 SHARED lib1_v2.cpp)
 set_property(TARGET lib1Version2 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 200)
 set_property(TARGET lib1Version2 APPEND PROPERTY
   COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED
 )

 add_library(lib1Version3 SHARED lib1_v3.cpp)
 set_property(TARGET lib1Version3 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED 1000)

 add_executable(exe1 exe1.cpp)
 # CONTAINER_SIZE_REQUIRED will be "200"
 target_link_libraries(exe1 lib1Version2)

 add_executable(exe2 exe2.cpp)
 # CONTAINER_SIZE_REQUIRED will be "1000"
 target_link_libraries(exe2 lib1Version2 lib1Version3)

Similarly, the ``COMPATIBLE_INTERFACE_NUMBER_MIN`` may be used to
calculate the numeric minimum value for a property from dependencies.

Each calculated "compatible" property value may be read in the consumer at
generate-time using generator expressions.

Note that for each dependee, the set of properties specified in each
compatible interface property must not intersect with the set specified in
any of the other properties.

Property Origin Debugging
-------------------------

Because build specifications can be determined by dependencies, the lack of
locality of code which creates a target and code which is responsible for
setting build specifications may make the code more difficult to reason about.
``cmake(1)`` provides a debugging facility to print the origin of the
contents of properties which may be determined by dependencies.  The properties
which can be debugged are listed in the
``CMAKE_DEBUG_TARGET_PROPERTIES`` variable documentation:

 set(CMAKE_DEBUG_TARGET_PROPERTIES
   INCLUDE_DIRECTORIES
   COMPILE_DEFINITIONS
   POSITION_INDEPENDENT_CODE
   CONTAINER_SIZE_REQUIRED
   LIB_VERSION
 )
 add_executable(exe1 exe1.cpp)

In the case of properties listed in ``COMPATIBLE_INTERFACE_BOOL`` or
``COMPATIBLE_INTERFACE_STRING``, the debug output shows which target
was responsible for setting the property, and which other dependencies also
defined the property.  In the case of
``COMPATIBLE_INTERFACE_NUMBER_MAX`` and
``COMPATIBLE_INTERFACE_NUMBER_MIN``, the debug output shows the
value of the property from each dependency, and whether the value determines
the new extreme.

Build Specification with Generator Expressions
----------------------------------------------

Build specifications may use
``generator expressions`` containing
content which may be conditional or known only at generate-time.  For example,
the calculated "compatible" value of a property may be read with the
``TARGET_PROPERTY`` expression:

 add_library(lib1Version2 SHARED lib1_v2.cpp)
 set_property(TARGET lib1Version2 PROPERTY
   INTERFACE_CONTAINER_SIZE_REQUIRED 200)
 set_property(TARGET lib1Version2 APPEND PROPERTY
   COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED
 )

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1Version2)
 target_compile_definitions(exe1 PRIVATE
     CONTAINER_SIZE=$<TARGET_PROPERTY:CONTAINER_SIZE_REQUIRED>
 )

In this case, the ``exe1`` source files will be compiled with
``-DCONTAINER_SIZE=200``.

Configuration determined build specifications may be conveniently set using
the ``CONFIG`` generator expression.

 target_compile_definitions(exe1 PRIVATE
     $<$<CONFIG:Debug>:DEBUG_BUILD>
 )

The ``CONFIG`` parameter is compared case-insensitively with the configuration
being built.  In the presence of ``IMPORTED`` targets, the content of
``MAP_IMPORTED_CONFIG_DEBUG`` is also
accounted for by this expression.

Some buildsystems generated by ``cmake(1)`` have a predetermined
build-configuration set in the ``CMAKE_BUILD_TYPE`` variable.  The
buildsystem for the IDEs such as Visual Studio and Xcode are generated
independent of the build-configuration, and the actual build configuration
is not known until build-time.  Therefore, code such as

 string(TOLOWER ${CMAKE_BUILD_TYPE} _type)
 if (_type STREQUAL debug)
   target_compile_definitions(exe1 PRIVATE DEBUG_BUILD)
 endif()

may appear to work for ``Makefile`` based and ``Ninja`` generators, but is not
portable to IDE generators.  Additionally, the ``IMPORTED``
configuration-mappings are not accounted for with code like this, so it should
be avoided.

The unary ``TARGET_PROPERTY`` generator expression and the ``TARGET_POLICY``
generator expression are evaluated with the consuming target context.  This
means that a usage requirement specification may be evaluated differently based
on the consumer:

 add_library(lib1 lib1.cpp)
 target_compile_definitions(lib1 INTERFACE
   $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:LIB1_WITH_EXE>
   $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:LIB1_WITH_SHARED_LIB>
   $<$<TARGET_POLICY:CMP0041>:CONSUMER_CMP0041_NEW>
 )

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1)

 cmake_policy(SET CMP0041 NEW)

 add_library(shared_lib shared_lib.cpp)
 target_link_libraries(shared_lib lib1)

The ``exe1`` executable will be compiled with ``-DLIB1_WITH_EXE``, while the
``shared_lib`` shared library will be compiled with ``-DLIB1_WITH_SHARED_LIB``
and ``-DCONSUMER_CMP0041_NEW``, because policy ``CMP0041`` is
``NEW`` at the point where the ``shared_lib`` target is created.

The ``BUILD_INTERFACE`` expression wraps requirements which are only used when
consumed from a target in the same buildsystem, or when consumed from a target
exported to the build directory using the ``export()`` command.  The
``INSTALL_INTERFACE`` expression wraps requirements which are only used when
consumed from a target which has been installed and exported with the
``install(EXPORT)`` command:

 add_library(ClimbingStats climbingstats.cpp)
 target_compile_definitions(ClimbingStats INTERFACE
   $<BUILD_INTERFACE:ClimbingStats_FROM_BUILD_LOCATION>
   $<INSTALL_INTERFACE:ClimbingStats_FROM_INSTALLED_LOCATION>
 )
 install(TARGETS ClimbingStats EXPORT libExport ${InstallArgs})
 install(EXPORT libExport NAMESPACE Upstream::
         DESTINATION lib/cmake/ClimbingStats)
 export(EXPORT libExport NAMESPACE Upstream::)

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 ClimbingStats)

In this case, the ``exe1`` executable will be compiled with
``-DClimbingStats_FROM_BUILD_LOCATION``.  The exporting commands generate
``IMPORTED`` targets with either the ``INSTALL_INTERFACE`` or the
``BUILD_INTERFACE`` omitted, and the ``*_INTERFACE`` marker stripped away.
A separate project consuming the ``ClimbingStats`` package would contain:

 find_package(ClimbingStats REQUIRED)

 add_executable(Downstream main.cpp)
 target_link_libraries(Downstream Upstream::ClimbingStats)

Depending on whether the ``ClimbingStats`` package was used from the build
location or the install location, the ``Downstream`` target would be compiled
with either ``-DClimbingStats_FROM_BUILD_LOCATION`` or
``-DClimbingStats_FROM_INSTALL_LOCATION``.  For more about packages and
exporting see the ``cmake-packages(7)`` manual.

Include Directories and Usage Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Include directories require some special consideration when specified as usage
requirements and when used with generator expressions.  The
``target_include_directories()`` command accepts both relative and
absolute include directories:

 add_library(lib1 lib1.cpp)
 target_include_directories(lib1 PRIVATE
   /absolute/path
   relative/path
 )

Relative paths are interpreted relative to the source directory where the
command appears.  Relative paths are not allowed in the
``INTERFACE_INCLUDE_DIRECTORIES`` of ``IMPORTED`` targets.

In cases where a non-trivial generator expression is used, the
``INSTALL_PREFIX`` expression may be used within the argument of an
``INSTALL_INTERFACE`` expression.  It is a replacement marker which
expands to the installation prefix when imported by a consuming project.

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

 add_library(ClimbingStats climbingstats.cpp)
 target_include_directories(ClimbingStats INTERFACE
   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/generated>
   $<INSTALL_INTERFACE:/absolute/path>
   $<INSTALL_INTERFACE:relative/path>
   $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/$<CONFIG>/generated>
 )

Two convenience APIs are provided relating to include directories usage
requirements.  The ``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` variable
may be enabled, with an equivalent effect to:

 set_property(TARGET tgt APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}>
 )

for each target affected.  The convenience for installed targets is
an ``INCLUDES DESTINATION`` component with the ``install(TARGETS)``
command:

 install(TARGETS foo bar bat EXPORT tgts ${dest_args}
   INCLUDES DESTINATION include
 )
 install(EXPORT tgts ${other_args})
 install(FILES ${headers} DESTINATION include)

This is equivalent to appending ``${CMAKE_INSTALL_PREFIX}/include`` to the
``INTERFACE_INCLUDE_DIRECTORIES`` of each of the installed
``IMPORTED`` targets when generated by ``install(EXPORT)``.

When the ``INTERFACE_INCLUDE_DIRECTORIES`` of an
:ref:`imported target <Imported targets>` is consumed, the entries in the
property are treated as ``SYSTEM`` include directories, as if they were
listed in the ``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` of the
dependency. This can result in omission of compiler warnings for headers
found in those directories.  This behavior for :ref:`imported targets` may
be controlled with the ``NO_SYSTEM_FROM_IMPORTED`` target property.

If a binary target is linked transitively to a Mac OX framework, the
``Headers`` directory of the framework is also treated as a usage requirement.
This has the same effect as passing the framework directory as an include
directory.

Link Libraries and Generator Expressions
----------------------------------------

Like build specifications, ``link libraries`` may be
specified with generator expression conditions.  However, as consumption of
usage requirements is based on collection from linked dependencies, there is
an additional limitation that the link dependencies must form a "directed
acyclic graph".  That is, if linking to a target is dependent on the value of
a target property, that target property may not be dependent on the linked
dependencies:

 add_library(lib1 lib1.cpp)
 add_library(lib2 lib2.cpp)
 target_link_libraries(lib1 PUBLIC
   $<$<TARGET_PROPERTY:POSITION_INDEPENDENT_CODE>:lib2>
 )
 add_library(lib3 lib3.cpp)
 set_property(TARGET lib3 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 lib1 lib3)

As the value of the ``POSITION_INDEPENDENT_CODE`` property of
the ``exe1`` target is dependent on the linked libraries (``lib3``), and the
edge of linking ``exe1`` is determined by the same
``POSITION_INDEPENDENT_CODE`` property, the dependency graph above
contains a cycle.  ``cmake(1)`` issues a diagnostic in this case.

Output Artifacts
----------------

The buildsystem targets created by the ``add_library()`` and
``add_executable()`` commands create rules to create binary outputs.
The exact output location of the binaries can only be determined at
generate-time because it can depend on the build-configuration and the
link-language of linked dependencies etc.  ``TARGET_FILE``,
``TARGET_LINKER_FILE`` and related expressions can be used to access the
name and location of generated binaries.  These expressions do not work
for ``OBJECT`` libraries however, as there is no single file generated
by such libraries which is relevant to the expressions.

There are three kinds of output artifacts that may be build by targets
as detailed in the following sections.  Their classification differs
between DLL platforms and non-DLL platforms.  All Windows-based
systems including Cygwin are DLL platforms.

Runtime Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

A *runtime* output artifact of a buildsystem target may be:

* The executable file (e.g. ``.exe``) of an executable target
  created by the ``add_executable()`` command.

* On DLL platforms: the executable file (e.g. ``.dll``) of a shared
  library target created by the ``add_library()`` command
  with the ``SHARED`` option.

The ``RUNTIME_OUTPUT_DIRECTORY`` and ``RUNTIME_OUTPUT_NAME``
target properties may be used to control runtime output artifact locations
and names in the build tree.

Library Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

A *library* output artifact of a buildsystem target may be:

* The loadable module file (e.g. ``.dll`` or ``.so``) of a module
  library target created by the ``add_library()`` command
  with the ``MODULE`` option.

* On non-DLL platforms: the shared library file (e.g. ``.so`` or ``.dylib``)
  of a shared shared library target created by the ``add_library()``
  command with the ``SHARED`` option.

The ``LIBRARY_OUTPUT_DIRECTORY`` and ``LIBRARY_OUTPUT_NAME``
target properties may be used to control library output artifact locations
and names in the build tree.

Archive Output Artifacts
^^^^^^^^^^^^^^^^^^^^^^^^

An *archive* output artifact of a buildsystem target may be:

* The static library file (e.g. ``.lib`` or ``.a``) of a static
  library target created by the ``add_library()`` command
  with the ``STATIC`` option.

* On DLL platforms: the import library file (e.g. ``.lib``) of a shared
  library target created by the ``add_library()`` command
  with the ``SHARED`` option.  This file is only guaranteed to exist if
  the library exports at least one unmanaged symbol.

* On DLL platforms: the import library file (e.g. ``.lib``) of an
  executable target created by the ``add_executable()`` command
  when its ``ENABLE_EXPORTS`` target property is set.

The ``ARCHIVE_OUTPUT_DIRECTORY`` and ``ARCHIVE_OUTPUT_NAME``
target properties may be used to control archive output artifact locations
and names in the build tree.

Directory-Scoped Commands
-------------------------

The ``target_include_directories()``,
``target_compile_definitions()`` and
``target_compile_options()`` commands have an effect on only one
target at a time.  The commands ``add_definitions()``,
``add_compile_options()`` and ``include_directories()`` have
a similar function, but operate at directory scope instead of target
scope for convenience.

Pseudo Targets
==============

Some target types do not represent outputs of the buildsystem, but only inputs
such as external dependencies, aliases or other non-build artifacts.  Pseudo
targets are not represented in the generated buildsystem.

Imported Targets
----------------

An ``IMPORTED`` target represents a pre-existing dependency.  Usually
such targets are defined by an upstream package and should be treated as
immutable.  It is not possible to use an ``IMPORTED`` target in the
left-hand-side of the ``target_compile_definitions()``,
``target_include_directories()``, ``target_compile_options()`` or
``target_link_libraries()`` commands, as that would be an attempt to
modify it.  ``IMPORTED`` targets are designed to be used only in the
right-hand-side of those commands.

``IMPORTED`` targets may have the same usage requirement properties
populated as binary targets, such as
``INTERFACE_INCLUDE_DIRECTORIES``,
``INTERFACE_COMPILE_DEFINITIONS``,
``INTERFACE_COMPILE_OPTIONS``,
``INTERFACE_LINK_LIBRARIES``, and
``INTERFACE_POSITION_INDEPENDENT_CODE``.

The ``LOCATION`` may also be read from an IMPORTED target, though there
is rarely reason to do so.  Commands such as ``add_custom_command()`` can
transparently use an ``IMPORTED`` ``EXECUTABLE`` target
as a ``COMMAND`` executable.

The scope of the definition of an ``IMPORTED`` target is the directory
where it was defined.  It may be accessed and used from subdirectories, but
not from parent directories or sibling directories.  The scope is similar to
the scope of a cmake variable.

It is also possible to define a ``GLOBAL`` ``IMPORTED`` target which is
accessible globally in the buildsystem.

See the ``cmake-packages(7)`` manual for more on creating packages
with ``IMPORTED`` targets.

Alias Targets
-------------

An ``ALIAS`` target is a name which may be used interchangably with
a binary target name in read-only contexts.  A primary use-case for ``ALIAS``
targets is for example or unit test executables accompanying a library, which
may be part of the same buildsystem or built separately based on user
configuration.

 add_library(lib1 lib1.cpp)
 install(TARGETS lib1 EXPORT lib1Export ${dest_args})
 install(EXPORT lib1Export NAMESPACE Upstream:: ${other_args})

 add_library(Upstream::lib1 ALIAS lib1)

In another directory, we can link unconditionally to the ``Upstream::lib1``
target, which may be an ``IMPORTED`` target from a package, or an
``ALIAS`` target if built as part of the same buildsystem.

 if (NOT TARGET Upstream::lib1)
   find_package(lib1 REQUIRED)
 endif()
 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 Upstream::lib1)

``ALIAS`` targets are not mutable, installable or exportable.  They are
entirely local to the buildsystem description.  A name can be tested for
whether it is an ``ALIAS`` name by reading the ``ALIASED_TARGET``
property from it:

 get_target_property(_aliased Upstream::lib1 ALIASED_TARGET)
 if(_aliased)
   message(STATUS "The name Upstream::lib1 is an ALIAS for ${_aliased}.")
 endif()

Interface Libraries
-------------------

An ``INTERFACE`` target has no ``LOCATION`` and is mutable, but is
otherwise similar to an ``IMPORTED`` target.

It may specify usage requirements such as
``INTERFACE_INCLUDE_DIRECTORIES``,
``INTERFACE_COMPILE_DEFINITIONS``,
``INTERFACE_COMPILE_OPTIONS``,
``INTERFACE_LINK_LIBRARIES``,
``INTERFACE_SOURCES``,
and ``INTERFACE_POSITION_INDEPENDENT_CODE``.
Only the ``INTERFACE`` modes of the ``target_include_directories()``,
``target_compile_definitions()``, ``target_compile_options()``,
``target_sources()``, and ``target_link_libraries()`` commands
may be used with ``INTERFACE`` libraries.

A primary use-case for ``INTERFACE`` libraries is header-only libraries.

 add_library(Eigen INTERFACE)
 target_include_directories(Eigen INTERFACE
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
   $<INSTALL_INTERFACE:include/Eigen>
 )

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 Eigen)

Here, the usage requirements from the ``Eigen`` target are consumed and used
when compiling, but it has no effect on linking.

Another use-case is to employ an entirely target-focussed design for usage
requirements:

 add_library(pic_on INTERFACE)
 set_property(TARGET pic_on PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)
 add_library(pic_off INTERFACE)
 set_property(TARGET pic_off PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)

 add_library(enable_rtti INTERFACE)
 target_compile_options(enable_rtti INTERFACE
   $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>
 )

 add_executable(exe1 exe1.cpp)
 target_link_libraries(exe1 pic_on enable_rtti)

This way, the build specification of ``exe1`` is expressed entirely as linked
targets, and the complexity of compiler-specific flags is encapsulated in an
``INTERFACE`` library target.

The properties permitted to be set on or read from an ``INTERFACE`` library
are:

* Properties matching ``INTERFACE_*``
* Built-in properties matching ``COMPATIBLE_INTERFACE_*``
* ``EXPORT_NAME``
* ``IMPORTED``
* ``NAME``
* Properties matching ``MAP_IMPORTED_CONFIG_*``

``INTERFACE`` libraries may be installed and exported.  Any content they refer
to must be installed separately:

 add_library(Eigen INTERFACE)
 target_include_directories(Eigen INTERFACE
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
   $<INSTALL_INTERFACE:include/Eigen>
 )

 install(TARGETS Eigen EXPORT eigenExport)
 install(EXPORT eigenExport NAMESPACE Upstream::
   DESTINATION lib/cmake/Eigen
 )
 install(FILES
     ${CMAKE_CURRENT_SOURCE_DIR}/src/eigen.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/vector.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.h
   DESTINATION include/Eigen
 )

cmake-commands(7)
*****************

Normal Commands
===============

These commands may be used freely in CMake projects.

add_compile_options
-------------------

Adds options to the compilation of source files.

::

 add_compile_options(<option> ...)

Adds options to the compiler command line for targets in the current
directory and below that are added after this command is invoked.
See documentation of the ``directory`` and
``target`` ``COMPILE_OPTIONS`` properties.

This command can be used to add any options, but alternative commands
exist to add preprocessor definitions (``target_compile_definitions()``
and ``add_definitions()``) or include directories
(``target_include_directories()`` and ``include_directories()``).

Arguments to ``add_compile_options`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

add_custom_command
------------------

Add a custom build rule to the generated build system.

There are two main signatures for ``add_custom_command``.

Generating Files
^^^^^^^^^^^^^^^^

The first signature is for adding a custom command to produce an output::

 add_custom_command(OUTPUT output1 [output2 ...]
                    COMMAND command1 [ARGS] [args1...]
                    [COMMAND command2 [ARGS] [args2...] ...]
                    [MAIN_DEPENDENCY depend]
                    [DEPENDS [depends...]]
                    [BYPRODUCTS [files...]]
                    [IMPLICIT_DEPENDS <lang1> depend1
                                     [<lang2> depend2] ...]
                    [WORKING_DIRECTORY dir]
                    [COMMENT comment]
                    [VERBATIM] [APPEND] [USES_TERMINAL])

This defines a command to generate specified ``OUTPUT`` file(s).
A target created in the same directory (``CMakeLists.txt`` file)
that specifies any output of the custom command as a source file
is given a rule to generate the file using the command at build time.
Do not list the output in more than one independent target that
may build in parallel or the two instances of the rule may conflict
(instead use the ``add_custom_target()`` command to drive the
command and make the other targets depend on that one).
In makefile terms this creates a new target in the following form::

 OUTPUT: MAIN_DEPENDENCY DEPENDS
         COMMAND

The options are:

``APPEND``
  Append the ``COMMAND`` and ``DEPENDS`` option values to the custom
  command for the first output specified.  There must have already
  been a previous call to this command with the same output.
  The ``COMMENT``, ``MAIN_DEPENDENCY``, and ``WORKING_DIRECTORY``
  options are currently ignored when APPEND is given, but may be
  used in the future.

``BYPRODUCTS``
  Specify the files the command is expected to produce but whose
  modification time may or may not be newer than the dependencies.
  If a byproduct name is a relative path it will be interpreted
  relative to the build tree directory corresponding to the
  current source directory.
  Each byproduct file will be marked with the ``GENERATED``
  source file property automatically.

  Explicit specification of byproducts is supported by the
  ``Ninja`` generator to tell the ``ninja`` build tool
  how to regenerate byproducts when they are missing.  It is
  also useful when other build rules (e.g. custom commands)
  depend on the byproducts.  Ninja requires a build rule for any
  generated file on which another rule depends even if there are
  order-only dependencies to ensure the byproducts will be
  available before their dependents build.

  The ``BYPRODUCTS`` option is ignored on non-Ninja generators
  except to mark byproducts ``GENERATED``.

``COMMAND``
  Specify the command-line(s) to execute at build time.
  If more than one ``COMMAND`` is specified they will be executed in order,
  but *not* necessarily composed into a stateful shell or batch script.
  (To run a full script, use the ``configure_file()`` command or the
  ``file(GENERATE)`` command to create it, and then specify
  a ``COMMAND`` to launch it.)
  The optional ``ARGS`` argument is for backward compatibility and
  will be ignored.

  If ``COMMAND`` specifies an executable target name (created by the
  ``add_executable()`` command) it will automatically be replaced
  by the location of the executable created at build time. If set, the
  ``CROSSCOMPILING_EMULATOR`` executable target property will
  also be prepended to the command to allow the executable to run on
  the host.
  (Use the ``TARGET_FILE``
  ``generator expression`` to
  reference an executable later in the command line.)
  Additionally a target-level dependency will be added so that the
  executable target will be built before any target using this custom
  command.  However this does NOT add a file-level dependency that
  would cause the custom command to re-run whenever the executable is
  recompiled.

  Arguments to ``COMMAND`` may use
  ``generator expressions``.
  References to target names in generator expressions imply target-level
  dependencies, but NOT file-level dependencies.  List target names with
  the ``DEPENDS`` option to add file-level dependencies.

``COMMENT``
  Display the given message before the commands are executed at
  build time.

``DEPENDS``
  Specify files on which the command depends.  If any dependency is
  an ``OUTPUT`` of another custom command in the same directory
  (``CMakeLists.txt`` file) CMake automatically brings the other
  custom command into the target in which this command is built.
  If ``DEPENDS`` is not specified the command will run whenever
  the ``OUTPUT`` is missing; if the command does not actually
  create the ``OUTPUT`` then the rule will always run.
  If ``DEPENDS`` specifies any target (created by the
  ``add_custom_target()``, ``add_executable()``, or
  ``add_library()`` command) a target-level dependency is
  created to make sure the target is built before any target
  using this custom command.  Additionally, if the target is an
  executable or library a file-level dependency is created to
  cause the custom command to re-run whenever the target is
  recompiled.

  Arguments to ``DEPENDS`` may use
  ``generator expressions``.

``IMPLICIT_DEPENDS``
  Request scanning of implicit dependencies of an input file.
  The language given specifies the programming language whose
  corresponding dependency scanner should be used.
  Currently only ``C`` and ``CXX`` language scanners are supported.
  The language has to be specified for every file in the
  ``IMPLICIT_DEPENDS`` list.  Dependencies discovered from the
  scanning are added to those of the custom command at build time.
  Note that the ``IMPLICIT_DEPENDS`` option is currently supported
  only for Makefile generators and will be ignored by other generators.

``MAIN_DEPENDENCY``
  Specify the primary input source file to the command.  This is
  treated just like any value given to the ``DEPENDS`` option
  but also suggests to Visual Studio generators where to hang
  the custom command.  At most one custom command may specify a
  given source file as its main dependency.

``OUTPUT``
  Specify the output files the command is expected to produce.
  If an output name is a relative path it will be interpreted
  relative to the build tree directory corresponding to the
  current source directory.
  Each output file will be marked with the ``GENERATED``
  source file property automatically.
  If the output of the custom command is not actually created
  as a file on disk it should be marked with the ``SYMBOLIC``
  source file property.

``USES_TERMINAL``
  The command will be given direct access to the terminal if possible.
  With the ``Ninja`` generator, this places the command in
  the ``console`` ``pool``.

``VERBATIM``
  All arguments to the commands will be escaped properly for the
  build tool so that the invoked command receives each argument
  unchanged.  Note that one level of escapes is still used by the
  CMake language processor before add_custom_command even sees the
  arguments.  Use of ``VERBATIM`` is recommended as it enables
  correct behavior.  When ``VERBATIM`` is not given the behavior
  is platform specific because there is no protection of
  tool-specific special characters.

``WORKING_DIRECTORY``
  Execute the command with the given current working directory.
  If it is a relative path it will be interpreted relative to the
  build tree directory corresponding to the current source directory.

Build Events
^^^^^^^^^^^^

The second signature adds a custom command to a target such as a
library or executable.  This is useful for performing an operation
before or after building the target.  The command becomes part of the
target and will only execute when the target itself is built.  If the
target is already built, the command will not execute.

::

 add_custom_command(TARGET <target>
                    PRE_BUILD | PRE_LINK | POST_BUILD
                    COMMAND command1 [ARGS] [args1...]
                    [COMMAND command2 [ARGS] [args2...] ...]
                    [BYPRODUCTS [files...]]
                    [WORKING_DIRECTORY dir]
                    [COMMENT comment]
                    [VERBATIM] [USES_TERMINAL])

This defines a new command that will be associated with building the
specified ``<target>``.  The ``<target>`` must be defined in the current
directory; targets defined in other directories may not be specified.

When the command will happen is determined by which
of the following is specified:

``PRE_BUILD``
  Run before any other rules are executed within the target.
  This is supported only on Visual Studio 7 or later.
  For all other generators ``PRE_BUILD`` will be treated as
  ``PRE_LINK``.
``PRE_LINK``
  Run after sources have been compiled but before linking the binary
  or running the librarian or archiver tool of a static library.
  This is not defined for targets created by the
  ``add_custom_target()`` command.
``POST_BUILD``
  Run after all other rules within the target have been executed.

add_custom_target
-----------------

Add a target with no output so it will always be built.

::

 add_custom_target(Name [ALL] [command1 [args1...]]
                   [COMMAND command2 [args2...] ...]
                   [DEPENDS depend depend depend ... ]
                   [BYPRODUCTS [files...]]
                   [WORKING_DIRECTORY dir]
                   [COMMENT comment]
                   [VERBATIM] [USES_TERMINAL]
                   [SOURCES src1 [src2...]])

Adds a target with the given name that executes the given commands.
The target has no output file and is *always considered out of date*
even if the commands try to create a file with the name of the target.
Use the ``add_custom_command()`` command to generate a file with
dependencies.  By default nothing depends on the custom target.  Use
the ``add_dependencies()`` command to add dependencies to or
from other targets.

The options are:

``ALL``
  Indicate that this target should be added to the default build
  target so that it will be run every time (the command cannot be
  called ``ALL``).

``BYPRODUCTS``
  Specify the files the command is expected to produce but whose
  modification time may or may not be updated on subsequent builds.
  If a byproduct name is a relative path it will be interpreted
  relative to the build tree directory corresponding to the
  current source directory.
  Each byproduct file will be marked with the ``GENERATED``
  source file property automatically.

  Explicit specification of byproducts is supported by the
  ``Ninja`` generator to tell the ``ninja`` build tool
  how to regenerate byproducts when they are missing.  It is
  also useful when other build rules (e.g. custom commands)
  depend on the byproducts.  Ninja requires a build rule for any
  generated file on which another rule depends even if there are
  order-only dependencies to ensure the byproducts will be
  available before their dependents build.

  The ``BYPRODUCTS`` option is ignored on non-Ninja generators
  except to mark byproducts ``GENERATED``.

``COMMAND``
  Specify the command-line(s) to execute at build time.
  If more than one ``COMMAND`` is specified they will be executed in order,
  but *not* necessarily composed into a stateful shell or batch script.
  (To run a full script, use the ``configure_file()`` command or the
  ``file(GENERATE)`` command to create it, and then specify
  a ``COMMAND`` to launch it.)

  If ``COMMAND`` specifies an executable target name (created by the
  ``add_executable()`` command) it will automatically be replaced
  by the location of the executable created at build time. If set, the
  ``CROSSCOMPILING_EMULATOR`` executable target property will
  also be prepended to the command to allow the executable to run on
  the host.
  Additionally a target-level dependency will be added so that the
  executable target will be built before this custom target.

  Arguments to ``COMMAND`` may use
  ``generator expressions``.
  References to target names in generator expressions imply target-level
  dependencies.

  The command and arguments are optional and if not specified an empty
  target will be created.

``COMMENT``
  Display the given message before the commands are executed at
  build time.

``DEPENDS``
  Reference files and outputs of custom commands created with
  ``add_custom_command()`` command calls in the same directory
  (``CMakeLists.txt`` file).  They will be brought up to date when
  the target is built.

  Use the ``add_dependencies()`` command to add dependencies
  on other targets.

``SOURCES``
  Specify additional source files to be included in the custom target.
  Specified source files will be added to IDE project files for
  convenience in editing even if they have no build rules.

``VERBATIM``
  All arguments to the commands will be escaped properly for the
  build tool so that the invoked command receives each argument
  unchanged.  Note that one level of escapes is still used by the
  CMake language processor before ``add_custom_target`` even sees
  the arguments.  Use of ``VERBATIM`` is recommended as it enables
  correct behavior.  When ``VERBATIM`` is not given the behavior
  is platform specific because there is no protection of
  tool-specific special characters.

``USES_TERMINAL``
  The command will be given direct access to the terminal if possible.
  With the ``Ninja`` generator, this places the command in
  the ``console`` ``pool``.

``WORKING_DIRECTORY``
  Execute the command with the given current working directory.
  If it is a relative path it will be interpreted relative to the
  build tree directory corresponding to the current source directory.

add_definitions
---------------

Adds -D define flags to the compilation of source files.

::

 add_definitions(-DFOO -DBAR ...)

Adds definitions to the compiler command line for targets in the current
directory and below (whether added before or after this command is invoked).
This command can be used to add any flags, but it is intended to add
preprocessor definitions (see the ``add_compile_options()`` command
to add other flags).
Flags beginning in -D or /D that look like preprocessor definitions are
automatically added to the ``COMPILE_DEFINITIONS`` directory
property for the current directory.  Definitions with non-trivial values
may be left in the set of flags instead of being converted for reasons of
backwards compatibility.  See documentation of the
``directory``,
``target``,
``source file`` ``COMPILE_DEFINITIONS``
properties for details on adding preprocessor definitions to specific
scopes and configurations.

See the ``cmake-buildsystem(7)`` manual for more on defining
buildsystem properties.

add_dependencies
----------------

Add a dependency between top-level targets.

::

 add_dependencies(<target> [<target-dependency>]...)

Make a top-level ``<target>`` depend on other top-level targets to
ensure that they build before ``<target>`` does.  A top-level target
is one created by one of the ``add_executable()``,
``add_library()``, or ``add_custom_target()`` commands
(but not targets generated by CMake like ``install``).

Dependencies added to an :ref:`imported target <Imported Targets>`
or an :ref:`interface library <Interface Libraries>` are followed
transitively in its place since the target itself does not build.

See the ``DEPENDS`` option of ``add_custom_target()`` and
``add_custom_command()`` commands for adding file-level
dependencies in custom rules.  See the ``OBJECT_DEPENDS``
source file property to add file-level dependencies to object files.

add_executable
--------------

Add an executable to the project using the specified source files.

::

 add_executable(<name> [WIN32] [MACOSX_BUNDLE]
                [EXCLUDE_FROM_ALL]
                source1 [source2 ...])

Adds an executable target called ``<name>`` to be built from the source
files listed in the command invocation.  The ``<name>`` corresponds to the
logical target name and must be globally unique within a project.  The
actual file name of the executable built is constructed based on
conventions of the native platform (such as ``<name>.exe`` or just
``<name>``).

By default the executable file will be created in the build tree
directory corresponding to the source tree directory in which the
command was invoked.  See documentation of the
``RUNTIME_OUTPUT_DIRECTORY`` target property to change this
location.  See documentation of the ``OUTPUT_NAME`` target property
to change the ``<name>`` part of the final file name.

If ``WIN32`` is given the property ``WIN32_EXECUTABLE`` will be
set on the target created.  See documentation of that target property for
details.

If ``MACOSX_BUNDLE`` is given the corresponding property will be set on
the created target.  See documentation of the ``MACOSX_BUNDLE``
target property for details.

If ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on
the created target.  See documentation of the ``EXCLUDE_FROM_ALL``
target property for details.

Source arguments to ``add_executable`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.


--------------------------------------------------------------------------

::

 add_executable(<name> IMPORTED [GLOBAL])

An :ref:`IMPORTED executable target <Imported Targets>` references an
executable file located outside the project.  No rules are generated to
build it, and the ``IMPORTED`` target property is ``True``.  The
target name has scope in the directory in which it is created and below, but
the ``GLOBAL`` option extends visibility.  It may be referenced like any
target built within the project.  ``IMPORTED`` executables are useful
for convenient reference from commands like ``add_custom_command()``.
Details about the imported executable are specified by setting properties
whose names begin in ``IMPORTED_``.  The most important such property is
``IMPORTED_LOCATION`` (and its per-configuration version
``IMPORTED_LOCATION_<CONFIG>``) which specifies the location of
the main executable file on disk.  See documentation of the ``IMPORTED_*``
properties for more information.

--------------------------------------------------------------------------

::

 add_executable(<name> ALIAS <target>)

Creates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can
be used to refer to ``<target>`` in subsequent commands.  The ``<name>``
does not appear in the generated buildsystem as a make target.  The
``<target>`` may not be an :ref:`Imported Target <Imported Targets>` or an
``ALIAS``.  ``ALIAS`` targets can be used as targets to read properties
from, executables for custom commands and custom targets.  They can also be
tested for existence with the regular ``if(TARGET)`` subcommand.
The ``<name>`` may not be used to modify properties of ``<target>``, that
is, it may not be used as the operand of ``set_property()``,
``set_target_properties()``, ``target_link_libraries()`` etc.
An ``ALIAS`` target may not be installed or exported.

add_library
-----------

Add a library to the project using the specified source files.

Normal Libraries
^^^^^^^^^^^^^^^^

::

 add_library(<name> [STATIC | SHARED | MODULE]
             [EXCLUDE_FROM_ALL]
             source1 [source2 ...])

Adds a library target called ``<name>`` to be built from the source files
listed in the command invocation.  The ``<name>`` corresponds to the
logical target name and must be globally unique within a project.  The
actual file name of the library built is constructed based on
conventions of the native platform (such as ``lib<name>.a`` or
``<name>.lib``).

``STATIC``, ``SHARED``, or ``MODULE`` may be given to specify the type of
library to be created.  ``STATIC`` libraries are archives of object files
for use when linking other targets.  ``SHARED`` libraries are linked
dynamically and loaded at runtime.  ``MODULE`` libraries are plugins that
are not linked into other targets but may be loaded dynamically at runtime
using dlopen-like functionality.  If no type is given explicitly the
type is ``STATIC`` or ``SHARED`` based on whether the current value of the
variable ``BUILD_SHARED_LIBS`` is ``ON``.  For ``SHARED`` and
``MODULE`` libraries the ``POSITION_INDEPENDENT_CODE`` target
property is set to ``ON`` automatically.
A ``SHARED`` library may be marked with the ``FRAMEWORK``
target property to create an OS X Framework.

If a library does not export any symbols, it must not be declared as a
``SHARED`` library.  For example, a Windows resource DLL or a managed C++/CLI
DLL that exports no unmanaged symbols would need to be a ``MODULE`` library.
This is because CMake expects a ``SHARED`` library to always have an
associated import library on Windows.

By default the library file will be created in the build tree directory
corresponding to the source tree directory in which the command was
invoked.  See documentation of the ``ARCHIVE_OUTPUT_DIRECTORY``,
``LIBRARY_OUTPUT_DIRECTORY``, and
``RUNTIME_OUTPUT_DIRECTORY`` target properties to change this
location.  See documentation of the ``OUTPUT_NAME`` target
property to change the ``<name>`` part of the final file name.

If ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on
the created target.  See documentation of the ``EXCLUDE_FROM_ALL``
target property for details.

Source arguments to ``add_library`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

Imported Libraries
^^^^^^^^^^^^^^^^^^

::

 add_library(<name> <SHARED|STATIC|MODULE|UNKNOWN> IMPORTED
             [GLOBAL])

An :ref:`IMPORTED library target <Imported Targets>` references a library
file located outside the project.  No rules are generated to build it, and
the ``IMPORTED`` target property is ``True``.  The target name has
scope in the directory in which it is created and below, but the ``GLOBAL``
option extends visibility.  It may be referenced like any target built
within the project.  ``IMPORTED`` libraries are useful for convenient
reference from commands like ``target_link_libraries()``.  Details
about the imported library are specified by setting properties whose names
begin in ``IMPORTED_`` and ``INTERFACE_``.  The most important such
property is ``IMPORTED_LOCATION`` (and its per-configuration
variant ``IMPORTED_LOCATION_<CONFIG>``) which specifies the
location of the main library file on disk.  See documentation of the
``IMPORTED_*`` and ``INTERFACE_*`` properties for more information.

Object Libraries
^^^^^^^^^^^^^^^^

::

 add_library(<name> OBJECT <src>...)

Creates an :ref:`Object Library <Object Libraries>`.  An object library
compiles source files but does not archive or link their object files into a
library.  Instead other targets created by ``add_library()`` or
``add_executable()`` may reference the objects using an expression of the
form ``$<TARGET_OBJECTS:objlib>`` as a source, where ``objlib`` is the
object library name.  For example:

 add_library(... $<TARGET_OBJECTS:objlib> ...)
 add_executable(... $<TARGET_OBJECTS:objlib> ...)

will include objlib's object files in a library and an executable
along with those compiled from their own sources.  Object libraries
may contain only sources that compile, header files, and other files
that would not affect linking of a normal library (e.g. ``.txt``).
They may contain custom commands generating such sources, but not
``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` commands.  Object libraries
cannot be imported, exported, installed, or linked.  Some native build
systems may not like targets that have only object files, so consider
adding at least one real source file to any target that references
``$<TARGET_OBJECTS:objlib>``.

Alias Libraries
^^^^^^^^^^^^^^^

::

 add_library(<name> ALIAS <target>)

Creates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can be
used to refer to ``<target>`` in subsequent commands.  The ``<name>`` does
not appear in the generatedbuildsystem as a make target.  The ``<target>``
may not be an :ref:`Imported Target <Imported Targets>` or an ``ALIAS``.
``ALIAS`` targets can be used as linkable targets and as targets to
read properties from.  They can also be tested for existence with the
regular ``if(TARGET)`` subcommand.  The ``<name>`` may not be used
to modify properties of ``<target>``, that is, it may not be used as the
operand of ``set_property()``, ``set_target_properties()``,
``target_link_libraries()`` etc.  An ``ALIAS`` target may not be
installed or exported.

Interface Libraries
^^^^^^^^^^^^^^^^^^^

::

 add_library(<name> INTERFACE [IMPORTED [GLOBAL]])

Creates an :ref:`Interface Library <Interface Libraries>`.  An ``INTERFACE``
library target does not directly create build output, though it may
have properties set on it and it may be installed, exported and
imported. Typically the ``INTERFACE_*`` properties are populated on
the interface target using the commands:

* ``set_property()``,
* ``target_link_libraries(INTERFACE)``,
* ``target_include_directories(INTERFACE)``,
* ``target_compile_options(INTERFACE)``,
* ``target_compile_definitions(INTERFACE)``, and
* ``target_sources(INTERFACE)``,

and then it is used as an argument to ``target_link_libraries()``
like any other target.

An ``INTERFACE`` :ref:`Imported Target <Imported Targets>` may also be
created with this signature.  An ``IMPORTED`` library target references a
library defined outside the project.  The target name has scope in the
directory in which it is created and below, but the ``GLOBAL`` option
extends visibility.  It may be referenced like any target built within
the project.  ``IMPORTED`` libraries are useful for convenient reference
from commands like ``target_link_libraries()``.

add_subdirectory
----------------

Add a subdirectory to the build.

::

 add_subdirectory(source_dir [binary_dir]
                  [EXCLUDE_FROM_ALL])

Add a subdirectory to the build.  The source_dir specifies the
directory in which the source CMakeLists.txt and code files are
located.  If it is a relative path it will be evaluated with respect
to the current directory (the typical usage), but it may also be an
absolute path.  The ``binary_dir`` specifies the directory in which to
place the output files.  If it is a relative path it will be evaluated
with respect to the current output directory, but it may also be an
absolute path.  If ``binary_dir`` is not specified, the value of
``source_dir``, before expanding any relative path, will be used (the
typical usage).  The CMakeLists.txt file in the specified source
directory will be processed immediately by CMake before processing in
the current input file continues beyond this command.

If the ``EXCLUDE_FROM_ALL`` argument is provided then targets in the
subdirectory will not be included in the ``ALL`` target of the parent
directory by default, and will be excluded from IDE project files.
Users must explicitly build targets in the subdirectory.  This is
meant for use when the subdirectory contains a separate part of the
project that is useful but not necessary, such as a set of examples.
Typically the subdirectory should contain its own ``project()``
command invocation so that a full build system will be generated in the
subdirectory (such as a VS IDE solution file).  Note that inter-target
dependencies supercede this exclusion.  If a target built by the
parent project depends on a target in the subdirectory, the dependee
target will be included in the parent project build system to satisfy
the dependency.

add_test
--------

Add a test to the project to be run by ``ctest(1)``.

::

 add_test(NAME <name> COMMAND <command> [<arg>...]
          [CONFIGURATIONS <config>...]
          [WORKING_DIRECTORY <dir>])

Add a test called ``<name>``.  The test name may not contain spaces,
quotes, or other characters special in CMake syntax.  The options are:

``COMMAND``
  Specify the test command-line.  If ``<command>`` specifies an
  executable target (created by ``add_executable()``) it will
  automatically be replaced by the location of the executable created
  at build time.

``CONFIGURATIONS``
  Restrict execution of the test only to the named configurations.

``WORKING_DIRECTORY``
  Set the ``WORKING_DIRECTORY`` test property to
  specify the working directory in which to execute the test.
  If not specified the test will be run with the current working
  directory set to the build directory corresponding to the
  current source directory.

The given test command is expected to exit with code ``0`` to pass and
non-zero to fail, or vice-versa if the ``WILL_FAIL`` test
property is set.  Any output written to stdout or stderr will be
captured by ``ctest(1)`` but does not affect the pass/fail status
unless the ``PASS_REGULAR_EXPRESSION`` or
``FAIL_REGULAR_EXPRESSION`` test property is used.

The ``COMMAND`` and ``WORKING_DIRECTORY`` options may use "generator
expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available expressions.

Example usage::

 add_test(NAME mytest
          COMMAND testDriver --config $<CONFIGURATION>
                             --exe $<TARGET_FILE:myexe>)

This creates a test ``mytest`` whose command runs a ``testDriver`` tool
passing the configuration name and the full path to the executable
file produced by target ``myexe``.

.. note::

  CMake will generate tests only if the ``enable_testing()``
  command has been invoked.  The ``CTest`` module invokes the
  command automatically when the ``BUILD_TESTING`` option is ``ON``.

---------------------------------------------------------------------

::

 add_test(<name> <command> [<arg>...])

Add a test called ``<name>`` with the given command-line.  Unlike
the above ``NAME`` signature no transformation is performed on the
command-line to support target names or generator expressions.

aux_source_directory
--------------------

Find all source files in a directory.

::

 aux_source_directory(<dir> <variable>)

Collects the names of all the source files in the specified directory
and stores the list in the ``<variable>`` provided.  This command is
intended to be used by projects that use explicit template
instantiation.  Template instantiation files can be stored in a
"Templates" subdirectory and collected automatically using this
command to avoid manually listing all instantiations.

It is tempting to use this command to avoid writing the list of source
files for a library or executable target.  While this seems to work,
there is no way for CMake to generate a build system that knows when a
new source file has been added.  Normally the generated build system
knows when it needs to rerun CMake because the CMakeLists.txt file is
modified to add a new source.  When the source is just added to the
directory without modifying this file, one would have to manually
rerun CMake to generate a build system incorporating the new file.

break
-----

Break from an enclosing foreach or while loop.

::

 break()

Breaks from an enclosing foreach loop or while loop

See also the ``continue()`` command.

build_command
-------------

Get a command line to build the current project.
This is mainly intended for internal use by the ``CTest`` module.

 build_command(<variable>
               [CONFIGURATION <config>]
               [TARGET <target>]
               [PROJECT_NAME <projname>] # legacy, causes warning
              )

Sets the given ``<variable>`` to a command-line string of the form::

 <cmake> --build . [--config <config>] [--target <target>] [-- -i]

where ``<cmake>`` is the location of the ``cmake(1)`` command-line
tool, and ``<config>`` and ``<target>`` are the values provided to the
``CONFIGURATION`` and ``TARGET`` options, if any.  The trailing ``-- -i``
option is added for :ref:`Makefile Generators` if policy ``CMP0061``
is not set to ``NEW``.

When invoked, this ``cmake --build`` command line will launch the
underlying build system tool.

 build_command(<cachevariable> <makecommand>)

This second signature is deprecated, but still available for backwards
compatibility.  Use the first signature instead.

It sets the given ``<cachevariable>`` to a command-line string as
above but without the ``--target`` option.
The ``<makecommand>`` is ignored but should be the full path to
devenv, nmake, make or one of the end user build tools
for legacy invocations.

.. note::
 In CMake versions prior to 3.0 this command returned a command
 line that directly invokes the native build tool for the current
 generator.  Their implementation of the ``PROJECT_NAME`` option
 had no useful effects, so CMake now warns on use of the option.

cmake_host_system_information
-----------------------------

Query host system specific information.

::

 cmake_host_system_information(RESULT <variable> QUERY <key> ...)

Queries system information of the host system on which cmake runs.
One or more ``<key>`` can be provided to select the information to be
queried.  The list of queried values is stored in ``<variable>``.

``<key>`` can be one of the following values:

::

 NUMBER_OF_LOGICAL_CORES   = Number of logical cores.
 NUMBER_OF_PHYSICAL_CORES  = Number of physical cores.
 HOSTNAME                  = Hostname.
 FQDN                      = Fully qualified domain name.
 TOTAL_VIRTUAL_MEMORY      = Total virtual memory in megabytes.
 AVAILABLE_VIRTUAL_MEMORY  = Available virtual memory in megabytes.
 TOTAL_PHYSICAL_MEMORY     = Total physical memory in megabytes.
 AVAILABLE_PHYSICAL_MEMORY = Available physical memory in megabytes.

cmake_minimum_required
----------------------

Set the minimum required version of cmake for a project and
update `Policy Settings`_ to match the version given::

 cmake_minimum_required(VERSION major.minor[.patch[.tweak]]
                        [FATAL_ERROR])

If the current version of CMake is lower than that required it will
stop processing the project and report an error.

The ``FATAL_ERROR`` option is accepted but ignored by CMake 2.6 and
higher.  It should be specified so CMake versions 2.4 and lower fail
with an error instead of just a warning.

.. note::
  Call the ``cmake_minimum_required()`` command at the beginning of
  the top-level ``CMakeLists.txt`` file even before calling the
  ``project()`` command.  It is important to establish version
  and policy settings before invoking other commands whose behavior
  they may affect.  See also policy ``CMP0000``.

  Calling ``cmake_minimum_required()`` inside a ``function()``
  limits some effects to the function scope when invoked.  Such calls
  should not be made with the intention of having global effects.

Policy Settings
^^^^^^^^^^^^^^^

The ``cmake_minimum_required(VERSION)`` command implicitly invokes the
``cmake_policy(VERSION)`` command to specify that the current
project code is written for the given version of CMake.
All policies introduced in the specified version or earlier will be
set to use NEW behavior.  All policies introduced after the specified
version will be unset.  This effectively requests behavior preferred
as of a given CMake version and tells newer CMake versions to warn
about their new policies.

When a version higher than 2.4 is specified the command implicitly
invokes::

 cmake_policy(VERSION major[.minor[.patch[.tweak]]])

which sets the cmake policy version level to the version specified.
When version 2.4 or lower is given the command implicitly invokes::

 cmake_policy(VERSION 2.4)

which enables compatibility features for CMake 2.4 and lower.

cmake_parse_arguments
---------------------

``cmake_parse_arguments`` is intended to be used in macros or functions for
parsing the arguments given to that macro or function.  It processes the
arguments and defines a set of variables which hold the values of the
respective options.

::

 cmake_parse_arguments(<prefix> <options> <one_value_keywords>
                       <multi_value_keywords> args...)

The ``<options>`` argument contains all options for the respective macro,
i.e.  keywords which can be used when calling the macro without any value
following, like e.g.  the ``OPTIONAL`` keyword of the ``install()``
command.

The ``<one_value_keywords>`` argument contains all keywords for this macro
which are followed by one value, like e.g. ``DESTINATION`` keyword of the
``install()`` command.

The ``<multi_value_keywords>`` argument contains all keywords for this
macro which can be followed by more than one value, like e.g. the
``TARGETS`` or ``FILES`` keywords of the ``install()`` command.

.. note::

   All keywords shall be unique. I.e. every keyword shall only be specified
   once in either ``<options>``, ``<one_value_keywords>`` or
   ``<multi_value_keywords>``. A warning will be emitted if uniqueness is
   violated.

When done, ``cmake_parse_arguments`` will have defined for each of the
keywords listed in ``<options>``, ``<one_value_keywords>`` and
``<multi_value_keywords>`` a variable composed of the given ``<prefix>``
followed by ``"_"`` and the name of the respective keyword.  These
variables will then hold the respective value from the argument list.
For the ``<options>`` keywords this will be ``TRUE`` or ``FALSE``.

All remaining arguments are collected in a variable
``<prefix>_UNPARSED_ARGUMENTS``, this can be checked afterwards to see
whether your macro was called with unrecognized parameters.

As an example here a ``my_install()`` macro, which takes similar arguments
as the real ``install()`` command:

 function(MY_INSTALL)
     set(options OPTIONAL FAST)
     set(oneValueArgs DESTINATION RENAME)
     set(multiValueArgs TARGETS CONFIGURATIONS)
     cmake_parse_arguments(MY_INSTALL "${options}" "${oneValueArgs}"
                           "${multiValueArgs}" ${ARGN} )

     # ...

Assume ``my_install()`` has been called like this:

 my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)

After the ``cmake_parse_arguments`` call the macro will have set the
following variables::

 MY_INSTALL_OPTIONAL = TRUE
 MY_INSTALL_FAST = FALSE (was not used in call to my_install)
 MY_INSTALL_DESTINATION = "bin"
 MY_INSTALL_RENAME = "" (was not used)
 MY_INSTALL_TARGETS = "foo;bar"
 MY_INSTALL_CONFIGURATIONS = "" (was not used)
 MY_INSTALL_UNPARSED_ARGUMENTS = "blub" (nothing expected after "OPTIONAL")

You can then continue and process these variables.

Keywords terminate lists of values, e.g.  if directly after a
one_value_keyword another recognized keyword follows, this is
interpreted as the beginning of the new option.  E.g.
``my_install(TARGETS foo DESTINATION OPTIONAL)`` would result in
``MY_INSTALL_DESTINATION`` set to ``"OPTIONAL"``, but as ``OPTIONAL``
is a keyword itself ``MY_INSTALL_DESTINATION`` will be empty and
``MY_INSTALL_OPTIONAL`` will therefore be set to ``TRUE``.

cmake_policy
------------

Manage CMake Policy settings.  See the ``cmake-policies(7)``
manual for defined policies.

As CMake evolves it is sometimes necessary to change existing behavior
in order to fix bugs or improve implementations of existing features.
The CMake Policy mechanism is designed to help keep existing projects
building as new versions of CMake introduce changes in behavior.  Each
new policy (behavioral change) is given an identifier of the form
``CMP<NNNN>`` where ``<NNNN>`` is an integer index.  Documentation
associated with each policy describes the ``OLD`` and ``NEW`` behavior
and the reason the policy was introduced.  Projects may set each policy
to select the desired behavior.  When CMake needs to know which behavior
to use it checks for a setting specified by the project.  If no
setting is available the ``OLD`` behavior is assumed and a warning is
produced requesting that the policy be set.

Setting Policies by CMake Version
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``cmake_policy`` command is used to set policies to ``OLD`` or ``NEW``
behavior.  While setting policies individually is supported, we
encourage projects to set policies based on CMake versions::

 cmake_policy(VERSION major.minor[.patch[.tweak]])

Specify that the current CMake code is written for the given
version of CMake.  All policies introduced in the specified version or
earlier will be set to use ``NEW`` behavior.  All policies introduced
after the specified version will be unset (unless the
``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` variable sets a default).
This effectively requests behavior preferred as of a given CMake
version and tells newer CMake versions to warn about their new policies.
The policy version specified must be at least 2.4 or the command will
report an error.

Note that the ``cmake_minimum_required(VERSION)``
command implicitly calls ``cmake_policy(VERSION)`` too.

Setting Policies Explicitly
^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 cmake_policy(SET CMP<NNNN> NEW)
 cmake_policy(SET CMP<NNNN> OLD)

Tell CMake to use the ``OLD`` or ``NEW`` behavior for a given policy.
Projects depending on the old behavior of a given policy may silence a
policy warning by setting the policy state to ``OLD``.  Alternatively
one may fix the project to work with the new behavior and set the
policy state to ``NEW``.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Checking Policy Settings
^^^^^^^^^^^^^^^^^^^^^^^^

::

 cmake_policy(GET CMP<NNNN> <variable>)

Check whether a given policy is set to ``OLD`` or ``NEW`` behavior.
The output ``<variable>`` value will be ``OLD`` or ``NEW`` if the
policy is set, and empty otherwise.

CMake Policy Stack
^^^^^^^^^^^^^^^^^^

CMake keeps policy settings on a stack, so changes made by the
cmake_policy command affect only the top of the stack.  A new entry on
the policy stack is managed automatically for each subdirectory to
protect its parents and siblings.  CMake also manages a new entry for
scripts loaded by ``include()`` and ``find_package()`` commands
except when invoked with the ``NO_POLICY_SCOPE`` option
(see also policy ``CMP0011``).
The ``cmake_policy`` command provides an interface to manage custom
entries on the policy stack::

 cmake_policy(PUSH)
 cmake_policy(POP)

Each ``PUSH`` must have a matching ``POP`` to erase any changes.
This is useful to make temporary changes to policy settings.
Calls to the ``cmake_minimum_required(VERSION)``,
``cmake_policy(VERSION)``, or ``cmake_policy(SET)`` commands
influence only the current top of the policy stack.

Commands created by the ``function()`` and ``macro()``
commands record policy settings when they are created and
use the pre-record policies when they are invoked.  If the function or
macro implementation sets policies, the changes automatically
propagate up through callers until they reach the closest nested
policy stack entry.

configure_file
--------------

Copy a file to another location and modify its contents.

::

 configure_file(<input> <output>
                [COPYONLY] [ESCAPE_QUOTES] [@ONLY]
                [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])

Copies an ``<input>`` file to an ``<output>`` file and substitutes
variable values referenced as ``@VAR@`` or ``${VAR}`` in the input
file content.  Each variable reference will be replaced with the
current value of the variable, or the empty string if the variable
is not defined.  Furthermore, input lines of the form::

 #cmakedefine VAR ...

will be replaced with either::

 #define VAR ...

or::

 /* #undef VAR */

depending on whether ``VAR`` is set in CMake to any value not considered
a false constant by the ``if()`` command.  The "..." content on the
line after the variable name, if any, is processed as above.
Input file lines of the form ``#cmakedefine01 VAR`` will be replaced with
either ``#define VAR 1`` or ``#define VAR 0`` similarly.

If the input file is modified the build system will re-run CMake to
re-configure the file and generate the build system again.

The arguments are:

``<input>``
  Path to the input file.  A relative path is treated with respect to
  the value of ``CMAKE_CURRENT_SOURCE_DIR``.  The input path
  must be a file, not a directory.

``<output>``
  Path to the output file or directory.  A relative path is treated
  with respect to the value of ``CMAKE_CURRENT_BINARY_DIR``.
  If the path names an existing directory the output file is placed
  in that directory with the same file name as the input file.

``COPYONLY``
  Copy the file without replacing any variable references or other
  content.  This option may not be used with ``NEWLINE_STYLE``.

``ESCAPE_QUOTES``
  Escape any substituted quotes with backslashes (C-style).

``@ONLY``
  Restrict variable replacement to references of the form ``@VAR@``.
  This is useful for configuring scripts that use ``${VAR}`` syntax.

``NEWLINE_STYLE <style>``
  Specify the newline style for the output file.  Specify
  ``UNIX`` or ``LF`` for ``\n`` newlines, or specify
  ``DOS``, ``WIN32``, or ``CRLF`` for ``\r\n`` newlines.
  This option may not be used with ``COPYONLY``.

Example
^^^^^^^

Consider a source tree containing a ``foo.h.in`` file:

 #cmakedefine FOO_ENABLE
 #cmakedefine FOO_STRING "@FOO_STRING@"

An adjacent ``CMakeLists.txt`` may use ``configure_file`` to
configure the header:

 option(FOO_ENABLE "Enable Foo" ON)
 if(FOO_ENABLE)
   set(FOO_STRING "foo")
 endif()
 configure_file(foo.h.in foo.h @ONLY)

This creates a ``foo.h`` in the build directory corresponding to
this source directory.  If the ``FOO_ENABLE`` option is on, the
configured file will contain:

 #define FOO_ENABLE
 #define FOO_STRING "foo"

Otherwise it will contain:

 /* #undef FOO_ENABLE */
 /* #undef FOO_STRING */

One may then use the ``include_directories()`` command to
specify the output directory as an include directory:

 include_directories(${CMAKE_CURRENT_BINARY_DIR})

so that sources may include the header as ``#include <foo.h>``.

continue
--------

Continue to the top of enclosing foreach or while loop.

::

 continue()

The ``continue`` command allows a cmake script to abort the rest of a block
in a ``foreach()`` or ``while()`` loop, and start at the top of
the next iteration.  See also the ``break()`` command.

create_test_sourcelist
----------------------

Create a test driver and source list for building test programs.

::

 create_test_sourcelist(sourceListName driverName
                        test1 test2 test3
                        EXTRA_INCLUDE include.h
                        FUNCTION function)

A test driver is a program that links together many small tests into a
single executable.  This is useful when building static executables
with large libraries to shrink the total required size.  The list of
source files needed to build the test driver will be in
``sourceListName``.  ``driverName`` is the name of the test driver program.
The rest of the arguments consist of a list of test source files, can
be semicolon separated.  Each test source file should have a function
in it that is the same name as the file with no extension (foo.cxx
should have int foo(int, char*[]);) ``driverName`` will be able to call
each of the tests by name on the command line.  If ``EXTRA_INCLUDE`` is
specified, then the next argument is included into the generated file.
If ``FUNCTION`` is specified, then the next argument is taken as a
function name that is passed a pointer to ac and av.  This can be used
to add extra command line processing to each test.  The
``CMAKE_TESTDRIVER_BEFORE_TESTMAIN`` cmake variable can be set to
have code that will be placed directly before calling the test main function.
``CMAKE_TESTDRIVER_AFTER_TESTMAIN`` can be set to have code that
will be placed directly after the call to the test main function.

define_property
---------------

Define and document custom properties.

::

 define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |
                  TEST | VARIABLE | CACHED_VARIABLE>
                  PROPERTY <name> [INHERITED]
                  BRIEF_DOCS <brief-doc> [docs...]
                  FULL_DOCS <full-doc> [docs...])

Define one property in a scope for use with the ``set_property()`` and
``get_property()`` commands.  This is primarily useful to associate
documentation with property names that may be retrieved with the
``get_property()`` command. The first argument determines the kind of
scope in which the property should be used.  It must be one of the
following:

::

 GLOBAL    = associated with the global namespace
 DIRECTORY = associated with one directory
 TARGET    = associated with one target
 SOURCE    = associated with one source file
 TEST      = associated with a test named with add_test
 VARIABLE  = documents a CMake language variable
 CACHED_VARIABLE = documents a CMake cache variable

Note that unlike ``set_property()`` and ``get_property()`` no
actual scope needs to be given; only the kind of scope is important.

The required ``PROPERTY`` option is immediately followed by the name of
the property being defined.

If the ``INHERITED`` option then the ``get_property()`` command will
chain up to the next higher scope when the requested property is not set
in the scope given to the command. ``DIRECTORY`` scope chains to
``GLOBAL``. ``TARGET``, ``SOURCE``, and ``TEST`` chain to ``DIRECTORY``.

The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are followed by strings to be
associated with the property as its brief and full documentation.
Corresponding options to the ``get_property()`` command will retrieve
the documentation.

elseif
------

Starts the elseif portion of an if block.

::

 elseif(expression)

See the ``if()`` command.

else
----

Starts the else portion of an if block.

::

 else(expression)

See the ``if()`` command.

enable_language
---------------

Enable a language (CXX/C/Fortran/etc)

::

 enable_language(<lang> [OPTIONAL] )

This command enables support for the named language in CMake.  This is
the same as the project command but does not create any of the extra
variables that are created by the project command.  Example languages
are CXX, C, Fortran.

This command must be called in file scope, not in a function call.
Furthermore, it must be called in the highest directory common to all
targets using the named language directly for compiling sources or
indirectly through link dependencies.  It is simplest to enable all
needed languages in the top-level directory of a project.

The ``OPTIONAL`` keyword is a placeholder for future implementation and
does not currently work.

enable_testing
--------------

Enable testing for current directory and below.

::

 enable_testing()

Enables testing for this directory and below.  See also the
``add_test()`` command.  Note that ctest expects to find a test file
in the build directory root.  Therefore, this command should be in the
source directory root.

endforeach
----------

Ends a list of commands in a foreach block.

::

 endforeach(expression)

See the ``foreach()`` command.

endfunction
-----------

Ends a list of commands in a function block.

::

 endfunction(expression)

See the ``function()`` command.

endif
-----

Ends a list of commands in an if block.

::

 endif(expression)

See the ``if()`` command.

endmacro
--------

Ends a list of commands in a macro block.

::

 endmacro(expression)

See the ``macro()`` command.

endwhile
--------

Ends a list of commands in a while block.

::

 endwhile(expression)

See the ``while()`` command.

execute_process
---------------

Execute one or more child processes.

 execute_process(COMMAND <cmd1> [args1...]]
                 [COMMAND <cmd2> [args2...] [...]]
                 [WORKING_DIRECTORY <directory>]
                 [TIMEOUT <seconds>]
                 [RESULT_VARIABLE <variable>]
                 [OUTPUT_VARIABLE <variable>]
                 [ERROR_VARIABLE <variable>]
                 [INPUT_FILE <file>]
                 [OUTPUT_FILE <file>]
                 [ERROR_FILE <file>]
                 [OUTPUT_QUIET]
                 [ERROR_QUIET]
                 [OUTPUT_STRIP_TRAILING_WHITESPACE]
                 [ERROR_STRIP_TRAILING_WHITESPACE])

Runs the given sequence of one or more commands with the standard
output of each process piped to the standard input of the next.
A single standard error pipe is used for all processes.

Options:

``COMMAND``
 A child process command line.

 CMake executes the child process using operating system APIs directly.
 All arguments are passed VERBATIM to the child process.
 No intermediate shell is used, so shell operators such as ``>``
 are treated as normal arguments.
 (Use the ``INPUT_*``, ``OUTPUT_*``, and ``ERROR_*`` options to
 redirect stdin, stdout, and stderr.)

``WORKING_DIRECTORY``
 The named directory will be set as the current working directory of
 the child processes.

``TIMEOUT``
 The child processes will be terminated if they do not finish in the
 specified number of seconds (fractions are allowed).

``RESULT_VARIABLE``
 The variable will be set to contain the result of running the processes.
 This will be an integer return code from the last child or a string
 describing an error condition.

``OUTPUT_VARIABLE``, ``ERROR_VARIABLE``
 The variable named will be set with the contents of the standard output
 and standard error pipes, respectively.  If the same variable is named
 for both pipes their output will be merged in the order produced.

``INPUT_FILE, OUTPUT_FILE``, ``ERROR_FILE``
 The file named will be attached to the standard input of the first
 process, standard output of the last process, or standard error of
 all processes, respectively.  If the same file is named for both
 output and error then it will be used for both.

``OUTPUT_QUIET``, ``ERROR_QUIET``
 The standard output or standard error results will be quietly ignored.

If more than one ``OUTPUT_*`` or ``ERROR_*`` option is given for the
same pipe the precedence is not specified.
If no ``OUTPUT_*`` or ``ERROR_*`` options are given the output will
be shared with the corresponding pipes of the CMake process itself.

The ``execute_process()`` command is a newer more powerful version of
``exec_program()``, but the old command has been kept for compatibility.
Both commands run while CMake is processing the project prior to build
system generation.  Use ``add_custom_target()`` and
``add_custom_command()`` to create custom commands that run at
build time.

export
------

Export targets from the build tree for use by outside projects.

::

 export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])

Create a file ``<filename>`` that may be included by outside projects to
import targets from the current project's build tree.  This is useful
during cross-compiling to build utility executables that can run on
the host platform in one project and then import them into another
project being compiled for the target platform.  If the ``NAMESPACE``
option is given the ``<namespace>`` string will be prepended to all target
names written to the file.

Target installations are associated with the export ``<export-name>``
using the ``EXPORT`` option of the ``install(TARGETS)`` command.

The file created by this command is specific to the build tree and
should never be installed.  See the ``install(EXPORT)`` command to
export targets from an installation tree.

The properties set on the generated IMPORTED targets will have the
same values as the final values of the input TARGETS.

::

 export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>]
        [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES])

This signature is similar to the ``EXPORT`` signature, but targets are listed
explicitly rather than specified as an export-name.  If the APPEND option is
given the generated code will be appended to the file instead of overwriting it.
The EXPORT_LINK_INTERFACE_LIBRARIES keyword, if present, causes the
contents of the properties matching
``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when
policy CMP0022 is NEW.  If a library target is included in the export
but a target to which it links is not included the behavior is
unspecified.

::

 export(PACKAGE <name>)

Store the current build directory in the CMake user package registry
for package ``<name>``.  The find_package command may consider the
directory while searching for package ``<name>``.  This helps dependent
projects find and use a package from the current project's build tree
without help from the user.  Note that the entry in the package
registry that this command creates works only in conjunction with a
package configuration file (``<name>Config.cmake``) that works with the
build tree. In some cases, for example for packaging and for system
wide installations, it is not desirable to write the user package
registry. If the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable
is enabled, the ``export(PACKAGE)`` command will do nothing.

file
----

File manipulation command.

------------------------------------------------------------------------------

::

 file(WRITE <filename> <content>...)
 file(APPEND <filename> <content>...)

Write ``<content>`` into a file called ``<filename>``.  If the file does
not exist, it will be created.  If the file already exists, ``WRITE``
mode will overwrite it and ``APPEND`` mode will append to the end.
(If the file is a build input, use the ``configure_file()`` command
to update the file only when its content changes.)

------------------------------------------------------------------------------

::

 file(READ <filename> <variable>
      [OFFSET <offset>] [LIMIT <max-in>] [HEX])

Read content from a file called ``<filename>`` and store it in a
``<variable>``.  Optionally start from the given ``<offset>`` and
read at most ``<max-in>`` bytes.  The ``HEX`` option causes data to
be converted to a hexadecimal representation (useful for binary data).

------------------------------------------------------------------------------

::

 file(STRINGS <filename> <variable> [<options>...])

Parse a list of ASCII strings from ``<filename>`` and store it in
``<variable>``.  Binary data in the file are ignored.  Carriage return
(``\r``, CR) characters are ignored.  The options are:

``LENGTH_MAXIMUM <max-len>``
 Consider only strings of at most a given length.

``LENGTH_MINIMUM <min-len>``
 Consider only strings of at least a given length.

``LIMIT_COUNT <max-num>``
 Limit the number of distinct strings to be extracted.

``LIMIT_INPUT <max-in>``
 Limit the number of input bytes to read from the file.

``LIMIT_OUTPUT <max-out>``
 Limit the number of total bytes to store in the ``<variable>``.

``NEWLINE_CONSUME``
 Treat newline characters (``\n``, LF) as part of string content
 instead of terminating at them.

``NO_HEX_CONVERSION``
 Intel Hex and Motorola S-record files are automatically converted to
 binary while reading unless this option is given.

``REGEX <regex>``
 Consider only strings that match the given regular expression.

``ENCODING <encoding-type>``
 Consider strings of a given encoding.  Currently supported encodings are:
 UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE.  If the ENCODING option
 is not provided and the file has a Byte Order Mark, the ENCODING option
 will be defaulted to respect the Byte Order Mark.

For example, the code

 file(STRINGS myfile.txt myfile)

stores a list in the variable ``myfile`` in which each item is a line
from the input file.

------------------------------------------------------------------------------

::

 file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> <filename> <variable>)

Compute a cryptographic hash of the content of ``<filename>`` and
store it in a ``<variable>``.

------------------------------------------------------------------------------

::

 file(GLOB <variable>
      [LIST_DIRECTORIES true|false] [RELATIVE <path>]
      [<globbing-expressions>...])
 file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS]
      [LIST_DIRECTORIES true|false] [RELATIVE <path>]
      [<globbing-expressions>...])

Generate a list of files that match the ``<globbing-expressions>`` and
store it into the ``<variable>``.  Globbing expressions are similar to
regular expressions, but much simpler.  If ``RELATIVE`` flag is
specified, the results will be returned as relative paths to the given
path.  No specific order of results is defined other than that it is
deterministic.  If order is important then sort the list explicitly
(e.g. using the ``list(SORT)`` command).

By default ``GLOB`` lists directories - directories are omited in result if
``LIST_DIRECTORIES`` is set to false.

.. note::
  We do not recommend using GLOB to collect a list of source files from
  your source tree.  If no CMakeLists.txt file changes when a source is
  added or removed then the generated build system cannot know when to
  ask CMake to regenerate.

Examples of globbing expressions include::

 *.cxx      - match all files with extension cxx
 *.vt?      - match all files with extension vta,...,vtz
 f[3-5].txt - match files f3.txt, f4.txt, f5.txt

The ``GLOB_RECURSE`` mode will traverse all the subdirectories of the
matched directory and match the files.  Subdirectories that are symlinks
are only traversed if ``FOLLOW_SYMLINKS`` is given or policy
``CMP0009`` is not set to ``NEW``.

By default ``GLOB_RECURSE`` omits directories from result list - setting
``LIST_DIRECTORIES`` to true adds directories to result list.
If ``FOLLOW_SYMLINKS`` is given or policy ``CMP0009`` is not set to
``OLD`` then ``LIST_DIRECTORIES`` treats symlinks as directories.

Examples of recursive globbing include::

 /dir/*.py  - match all python files in /dir and subdirectories

------------------------------------------------------------------------------

::

 file(RENAME <oldname> <newname>)

Move a file or directory within a filesystem from ``<oldname>`` to
``<newname>``, replacing the destination atomically.

------------------------------------------------------------------------------

::

 file(REMOVE [<files>...])
 file(REMOVE_RECURSE [<files>...])

Remove the given files.  The ``REMOVE_RECURSE`` mode will remove the given
files and directories, also non-empty directories

------------------------------------------------------------------------------

::

 file(MAKE_DIRECTORY [<directories>...])

Create the given directories and their parents as needed.

------------------------------------------------------------------------------

::

 file(RELATIVE_PATH <variable> <directory> <file>)

Compute the relative path from a ``<directory>`` to a ``<file>`` and
store it in the ``<variable>``.

------------------------------------------------------------------------------

::

 file(TO_CMAKE_PATH "<path>" <variable>)
 file(TO_NATIVE_PATH "<path>" <variable>)

The ``TO_CMAKE_PATH`` mode converts a native ``<path>`` into a cmake-style
path with forward-slashes (``/``).  The input can be a single path or a
system search path like ``$ENV{PATH}``.  A search path will be converted
to a cmake-style list separated by ``;`` characters.

The ``TO_NATIVE_PATH`` mode converts a cmake-style ``<path>`` into a native
path with platform-specific slashes (``\`` on Windows and ``/`` elsewhere).

Always use double quotes around the ``<path>`` to be sure it is treated
as a single argument to this command.

------------------------------------------------------------------------------

::

 file(DOWNLOAD <url> <file> [<options>...])
 file(UPLOAD   <file> <url> [<options>...])

The ``DOWNLOAD`` mode downloads the given ``<url>`` to a local ``<file>``.
The ``UPLOAD`` mode uploads a local ``<file>`` to a given ``<url>``.

Options to both ``DOWNLOAD`` and ``UPLOAD`` are:

``INACTIVITY_TIMEOUT <seconds>``
  Terminate the operation after a period of inactivity.

``LOG <variable>``
  Store a human-readable log of the operation in a variable.

``SHOW_PROGRESS``
  Print progress information as status messages until the operation is
  complete.

``STATUS <variable>``
  Store the resulting status of the operation in a variable.
  The status is a ``;`` separated list of length 2.
  The first element is the numeric return value for the operation,
  and the second element is a string value for the error.
  A ``0`` numeric error means no error in the operation.

``TIMEOUT <seconds>``
  Terminate the operation after a given total time has elapsed.

Additional options to ``DOWNLOAD`` are:

``EXPECTED_HASH ALGO=<value>``

  Verify that the downloaded content hash matches the expected value, where
  ``ALGO`` is one of ``MD5``, ``SHA1``, ``SHA224``, ``SHA256``, ``SHA384``, or
  ``SHA512``.  If it does not match, the operation fails with an error.

``EXPECTED_MD5 <value>``
  Historical short-hand for ``EXPECTED_HASH MD5=<value>``.

``TLS_VERIFY <ON|OFF>``
  Specify whether to verify the server certificate for ``https://`` URLs.
  The default is to *not* verify.

``TLS_CAINFO <file>``
  Specify a custom Certificate Authority file for ``https://`` URLs.

For ``https://`` URLs CMake must be built with OpenSSL support.  ``TLS/SSL``
certificates are not checked by default.  Set ``TLS_VERIFY`` to ``ON`` to
check certificates and/or use ``EXPECTED_HASH`` to verify downloaded content.
If neither ``TLS`` option is given CMake will check variables
``CMAKE_TLS_VERIFY`` and ``CMAKE_TLS_CAINFO``, respectively.

------------------------------------------------------------------------------

::

 file(TIMESTAMP <filename> <variable> [<format>] [UTC])

Compute a string representation of the modification time of ``<filename>``
and store it in ``<variable>``.  Should the command be unable to obtain a
timestamp variable will be set to the empty string ("").

See the ``string(TIMESTAMP)`` command for documentation of
the ``<format>`` and ``UTC`` options.

------------------------------------------------------------------------------

::

 file(GENERATE OUTPUT output-file
      <INPUT input-file|CONTENT content>
      [CONDITION expression])

Generate an output file for each build configuration supported by the current
``CMake Generator``.  Evaluate
``generator expressions``
from the input content to produce the output content.  The options are:

``CONDITION <condition>``
  Generate the output file for a particular configuration only if
  the condition is true.  The condition must be either ``0`` or ``1``
  after evaluating generator expressions.

``CONTENT <content>``
  Use the content given explicitly as input.

``INPUT <input-file>``
  Use the content from a given file as input.

``OUTPUT <output-file>``
  Specify the output file name to generate.  Use generator expressions
  such as ``$<CONFIG>`` to specify a configuration-specific output file
  name.  Multiple configurations may generate the same output file only
  if the generated content is identical.  Otherwise, the ``<output-file>``
  must evaluate to an unique name for each configuration.

Exactly one ``CONTENT`` or ``INPUT`` option must be given.  A specific
``OUTPUT`` file may be named by at most one invocation of ``file(GENERATE)``.
Generated files are modified on subsequent cmake runs only if their content
is changed.

------------------------------------------------------------------------------

::

 file(<COPY|INSTALL> <files>... DESTINATION <dir>
      [FILE_PERMISSIONS <permissions>...]
      [DIRECTORY_PERMISSIONS <permissions>...]
      [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]
      [FILES_MATCHING]
      [[PATTERN <pattern> | REGEX <regex>]
       [EXCLUDE] [PERMISSIONS <permissions>...]] [...])

The ``COPY`` signature copies files, directories, and symlinks to a
destination folder.  Relative input paths are evaluated with respect
to the current source directory, and a relative destination is
evaluated with respect to the current build directory.  Copying
preserves input file timestamps, and optimizes out a file if it exists
at the destination with the same timestamp.  Copying preserves input
permissions unless explicit permissions or ``NO_SOURCE_PERMISSIONS``
are given (default is ``USE_SOURCE_PERMISSIONS``).

See the ``install(DIRECTORY)`` command for documentation of
permissions, ``FILES_MATCHING``, ``PATTERN``, ``REGEX``, and
``EXCLUDE`` options.  Copying directories preserves the structure
of their content even if options are used to select a subset of
files.

The ``INSTALL`` signature differs slightly from ``COPY``: it prints
status messages (subject to the ``CMAKE_INSTALL_MESSAGE`` variable),
and ``NO_SOURCE_PERMISSIONS`` is default.
Installation scripts generated by the ``install()`` command
use this signature (with some undocumented options for internal use).

------------------------------------------------------------------------------

::

 file(LOCK <path> [DIRECTORY] [RELEASE]
      [GUARD <FUNCTION|FILE|PROCESS>]
      [RESULT_VARIABLE <variable>]
      [TIMEOUT <seconds>])

Lock a file specified by ``<path>`` if no ``DIRECTORY`` option present and file
``<path>/cmake.lock`` otherwise. File will be locked for scope defined by
``GUARD`` option (default value is ``PROCESS``). ``RELEASE`` option can be used
to unlock file explicitly. If option ``TIMEOUT`` is not specified CMake will
wait until lock succeed or until fatal error occurs. If ``TIMEOUT`` is set to
``0`` lock will be tried once and result will be reported immediately. If
``TIMEOUT`` is not ``0`` CMake will try to lock file for the period specified
by ``<seconds>`` value. Any errors will be interpreted as fatal if there is no
``RESULT_VARIABLE`` option. Otherwise result will be stored in ``<variable>``
and will be ``0`` on success or error message on failure.

Note that lock is advisory - there is no guarantee that other processes will
respect this lock, i.e. lock synchronize two or more CMake instances sharing
some modifiable resources. Similar logic applied to ``DIRECTORY`` option -
locking parent directory doesn't prevent other ``LOCK`` commands to lock any
child directory or file.

Trying to lock file twice is not allowed.  Any intermediate directories and
file itself will be created if they not exist.  ``GUARD`` and ``TIMEOUT``
options ignored on ``RELEASE`` operation.

find_file
---------

A short-hand signature is:

 find_file (<VAR> name1 [path1 path2 ...])

The general signature is:

 find_file (
           <VAR>
           name | NAMES name1 [name2 ...]
           [HINTS path1 [path2 ... ENV var]]
           [PATHS path1 [path2 ... ENV var]]
           [PATH_SUFFIXES suffix1 [suffix2 ...]]
           [DOC "cache documentation string"]
           [NO_DEFAULT_PATH]
           [NO_CMAKE_ENVIRONMENT_PATH]
           [NO_CMAKE_PATH]
           [NO_SYSTEM_ENVIRONMENT_PATH]
           [NO_CMAKE_SYSTEM_PATH]
           [CMAKE_FIND_ROOT_PATH_BOTH |
            ONLY_CMAKE_FIND_ROOT_PATH |
            NO_CMAKE_FIND_ROOT_PATH]
          )

This command is used to find a full path to named file.
A cache entry named by ``<VAR>`` is created to store the result
of this command.
If the full path to a file is found the result is stored in the variable
and the search will not be repeated unless the variable is cleared.
If nothing is found, the result will be
``<VAR>-NOTFOUND``, and the search will be attempted again the
next time find_file is invoked with the same variable.

Options include:

``NAMES``
  Specify one or more possible names for the full path to a file.

  When using this to specify names with and without a version
  suffix, we recommend specifying the unversioned name first
  so that locally-built packages can be found before those
  provided by distributions.

``HINTS``, ``PATHS``
  Specify directories to search in addition to the default locations.
  The ``ENV var`` sub-option reads paths from a system environment
  variable.

``PATH_SUFFIXES``
  Specify additional subdirectories to check below each directory
  location otherwise considered.

``DOC``
  Specify the documentation string for the ``<VAR>`` cache entry.

If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
added to the search.
If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:

1. Search paths specified in cmake-specific cache variables.
   These are intended to be used on the command line with a ``-DVAR=value``.
   This can be skipped if ``NO_CMAKE_PATH`` is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_INCLUDE_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

2. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration.
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_INCLUDE_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

3. Search the paths specified by the ``HINTS`` option.
   These should be paths computed by system introspection, such as a
   hint provided by the location of another item already found.
   Hard-coded guesses should be specified with the ``PATHS`` option.

4. Search the standard system environment variables.
   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.

   * Directories in ``INCLUDE``. On Windows hosts: ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/include`` for other entries in ``PATH``, and the directories in ``PATH`` itself.

5. Search cmake variables defined in the Platform files
   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``
   is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``
   * ``CMAKE_SYSTEM_INCLUDE_PATH``
   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``

6. Search the paths specified by the PATHS option
   or in the short-hand version of the command.
   These are typically hard-coded guesses.

On OS X the ``CMAKE_FIND_FRAMEWORK`` and
``CMAKE_FIND_APPBUNDLE`` variables determine the order of
preference between Apple-style and unix-style package components.

The CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more
directories to be prepended to all other search directories.  This
effectively "re-roots" the entire search under given locations.
Paths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded
from this re-rooting, because that variable is always a path on the host system.
By default the ``CMAKE_FIND_ROOT_PATH`` is empty.

The ``CMAKE_SYSROOT`` variable can also be used to specify exactly one
directory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other
effects.  See the documentation for that variable for more.

These variables are especially useful when cross-compiling to
point to the root directory of the target environment and CMake will
search there too.  By default at first the directories listed in
``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``
directory is searched, and then the non-rooted directories will be
searched.  The default behavior can be adjusted by setting
``CMAKE_FIND_ROOT_PATH_MODE_INCLUDE``.  This behavior can be manually
overridden on a per-call basis using options:

``CMAKE_FIND_ROOT_PATH_BOTH``
  Search in the order described above.

``NO_CMAKE_FIND_ROOT_PATH``
  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.

``ONLY_CMAKE_FIND_ROOT_PATH``
  Search only the re-rooted directories and directories below
  ``CMAKE_STAGING_PREFIX``.

The default search order is designed to be most-specific to
least-specific for common use cases.
Projects may override the order by simply calling the command
multiple times and using the ``NO_*`` options:

 find_file (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
 find_file (<VAR> NAMES name)

Once one of the calls succeeds the result variable will be set
and stored in the cache so that no call will search again.

find_library
------------

A short-hand signature is:

 find_library (<VAR> name1 [path1 path2 ...])

The general signature is:

 find_library (
           <VAR>
           name | NAMES name1 [name2 ...] [NAMES_PER_DIR]
           [HINTS path1 [path2 ... ENV var]]
           [PATHS path1 [path2 ... ENV var]]
           [PATH_SUFFIXES suffix1 [suffix2 ...]]
           [DOC "cache documentation string"]
           [NO_DEFAULT_PATH]
           [NO_CMAKE_ENVIRONMENT_PATH]
           [NO_CMAKE_PATH]
           [NO_SYSTEM_ENVIRONMENT_PATH]
           [NO_CMAKE_SYSTEM_PATH]
           [CMAKE_FIND_ROOT_PATH_BOTH |
            ONLY_CMAKE_FIND_ROOT_PATH |
            NO_CMAKE_FIND_ROOT_PATH]
          )

This command is used to find a library.
A cache entry named by ``<VAR>`` is created to store the result
of this command.
If the library is found the result is stored in the variable
and the search will not be repeated unless the variable is cleared.
If nothing is found, the result will be
``<VAR>-NOTFOUND``, and the search will be attempted again the
next time find_library is invoked with the same variable.

Options include:

``NAMES``
  Specify one or more possible names for the library.

  When using this to specify names with and without a version
  suffix, we recommend specifying the unversioned name first
  so that locally-built packages can be found before those
  provided by distributions.

``HINTS``, ``PATHS``
  Specify directories to search in addition to the default locations.
  The ``ENV var`` sub-option reads paths from a system environment
  variable.

``PATH_SUFFIXES``
  Specify additional subdirectories to check below each directory
  location otherwise considered.

``DOC``
  Specify the documentation string for the ``<VAR>`` cache entry.

If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
added to the search.
If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:

1. Search paths specified in cmake-specific cache variables.
   These are intended to be used on the command line with a ``-DVAR=value``.
   This can be skipped if ``NO_CMAKE_PATH`` is passed.

   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_LIBRARY_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

2. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration.
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.

   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_LIBRARY_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

3. Search the paths specified by the ``HINTS`` option.
   These should be paths computed by system introspection, such as a
   hint provided by the location of another item already found.
   Hard-coded guesses should be specified with the ``PATHS`` option.

4. Search the standard system environment variables.
   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.

   * Directories in ``LIB``. On Windows hosts: ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/lib`` for other entries in ``PATH``, and the directories in ``PATH`` itself.

5. Search cmake variables defined in the Platform files
   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``
   is passed.

   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``
   * ``CMAKE_SYSTEM_LIBRARY_PATH``
   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``

6. Search the paths specified by the PATHS option
   or in the short-hand version of the command.
   These are typically hard-coded guesses.

On OS X the ``CMAKE_FIND_FRAMEWORK`` and
``CMAKE_FIND_APPBUNDLE`` variables determine the order of
preference between Apple-style and unix-style package components.

The CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more
directories to be prepended to all other search directories.  This
effectively "re-roots" the entire search under given locations.
Paths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded
from this re-rooting, because that variable is always a path on the host system.
By default the ``CMAKE_FIND_ROOT_PATH`` is empty.

The ``CMAKE_SYSROOT`` variable can also be used to specify exactly one
directory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other
effects.  See the documentation for that variable for more.

These variables are especially useful when cross-compiling to
point to the root directory of the target environment and CMake will
search there too.  By default at first the directories listed in
``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``
directory is searched, and then the non-rooted directories will be
searched.  The default behavior can be adjusted by setting
``CMAKE_FIND_ROOT_PATH_MODE_LIBRARY``.  This behavior can be manually
overridden on a per-call basis using options:

``CMAKE_FIND_ROOT_PATH_BOTH``
  Search in the order described above.

``NO_CMAKE_FIND_ROOT_PATH``
  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.

``ONLY_CMAKE_FIND_ROOT_PATH``
  Search only the re-rooted directories and directories below
  ``CMAKE_STAGING_PREFIX``.

The default search order is designed to be most-specific to
least-specific for common use cases.
Projects may override the order by simply calling the command
multiple times and using the ``NO_*`` options:

 find_library (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
 find_library (<VAR> NAMES name)

Once one of the calls succeeds the result variable will be set
and stored in the cache so that no call will search again.

When more than one value is given to the ``NAMES`` option this command by
default will consider one name at a time and search every directory
for it.  The ``NAMES_PER_DIR`` option tells this command to consider one
directory at a time and search for all names in it.

Each library name given to the ``NAMES`` option is first considered
as a library file name and then considered with platform-specific
prefixes (e.g. ``lib``) and suffixes (e.g. ``.so``).  Therefore one
may specify library file names such as ``libfoo.a`` directly.
This can be used to locate static libraries on UNIX-like systems.

If the library found is a framework, then ``<VAR>`` will be set to the full
path to the framework ``<fullPath>/A.framework``.  When a full path to a
framework is used as a library, CMake will use a ``-framework A``, and a
``-F<fullPath>`` to link the framework to the target.

If the ``FIND_LIBRARY_USE_LIB64_PATHS`` global property is set
all search paths will be tested as normal, with ``64/`` appended, and
with all matches of ``lib/`` replaced with ``lib64/``.  This property is
automatically set for the platforms that are known to need it if at
least one of the languages supported by the ``project()`` command
is enabled.

find_package
------------

Load settings for an external project.

::

 find_package(<package> [version] [EXACT] [QUIET] [MODULE]
              [REQUIRED] [[COMPONENTS] [components...]]
              [OPTIONAL_COMPONENTS components...]
              [NO_POLICY_SCOPE])

Finds and loads settings from an external project.  ``<package>_FOUND``
will be set to indicate whether the package was found.  When the
package is found package-specific information is provided through
variables and :ref:`Imported Targets` documented by the package itself.  The
``QUIET`` option disables messages if the package cannot be found.  The
``MODULE`` option disables the second signature documented below.  The
``REQUIRED`` option stops processing with an error message if the package
cannot be found.

A package-specific list of required components may be listed after the
``COMPONENTS`` option (or after the ``REQUIRED`` option if present).
Additional optional components may be listed after
``OPTIONAL_COMPONENTS``.  Available components and their influence on
whether a package is considered to be found are defined by the target
package.

The ``[version]`` argument requests a version with which the package found
should be compatible (format is ``major[.minor[.patch[.tweak]]]``).  The
``EXACT`` option requests that the version be matched exactly.  If no
``[version]`` and/or component list is given to a recursive invocation
inside a find-module, the corresponding arguments are forwarded
automatically from the outer call (including the ``EXACT`` flag for
``[version]``).  Version support is currently provided only on a
package-by-package basis (details below).

User code should generally look for packages using the above simple
signature.  The remainder of this command documentation specifies the
full command signature and details of the search process.  Project
maintainers wishing to provide a package to be found by this command
are encouraged to read on.

The command has two modes by which it searches for packages: "Module"
mode and "Config" mode.  Module mode is available when the command is
invoked with the above reduced signature.  CMake searches for a file
called ``Find<package>.cmake`` in the ``CMAKE_MODULE_PATH``
followed by the CMake installation.  If the file is found, it is read
and processed by CMake.  It is responsible for finding the package,
checking the version, and producing any needed messages.  Many
find-modules provide limited or no support for versioning; check
the module documentation.  If no module is found and the ``MODULE``
option is not given the command proceeds to Config mode.

The complete Config mode command signature is::

 find_package(<package> [version] [EXACT] [QUIET]
              [REQUIRED] [[COMPONENTS] [components...]]
              [CONFIG|NO_MODULE]
              [NO_POLICY_SCOPE]
              [NAMES name1 [name2 ...]]
              [CONFIGS config1 [config2 ...]]
              [HINTS path1 [path2 ... ]]
              [PATHS path1 [path2 ... ]]
              [PATH_SUFFIXES suffix1 [suffix2 ...]]
              [NO_DEFAULT_PATH]
              [NO_CMAKE_ENVIRONMENT_PATH]
              [NO_CMAKE_PATH]
              [NO_SYSTEM_ENVIRONMENT_PATH]
              [NO_CMAKE_PACKAGE_REGISTRY]
              [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing.
              [NO_CMAKE_SYSTEM_PATH]
              [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]
              [CMAKE_FIND_ROOT_PATH_BOTH |
               ONLY_CMAKE_FIND_ROOT_PATH |
               NO_CMAKE_FIND_ROOT_PATH])

The ``CONFIG`` option may be used to skip Module mode explicitly and
switch to Config mode.  It is synonymous to using ``NO_MODULE``.  Config
mode is also implied by use of options not specified in the reduced
signature.

Config mode attempts to locate a configuration file provided by the
package to be found.  A cache entry called ``<package>_DIR`` is created to
hold the directory containing the file.  By default the command
searches for a package with the name ``<package>``.  If the ``NAMES`` option
is given the names following it are used instead of ``<package>``.  The
command searches for a file called ``<name>Config.cmake`` or
``<lower-case-name>-config.cmake`` for each name specified.  A
replacement set of possible configuration file names may be given
using the ``CONFIGS`` option.  The search procedure is specified below.
Once found, the configuration file is read and processed by CMake.
Since the file is provided by the package it already knows the
location of package contents.  The full path to the configuration file
is stored in the cmake variable ``<package>_CONFIG``.

All configuration files which have been considered by CMake while
searching for an installation of the package with an appropriate
version are stored in the cmake variable ``<package>_CONSIDERED_CONFIGS``,
the associated versions in ``<package>_CONSIDERED_VERSIONS``.

If the package configuration file cannot be found CMake will generate
an error describing the problem unless the ``QUIET`` argument is
specified.  If ``REQUIRED`` is specified and the package is not found a
fatal error is generated and the configure step stops executing.  If
``<package>_DIR`` has been set to a directory not containing a
configuration file CMake will ignore it and search from scratch.

When the ``[version]`` argument is given Config mode will only find a
version of the package that claims compatibility with the requested
version (format is ``major[.minor[.patch[.tweak]]]``).  If the ``EXACT``
option is given only a version of the package claiming an exact match
of the requested version may be found.  CMake does not establish any
convention for the meaning of version numbers.  Package version
numbers are checked by "version" files provided by the packages
themselves.  For a candidate package configuration file
``<config-file>.cmake`` the corresponding version file is located next
to it and named either ``<config-file>-version.cmake`` or
``<config-file>Version.cmake``.  If no such version file is available
then the configuration file is assumed to not be compatible with any
requested version.  A basic version file containing generic version
matching code can be created using the
``CMakePackageConfigHelpers`` module.  When a version file
is found it is loaded to check the requested version number.  The
version file is loaded in a nested scope in which the following
variables have been defined:

``PACKAGE_FIND_NAME``
  the ``<package>`` name
``PACKAGE_FIND_VERSION``
  full requested version string
``PACKAGE_FIND_VERSION_MAJOR``
  major version if requested, else 0
``PACKAGE_FIND_VERSION_MINOR``
  minor version if requested, else 0
``PACKAGE_FIND_VERSION_PATCH``
  patch version if requested, else 0
``PACKAGE_FIND_VERSION_TWEAK``
  tweak version if requested, else 0
``PACKAGE_FIND_VERSION_COUNT``
  number of version components, 0 to 4

The version file checks whether it satisfies the requested version and
sets these variables:

``PACKAGE_VERSION``
  full provided version string
``PACKAGE_VERSION_EXACT``
  true if version is exact match
``PACKAGE_VERSION_COMPATIBLE``
  true if version is compatible
``PACKAGE_VERSION_UNSUITABLE``
  true if unsuitable as any version

These variables are checked by the ``find_package`` command to determine
whether the configuration file provides an acceptable version.  They
are not available after the find_package call returns.  If the version
is acceptable the following variables are set:

``<package>_VERSION``
  full provided version string
``<package>_VERSION_MAJOR``
  major version if provided, else 0
``<package>_VERSION_MINOR``
  minor version if provided, else 0
``<package>_VERSION_PATCH``
  patch version if provided, else 0
``<package>_VERSION_TWEAK``
  tweak version if provided, else 0
``<package>_VERSION_COUNT``
  number of version components, 0 to 4

and the corresponding package configuration file is loaded.  When
multiple package configuration files are available whose version files
claim compatibility with the version requested it is unspecified which
one is chosen.  No attempt is made to choose a highest or closest
version number.

Config mode provides an elaborate interface and search procedure.
Much of the interface is provided for completeness and for use
internally by find-modules loaded by Module mode.  Most user code
should simply call::

 find_package(<package> [major[.minor]] [EXACT] [REQUIRED|QUIET])

in order to find a package.  Package maintainers providing CMake
package configuration files are encouraged to name and install them
such that the procedure outlined below will find them without
requiring use of additional options.

CMake constructs a set of possible installation prefixes for the
package.  Under each prefix several directories are searched for a
configuration file.  The tables below show the directories searched.
Each entry is meant for installation trees following Windows (W), UNIX
(U), or Apple (A) conventions::

 <prefix>/                                               (W)
 <prefix>/(cmake|CMake)/                                 (W)
 <prefix>/<name>*/                                       (W)
 <prefix>/<name>*/(cmake|CMake)/                         (W)
 <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/          (U)
 <prefix>/(lib/<arch>|lib|share)/<name>*/                (U)
 <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/  (U)

On systems supporting OS X Frameworks and Application Bundles the
following directories are searched for frameworks or bundles
containing a configuration file::

 <prefix>/<name>.framework/Resources/                    (A)
 <prefix>/<name>.framework/Resources/CMake/              (A)
 <prefix>/<name>.framework/Versions/*/Resources/         (A)
 <prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)
 <prefix>/<name>.app/Contents/Resources/                 (A)
 <prefix>/<name>.app/Contents/Resources/CMake/           (A)

In all cases the ``<name>`` is treated as case-insensitive and corresponds
to any of the names specified (``<package>`` or names given by ``NAMES``).
Paths with ``lib/<arch>`` are enabled if the
``CMAKE_LIBRARY_ARCHITECTURE`` variable is set.  If ``PATH_SUFFIXES``
is specified the suffixes are appended to each (W) or (U) directory entry
one-by-one.

This set of directories is intended to work in cooperation with
projects that provide configuration files in their installation trees.
Directories above marked with (W) are intended for installations on
Windows where the prefix may point at the top of an application's
installation directory.  Those marked with (U) are intended for
installations on UNIX platforms where the prefix is shared by multiple
packages.  This is merely a convention, so all (W) and (U) directories
are still searched on all platforms.  Directories marked with (A) are
intended for installations on Apple platforms.  The
``CMAKE_FIND_FRAMEWORK`` and ``CMAKE_FIND_APPBUNDLE``
variables determine the order of preference.

The set of installation prefixes is constructed using the following
steps.  If ``NO_DEFAULT_PATH`` is specified all ``NO_*`` options are
enabled.

1. Search paths specified in cmake-specific cache variables.  These
   are intended to be used on the command line with a ``-DVAR=value``.
   This can be skipped if ``NO_CMAKE_PATH`` is passed::

 CMAKE_PREFIX_PATH
 CMAKE_FRAMEWORK_PATH
 CMAKE_APPBUNDLE_PATH

2. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration.
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed::

 <package>_DIR
 CMAKE_PREFIX_PATH
 CMAKE_FRAMEWORK_PATH
 CMAKE_APPBUNDLE_PATH

3. Search paths specified by the ``HINTS`` option.  These should be paths
   computed by system introspection, such as a hint provided by the
   location of another item already found.  Hard-coded guesses should
   be specified with the ``PATHS`` option.

4. Search the standard system environment variables.  This can be
   skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed.  Path entries
   ending in ``/bin`` or ``/sbin`` are automatically converted to their
   parent directories::

 PATH

5. Search paths stored in the CMake :ref:`User Package Registry`.
   This can be skipped if ``NO_CMAKE_PACKAGE_REGISTRY`` is passed or by
   setting the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``
   to ``TRUE``.
   See the ``cmake-packages(7)`` manual for details on the user
   package registry.

6. Search cmake variables defined in the Platform files for the
   current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is
   passed::

 CMAKE_SYSTEM_PREFIX_PATH
 CMAKE_SYSTEM_FRAMEWORK_PATH
 CMAKE_SYSTEM_APPBUNDLE_PATH

7. Search paths stored in the CMake :ref:`System Package Registry`.
   This can be skipped if ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` is passed
   or by setting the
   ``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` to ``TRUE``.
   See the ``cmake-packages(7)`` manual for details on the system
   package registry.

8. Search paths specified by the ``PATHS`` option.  These are typically
   hard-coded guesses.

The CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more
directories to be prepended to all other search directories.  This
effectively "re-roots" the entire search under given locations.
Paths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded
from this re-rooting, because that variable is always a path on the host system.
By default the ``CMAKE_FIND_ROOT_PATH`` is empty.

The ``CMAKE_SYSROOT`` variable can also be used to specify exactly one
directory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other
effects.  See the documentation for that variable for more.

These variables are especially useful when cross-compiling to
point to the root directory of the target environment and CMake will
search there too.  By default at first the directories listed in
``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``
directory is searched, and then the non-rooted directories will be
searched.  The default behavior can be adjusted by setting
``CMAKE_FIND_ROOT_PATH_MODE_PACKAGE``.  This behavior can be manually
overridden on a per-call basis using options:

``CMAKE_FIND_ROOT_PATH_BOTH``
  Search in the order described above.

``NO_CMAKE_FIND_ROOT_PATH``
  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.

``ONLY_CMAKE_FIND_ROOT_PATH``
  Search only the re-rooted directories and directories below
  ``CMAKE_STAGING_PREFIX``.

The default search order is designed to be most-specific to
least-specific for common use cases.
Projects may override the order by simply calling the command
multiple times and using the ``NO_*`` options:

 find_package (<package> PATHS paths... NO_DEFAULT_PATH)
 find_package (<package>)

Once one of the calls succeeds the result variable will be set
and stored in the cache so that no call will search again.

Every non-REQUIRED ``find_package`` call can be disabled by setting the
``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` variable to ``TRUE``.

When loading a find module or package configuration file ``find_package``
defines variables to provide information about the call arguments (and
restores their original state before returning):

``CMAKE_FIND_PACKAGE_NAME``
  the ``<package>`` name which is searched for
``<package>_FIND_REQUIRED``
  true if ``REQUIRED`` option was given
``<package>_FIND_QUIETLY``
  true if ``QUIET`` option was given
``<package>_FIND_VERSION``
  full requested version string
``<package>_FIND_VERSION_MAJOR``
  major version if requested, else 0
``<package>_FIND_VERSION_MINOR``
  minor version if requested, else 0
``<package>_FIND_VERSION_PATCH``
  patch version if requested, else 0
``<package>_FIND_VERSION_TWEAK``
  tweak version if requested, else 0
``<package>_FIND_VERSION_COUNT``
  number of version components, 0 to 4
``<package>_FIND_VERSION_EXACT``
  true if ``EXACT`` option was given
``<package>_FIND_COMPONENTS``
  list of requested components
``<package>_FIND_REQUIRED_<c>``
  true if component ``<c>`` is required,
  false if component ``<c>`` is optional

In Module mode the loaded find module is responsible to honor the
request detailed by these variables; see the find module for details.
In Config mode ``find_package`` handles ``REQUIRED``, ``QUIET``, and
``[version]`` options automatically but leaves it to the package
configuration file to handle components in a way that makes sense
for the package.  The package configuration file may set
``<package>_FOUND`` to false to tell ``find_package`` that component
requirements are not satisfied.

See the ``cmake_policy()`` command documentation for discussion
of the ``NO_POLICY_SCOPE`` option.

find_path
---------

A short-hand signature is:

 find_path (<VAR> name1 [path1 path2 ...])

The general signature is:

 find_path (
           <VAR>
           name | NAMES name1 [name2 ...]
           [HINTS path1 [path2 ... ENV var]]
           [PATHS path1 [path2 ... ENV var]]
           [PATH_SUFFIXES suffix1 [suffix2 ...]]
           [DOC "cache documentation string"]
           [NO_DEFAULT_PATH]
           [NO_CMAKE_ENVIRONMENT_PATH]
           [NO_CMAKE_PATH]
           [NO_SYSTEM_ENVIRONMENT_PATH]
           [NO_CMAKE_SYSTEM_PATH]
           [CMAKE_FIND_ROOT_PATH_BOTH |
            ONLY_CMAKE_FIND_ROOT_PATH |
            NO_CMAKE_FIND_ROOT_PATH]
          )

This command is used to find a directory containing the named file.
A cache entry named by ``<VAR>`` is created to store the result
of this command.
If the file in a directory is found the result is stored in the variable
and the search will not be repeated unless the variable is cleared.
If nothing is found, the result will be
``<VAR>-NOTFOUND``, and the search will be attempted again the
next time find_path is invoked with the same variable.

Options include:

``NAMES``
  Specify one or more possible names for the file in a directory.

  When using this to specify names with and without a version
  suffix, we recommend specifying the unversioned name first
  so that locally-built packages can be found before those
  provided by distributions.

``HINTS``, ``PATHS``
  Specify directories to search in addition to the default locations.
  The ``ENV var`` sub-option reads paths from a system environment
  variable.

``PATH_SUFFIXES``
  Specify additional subdirectories to check below each directory
  location otherwise considered.

``DOC``
  Specify the documentation string for the ``<VAR>`` cache entry.

If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
added to the search.
If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:

1. Search paths specified in cmake-specific cache variables.
   These are intended to be used on the command line with a ``-DVAR=value``.
   This can be skipped if ``NO_CMAKE_PATH`` is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_INCLUDE_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

2. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration.
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_INCLUDE_PATH``
   * ``CMAKE_FRAMEWORK_PATH``

3. Search the paths specified by the ``HINTS`` option.
   These should be paths computed by system introspection, such as a
   hint provided by the location of another item already found.
   Hard-coded guesses should be specified with the ``PATHS`` option.

4. Search the standard system environment variables.
   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.

   * Directories in ``INCLUDE``. On Windows hosts: ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/include`` for other entries in ``PATH``, and the directories in ``PATH`` itself.

5. Search cmake variables defined in the Platform files
   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``
   is passed.

   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``
   * ``CMAKE_SYSTEM_INCLUDE_PATH``
   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``

6. Search the paths specified by the PATHS option
   or in the short-hand version of the command.
   These are typically hard-coded guesses.

On OS X the ``CMAKE_FIND_FRAMEWORK`` and
``CMAKE_FIND_APPBUNDLE`` variables determine the order of
preference between Apple-style and unix-style package components.

The CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more
directories to be prepended to all other search directories.  This
effectively "re-roots" the entire search under given locations.
Paths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded
from this re-rooting, because that variable is always a path on the host system.
By default the ``CMAKE_FIND_ROOT_PATH`` is empty.

The ``CMAKE_SYSROOT`` variable can also be used to specify exactly one
directory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other
effects.  See the documentation for that variable for more.

These variables are especially useful when cross-compiling to
point to the root directory of the target environment and CMake will
search there too.  By default at first the directories listed in
``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``
directory is searched, and then the non-rooted directories will be
searched.  The default behavior can be adjusted by setting
``CMAKE_FIND_ROOT_PATH_MODE_INCLUDE``.  This behavior can be manually
overridden on a per-call basis using options:

``CMAKE_FIND_ROOT_PATH_BOTH``
  Search in the order described above.

``NO_CMAKE_FIND_ROOT_PATH``
  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.

``ONLY_CMAKE_FIND_ROOT_PATH``
  Search only the re-rooted directories and directories below
  ``CMAKE_STAGING_PREFIX``.

The default search order is designed to be most-specific to
least-specific for common use cases.
Projects may override the order by simply calling the command
multiple times and using the ``NO_*`` options:

 find_path (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
 find_path (<VAR> NAMES name)

Once one of the calls succeeds the result variable will be set
and stored in the cache so that no call will search again.

When searching for frameworks, if the file is specified as ``A/b.h``, then
the framework search will look for ``A.framework/Headers/b.h``.  If that
is found the path will be set to the path to the framework.  CMake
will convert this to the correct ``-F`` option to include the file.

find_program
------------

A short-hand signature is:

 find_program (<VAR> name1 [path1 path2 ...])

The general signature is:

 find_program (
           <VAR>
           name | NAMES name1 [name2 ...] [NAMES_PER_DIR]
           [HINTS path1 [path2 ... ENV var]]
           [PATHS path1 [path2 ... ENV var]]
           [PATH_SUFFIXES suffix1 [suffix2 ...]]
           [DOC "cache documentation string"]
           [NO_DEFAULT_PATH]
           [NO_CMAKE_ENVIRONMENT_PATH]
           [NO_CMAKE_PATH]
           [NO_SYSTEM_ENVIRONMENT_PATH]
           [NO_CMAKE_SYSTEM_PATH]
           [CMAKE_FIND_ROOT_PATH_BOTH |
            ONLY_CMAKE_FIND_ROOT_PATH |
            NO_CMAKE_FIND_ROOT_PATH]
          )

This command is used to find a program.
A cache entry named by ``<VAR>`` is created to store the result
of this command.
If the program is found the result is stored in the variable
and the search will not be repeated unless the variable is cleared.
If nothing is found, the result will be
``<VAR>-NOTFOUND``, and the search will be attempted again the
next time find_program is invoked with the same variable.

Options include:

``NAMES``
  Specify one or more possible names for the program.

  When using this to specify names with and without a version
  suffix, we recommend specifying the unversioned name first
  so that locally-built packages can be found before those
  provided by distributions.

``HINTS``, ``PATHS``
  Specify directories to search in addition to the default locations.
  The ``ENV var`` sub-option reads paths from a system environment
  variable.

``PATH_SUFFIXES``
  Specify additional subdirectories to check below each directory
  location otherwise considered.

``DOC``
  Specify the documentation string for the ``<VAR>`` cache entry.

If ``NO_DEFAULT_PATH`` is specified, then no additional paths are
added to the search.
If ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:

1. Search paths specified in cmake-specific cache variables.
   These are intended to be used on the command line with a ``-DVAR=value``.
   This can be skipped if ``NO_CMAKE_PATH`` is passed.

   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_PROGRAM_PATH``
   * ``CMAKE_APPBUNDLE_PATH``

2. Search paths specified in cmake-specific environment variables.
   These are intended to be set in the user's shell configuration.
   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.

   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``
   * ``CMAKE_PROGRAM_PATH``
   * ``CMAKE_APPBUNDLE_PATH``

3. Search the paths specified by the ``HINTS`` option.
   These should be paths computed by system introspection, such as a
   hint provided by the location of another item already found.
   Hard-coded guesses should be specified with the ``PATHS`` option.

4. Search the standard system environment variables.
   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.

   * ``PATH``

5. Search cmake variables defined in the Platform files
   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``
   is passed.

   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``
   * ``CMAKE_SYSTEM_PROGRAM_PATH``
   * ``CMAKE_SYSTEM_APPBUNDLE_PATH``

6. Search the paths specified by the PATHS option
   or in the short-hand version of the command.
   These are typically hard-coded guesses.

On OS X the ``CMAKE_FIND_FRAMEWORK`` and
``CMAKE_FIND_APPBUNDLE`` variables determine the order of
preference between Apple-style and unix-style package components.

The CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more
directories to be prepended to all other search directories.  This
effectively "re-roots" the entire search under given locations.
Paths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded
from this re-rooting, because that variable is always a path on the host system.
By default the ``CMAKE_FIND_ROOT_PATH`` is empty.

The ``CMAKE_SYSROOT`` variable can also be used to specify exactly one
directory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other
effects.  See the documentation for that variable for more.

These variables are especially useful when cross-compiling to
point to the root directory of the target environment and CMake will
search there too.  By default at first the directories listed in
``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``
directory is searched, and then the non-rooted directories will be
searched.  The default behavior can be adjusted by setting
``CMAKE_FIND_ROOT_PATH_MODE_PROGRAM``.  This behavior can be manually
overridden on a per-call basis using options:

``CMAKE_FIND_ROOT_PATH_BOTH``
  Search in the order described above.

``NO_CMAKE_FIND_ROOT_PATH``
  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.

``ONLY_CMAKE_FIND_ROOT_PATH``
  Search only the re-rooted directories and directories below
  ``CMAKE_STAGING_PREFIX``.

The default search order is designed to be most-specific to
least-specific for common use cases.
Projects may override the order by simply calling the command
multiple times and using the ``NO_*`` options:

 find_program (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)
 find_program (<VAR> NAMES name)

Once one of the calls succeeds the result variable will be set
and stored in the cache so that no call will search again.

When more than one value is given to the ``NAMES`` option this command by
default will consider one name at a time and search every directory
for it.  The ``NAMES_PER_DIR`` option tells this command to consider one
directory at a time and search for all names in it.

fltk_wrap_ui
------------

Create FLTK user interfaces Wrappers.

::

 fltk_wrap_ui(resultingLibraryName source1
              source2 ... sourceN )

Produce .h and .cxx files for all the .fl and .fld files listed.  The
resulting .h and .cxx files will be added to a variable named
``resultingLibraryName_FLTK_UI_SRCS`` which should be added to your
library.

foreach
-------

Evaluate a group of commands for each value in a list.

::

 foreach(loop_var arg1 arg2 ...)
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 endforeach(loop_var)

All commands between foreach and the matching endforeach are recorded
without being invoked.  Once the endforeach is evaluated, the recorded
list of commands is invoked once for each argument listed in the
original foreach command.  Before each iteration of the loop
``${loop_var}`` will be set as a variable with the current value in the
list.

::

 foreach(loop_var RANGE total)
 foreach(loop_var RANGE start stop [step])

Foreach can also iterate over a generated range of numbers.  There are
three types of this iteration:

* When specifying single number, the range will have elements 0 to
  "total".

* When specifying two numbers, the range will have elements from the
  first number to the second number.

* The third optional number is the increment used to iterate from the
  first number to the second number.

::

 foreach(loop_var IN [LISTS [list1 [...]]]
                     [ITEMS [item1 [...]]])

Iterates over a precise list of items.  The ``LISTS`` option names
list-valued variables to be traversed, including empty elements (an
empty string is a zero-length list).  (Note macro
arguments are not variables.)  The ``ITEMS`` option ends argument
parsing and includes all arguments following it in the iteration.

function
--------

Start recording a function for later invocation as a command::

 function(<name> [arg1 [arg2 [arg3 ...]]])
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 endfunction(<name>)

Define a function named ``<name>`` that takes arguments named ``arg1``,
``arg2``, ``arg3``, (...).
Commands listed after function, but before the matching
``endfunction()``, are not invoked until the function is invoked.
When it is invoked, the commands recorded in the function are first
modified by replacing formal parameters (``${arg1}``) with the arguments
passed, and then invoked as normal commands.
In addition to referencing the formal parameters you can reference the
``ARGC`` variable which will be set to the number of arguments passed
into the function as well as ``ARGV0``, ``ARGV1``, ``ARGV2``, ...  which
will have the actual values of the arguments passed in.
This facilitates creating functions with optional arguments.
Additionally ``ARGV`` holds the list of all arguments given to the
function and ``ARGN`` holds the list of arguments past the last expected
argument.
Referencing to ``ARGV#`` arguments beyond ``ARGC`` have undefined
behavior. Checking that ``ARGC`` is greater than ``#`` is the only way
to ensure that ``ARGV#`` was passed to the function as an extra
argument.

A function opens a new scope: see ``set(var PARENT_SCOPE)`` for
details.

See the ``cmake_policy()`` command documentation for the behavior
of policies inside functions.

get_cmake_property
------------------

Get a property of the CMake instance.

::

 get_cmake_property(VAR property)

Get a property from the CMake instance.  The value of the property is
stored in the variable ``VAR``.  If the property is not found, ``VAR``
will be  set to "NOTFOUND".  See the ``cmake-properties(7)`` manual
for available properties.

See also the more general ``get_property()`` command.

get_directory_property
----------------------

Get a property of ``DIRECTORY`` scope.

::

 get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)

Store a property of directory scope in the named variable.  If the
property is not defined the empty-string is returned.  The ``DIRECTORY``
argument specifies another directory from which to retrieve the
property value.  The specified directory must have already been
traversed by CMake.

::

 get_directory_property(<variable> [DIRECTORY <dir>]
                        DEFINITION <var-name>)

Get a variable definition from a directory.  This form is useful to
get a variable definition from another directory.

See also the more general ``get_property()`` command.

get_filename_component
----------------------

Get a specific component of a full filename.

------------------------------------------------------------------------------

::

 get_filename_component(<VAR> <FileName> <COMP> [CACHE])

Set ``<VAR>`` to a component of ``<FileName>``, where ``<COMP>`` is one of:

::

 DIRECTORY = Directory without file name
 NAME      = File name without directory
 EXT       = File name longest extension (.b.c from d/a.b.c)
 NAME_WE   = File name without directory or longest extension
 PATH      = Legacy alias for DIRECTORY (use for CMake <= 2.8.11)

Paths are returned with forward slashes and have no trailing slashes.
The longest file extension is always considered.  If the optional
``CACHE`` argument is specified, the result variable is added to the
cache.

------------------------------------------------------------------------------

::

 get_filename_component(<VAR> <FileName>
                        <COMP> [BASE_DIR <BASE_DIR>]
                        [CACHE])

Set ``<VAR>`` to the absolute path of ``<FileName>``, where ``<COMP>`` is one
of:

::

 ABSOLUTE  = Full path to file
 REALPATH  = Full path to existing file with symlinks resolved

If the provided ``<FileName>`` is a relative path, it is evaluated relative
to the given base directory ``<BASE_DIR>``.  If no base directory is
provided, the default base directory will be
``CMAKE_CURRENT_SOURCE_DIR``.

Paths are returned with forward slashes and have no trailing slahes.  If the
optional ``CACHE`` argument is specified, the result variable is added to the
cache.

------------------------------------------------------------------------------

::

 get_filename_component(<VAR> <FileName>
                        PROGRAM [PROGRAM_ARGS <ARG_VAR>]
                        [CACHE])

The program in ``<FileName>`` will be found in the system search path or
left as a full path.  If ``PROGRAM_ARGS`` is present with ``PROGRAM``, then
any command-line arguments present in the ``<FileName>`` string are split
from the program name and stored in ``<ARG_VAR>``.  This is used to
separate a program name from its arguments in a command line string.

get_property
------------

Get a property.

::

 get_property(<variable>
              <GLOBAL             |
               DIRECTORY [dir]    |
               TARGET    <target> |
               SOURCE    <source> |
               INSTALL   <file>   |
               TEST      <test>   |
               CACHE     <entry>  |
               VARIABLE>
              PROPERTY <name>
              [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])

Get one property from one object in a scope.  The first argument
specifies the variable in which to store the result.  The second
argument determines the scope from which to get the property.  It must
be one of the following:

``GLOBAL``
  Scope is unique and does not accept a name.

``DIRECTORY``
  Scope defaults to the current directory but another
  directory (already processed by CMake) may be named by full or
  relative path.

``TARGET``
  Scope must name one existing target.

``SOURCE``
  Scope must name one source file.

``INSTALL``
  Scope must name one installed file path.

``TEST``
  Scope must name one existing test.

``CACHE``
  Scope must name one cache entry.

``VARIABLE``
  Scope is unique and does not accept a name.

The required ``PROPERTY`` option is immediately followed by the name of
the property to get.  If the property is not set an empty value is
returned.  If the ``SET`` option is given the variable is set to a boolean
value indicating whether the property has been set.  If the ``DEFINED``
option is given the variable is set to a boolean value indicating
whether the property has been defined such as with the
``define_property()`` command.
If ``BRIEF_DOCS`` or ``FULL_DOCS`` is given then the variable is set to a
string containing documentation for the requested property.  If
documentation is requested for a property that has not been defined
``NOTFOUND`` is returned.

get_source_file_property
------------------------

Get a property for a source file.

::

 get_source_file_property(VAR file property)

Get a property from a source file.  The value of the property is
stored in the variable ``VAR``.  If the property is not found, ``VAR``
will be set to "NOTFOUND".  Use ``set_source_files_properties()``
to set property values.  Source file properties usually control how the
file is built. One property that is always there is ``LOCATION``

See also the more general ``get_property()`` command.

get_target_property
-------------------

Get a property from a target.

::

 get_target_property(VAR target property)

Get a property from a target.  The value of the property is stored in
the variable ``VAR``.  If the property is not found, ``VAR`` will be set to
"NOTFOUND".  Use ``set_target_properties()`` to set property values.
Properties are usually used to control how a target is built, but some
query the target instead.  This command can get properties for any
target so far created.  The targets do not need to be in the current
``CMakeLists.txt`` file.

See also the more general ``get_property()`` command.

get_test_property
-----------------

Get a property of the test.

::

 get_test_property(test property VAR)

Get a property from the test.  The value of the property is stored in
the variable ``VAR``.  If the test or property is not found, ``VAR`` will
be set to "NOTFOUND".  For a list of standard properties you can type
``cmake --help-property-list``.

See also the more general ``get_property()`` command.

if
--

Conditionally execute a group of commands.

 if(expression)
   # then section.
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 elseif(expression2)
   # elseif section.
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 else(expression)
   # else section.
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 endif(expression)

Evaluates the given expression.  If the result is true, the commands
in the THEN section are invoked.  Otherwise, the commands in the else
section are invoked.  The elseif and else sections are optional.  You
may have multiple elseif clauses.  Note that the expression in the
else and endif clause is optional.  Long expressions can be used and
there is a traditional order of precedence.  Parenthetical expressions
are evaluated first followed by unary tests such as ``EXISTS``,
``COMMAND``, and ``DEFINED``.  Then any binary tests such as
``EQUAL``, ``LESS``, ``GREATER``, ``STRLESS``, ``STRGREATER``,
``STREQUAL``, and ``MATCHES`` will be evaluated.  Then boolean ``NOT``
operators and finally boolean ``AND`` and then ``OR`` operators will
be evaluated.

Possible expressions are:

``if(<constant>)``
 True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``,
 or a non-zero number.  False if the constant is ``0``, ``OFF``,
 ``NO``, ``FALSE``, ``N``, ``IGNORE``, ``NOTFOUND``, the empty string,
 or ends in the suffix ``-NOTFOUND``.  Named boolean constants are
 case-insensitive.  If the argument is not one of these specific
 constants, it is treated as a variable or string and the following
 signature is used.

``if(<variable|string>)``
 True if given a variable that is defined to a value that is not a false
 constant.  False otherwise.  (Note macro arguments are not variables.)

``if(NOT <expression>)``
 True if the expression is not true.

``if(<expr1> AND <expr2>)``
 True if both expressions would be considered true individually.

``if(<expr1> OR <expr2>)``
 True if either expression would be considered true individually.

``if(COMMAND command-name)``
 True if the given name is a command, macro or function that can be
 invoked.

``if(POLICY policy-id)``
 True if the given name is an existing policy (of the form ``CMP<NNNN>``).

``if(TARGET target-name)``
 True if the given name is an existing logical target name created
 by a call to the ``add_executable()``, ``add_library()``,
 or ``add_custom_target()`` command that has already been invoked
 (in any directory).

``if(TEST test-name)``
 True if the given name is an existing test name created by the
 ``add_test()`` command.

``if(EXISTS path-to-file-or-directory)``
 True if the named file or directory exists.  Behavior is well-defined
 only for full paths.

``if(file1 IS_NEWER_THAN file2)``
 True if ``file1`` is newer than ``file2`` or if one of the two files doesn't
 exist.  Behavior is well-defined only for full paths.  If the file
 time stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns
 true, so that any dependent build operations will occur in the event
 of a tie.  This includes the case of passing the same file name for
 both file1 and file2.

``if(IS_DIRECTORY path-to-directory)``
 True if the given name is a directory.  Behavior is well-defined only
 for full paths.

``if(IS_SYMLINK file-name)``
 True if the given name is a symbolic link.  Behavior is well-defined
 only for full paths.

``if(IS_ABSOLUTE path)``
 True if the given path is an absolute path.

``if(<variable|string> MATCHES regex)``
 True if the given string or variable's value matches the given regular
 expression.

``if(<variable|string> LESS <variable|string>)``
 True if the given string or variable's value is a valid number and less
 than that on the right.

``if(<variable|string> GREATER <variable|string>)``
 True if the given string or variable's value is a valid number and greater
 than that on the right.

``if(<variable|string> EQUAL <variable|string>)``
 True if the given string or variable's value is a valid number and equal
 to that on the right.

``if(<variable|string> STRLESS <variable|string>)``
 True if the given string or variable's value is lexicographically less
 than the string or variable on the right.

``if(<variable|string> STRGREATER <variable|string>)``
 True if the given string or variable's value is lexicographically greater
 than the string or variable on the right.

``if(<variable|string> STREQUAL <variable|string>)``
 True if the given string or variable's value is lexicographically equal
 to the string or variable on the right.

``if(<variable|string> VERSION_LESS <variable|string>)``
 Component-wise integer version number comparison (version format is
 ``major[.minor[.patch[.tweak]]]``).

``if(<variable|string> VERSION_EQUAL <variable|string>)``
 Component-wise integer version number comparison (version format is
 ``major[.minor[.patch[.tweak]]]``).

``if(<variable|string> VERSION_GREATER <variable|string>)``
 Component-wise integer version number comparison (version format is
 ``major[.minor[.patch[.tweak]]]``).

``if(<variable|string> IN_LIST <variable>)``
 True if the given element is contained in the named list variable.

``if(DEFINED <variable>)``
 True if the given variable is defined.  It does not matter if the
 variable is true or false just if it has been set.  (Note macro
 arguments are not variables.)

``if((expression) AND (expression OR (expression)))``
 The expressions inside the parenthesis are evaluated first and then
 the remaining expression is evaluated as in the previous examples.
 Where there are nested parenthesis the innermost are evaluated as part
 of evaluating the expression that contains them.

The if command was written very early in CMake's history, predating
the ``${}`` variable evaluation syntax, and for convenience evaluates
variables named by its arguments as shown in the above signatures.
Note that normal variable evaluation with ``${}`` applies before the if
command even receives the arguments.  Therefore code like::

 set(var1 OFF)
 set(var2 "var1")
 if(${var2})

appears to the if command as::

 if(var1)

and is evaluated according to the ``if(<variable>)`` case documented
above.  The result is ``OFF`` which is false.  However, if we remove the
``${}`` from the example then the command sees::

 if(var2)

which is true because ``var2`` is defined to "var1" which is not a false
constant.

Automatic evaluation applies in the other cases whenever the
above-documented signature accepts ``<variable|string>``:

* The left hand argument to ``MATCHES`` is first checked to see if it is
  a defined variable, if so the variable's value is used, otherwise the
  original value is used.

* If the left hand argument to ``MATCHES`` is missing it returns false
  without error

* Both left and right hand arguments to ``LESS``, ``GREATER``, and
  ``EQUAL`` are independently tested to see if they are defined
  variables, if so their defined values are used otherwise the original
  value is used.

* Both left and right hand arguments to ``STRLESS``, ``STREQUAL``, and
  ``STRGREATER`` are independently tested to see if they are defined
  variables, if so their defined values are used otherwise the original
  value is used.

* Both left and right hand arguments to ``VERSION_LESS``,
  ``VERSION_EQUAL``, and ``VERSION_GREATER`` are independently tested
  to see if they are defined variables, if so their defined values are
  used otherwise the original value is used.

* The right hand argument to ``NOT`` is tested to see if it is a boolean
  constant, if so the value is used, otherwise it is assumed to be a
  variable and it is dereferenced.

* The left and right hand arguments to ``AND`` and ``OR`` are independently
  tested to see if they are boolean constants, if so they are used as
  such, otherwise they are assumed to be variables and are dereferenced.

To prevent ambiguity, potential variable or keyword names can be
specified in a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.
A quoted or bracketed variable or keyword will be interpreted as a
string and not dereferenced or interpreted.
See policy ``CMP0054``.

include_directories
-------------------

Add include directories to the build.

::

 include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])

Add the given directories to those the compiler uses to search for
include files.  Relative paths are interpreted as relative to the
current source directory.

The include directories are added to the ``INCLUDE_DIRECTORIES``
directory property for the current ``CMakeLists`` file.  They are also
added to the ``INCLUDE_DIRECTORIES`` target property for each
target in the current ``CMakeLists`` file.  The target property values
are the ones used by the generators.

By default the directories specified are appended onto the current list of
directories.  This default behavior can be changed by setting
``CMAKE_INCLUDE_DIRECTORIES_BEFORE`` to ``ON``.  By using
``AFTER`` or ``BEFORE`` explicitly, you can select between appending and
prepending, independent of the default.

If the ``SYSTEM`` option is given, the compiler will be told the
directories are meant as system include directories on some platforms.
Signalling this setting might achieve effects such as the compiler
skipping warnings, or these fixed-install system files not being
considered in dependency calculations - see compiler docs.

Arguments to ``include_directories`` may use "generator expressions" with
the syntax "$<...>".  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

include_external_msproject
--------------------------

Include an external Microsoft project file in a workspace.

::

 include_external_msproject(projectname location
                            [TYPE projectTypeGUID]
                            [GUID projectGUID]
                            [PLATFORM platformName]
                            dep1 dep2 ...)

Includes an external Microsoft project in the generated workspace
file.  Currently does nothing on UNIX.  This will create a target
named [projectname].  This can be used in the ``add_dependencies()``
command to make things depend on the external project.

``TYPE``, ``GUID`` and ``PLATFORM`` are optional parameters that allow one to
specify the type of project, id (GUID) of the project and the name of
the target platform.  This is useful for projects requiring values
other than the default (e.g.  WIX projects).

include_regular_expression
--------------------------

Set the regular expression used for dependency checking.

::

 include_regular_expression(regex_match [regex_complain])

Set the regular expressions used in dependency checking.  Only files
matching ``regex_match`` will be traced as dependencies.  Only files
matching ``regex_complain`` will generate warnings if they cannot be found
(standard header paths are not searched).  The defaults are:

::

 regex_match    = "^.*$" (match everything)
 regex_complain = "^$" (match empty string only)

include
-------

Load and run CMake code from a file or module.

::

 include(<file|module> [OPTIONAL] [RESULT_VARIABLE <VAR>]
                       [NO_POLICY_SCOPE])

Load and run CMake code from the file given.  Variable reads and
writes access the scope of the caller (dynamic scoping).  If ``OPTIONAL``
is present, then no error is raised if the file does not exist.  If
``RESULT_VARIABLE`` is given the variable will be set to the full filename
which has been included or NOTFOUND if it failed.

If a module is specified instead of a file, the file with name
<modulename>.cmake is searched first in ``CMAKE_MODULE_PATH``,
then in the CMake module directory.  There is one exception to this: if
the file which calls ``include()`` is located itself in the CMake module
directory, then first the CMake module directory is searched and
``CMAKE_MODULE_PATH`` afterwards.  See also policy ``CMP0017``.

See the ``cmake_policy()`` command documentation for discussion of the
``NO_POLICY_SCOPE`` option.

install
-------

Specify rules to run at install time.

Introduction
^^^^^^^^^^^^

This command generates installation rules for a project.  Rules
specified by calls to this command within a source directory are
executed in order during installation.  The order across directories
is not defined.

There are multiple signatures for this command.  Some of them define
installation options for files and targets.  Options common to
multiple signatures are covered here but they are valid only for
signatures that specify them.  The common options are:

``DESTINATION``
  Specify the directory on disk to which a file will be installed.
  If a full path (with a leading slash or drive letter) is given
  it is used directly.  If a relative path is given it is interpreted
  relative to the value of the ``CMAKE_INSTALL_PREFIX`` variable.
  The prefix can be relocated at install time using the ``DESTDIR``
  mechanism explained in the ``CMAKE_INSTALL_PREFIX`` variable
  documentation.

``PERMISSIONS``
  Specify permissions for installed files.  Valid permissions are
  ``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``,
  ``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``,
  ``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do
  not make sense on certain platforms are ignored on those platforms.

``CONFIGURATIONS``
  Specify a list of build configurations for which the install rule
  applies (Debug, Release, etc.).

``COMPONENT``
  Specify an installation component name with which the install rule
  is associated, such as "runtime" or "development".  During
  component-specific installation only install rules associated with
  the given component name will be executed.  During a full installation
  all components are installed unless marked with ``EXCLUDE_FROM_ALL``.
  If ``COMPONENT`` is not provided a default component "Unspecified" is
  created.  The default component name may be controlled with the
  ``CMAKE_INSTALL_DEFAULT_COMPONENT_NAME`` variable.

``EXCLUDE_FROM_ALL``
  Specify that the file is excluded from a full installation and only
  installed as part of a component-specific installation

``RENAME``
  Specify a name for an installed file that may be different from the
  original file.  Renaming is allowed only when a single file is
  installed by the command.

``OPTIONAL``
  Specify that it is not an error if the file to be installed does
  not exist.

Command signatures that install files may print messages during
installation.  Use the ``CMAKE_INSTALL_MESSAGE`` variable
to control which messages are printed.

Installing Targets
^^^^^^^^^^^^^^^^^^

::

 install(TARGETS targets... [EXPORT <export-name>]
         [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|
           PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]
          [DESTINATION <dir>]
          [PERMISSIONS permissions...]
          [CONFIGURATIONS [Debug|Release|...]]
          [COMPONENT <component>]
          [OPTIONAL] [EXCLUDE_FROM_ALL]
          [NAMELINK_ONLY|NAMELINK_SKIP]
         ] [...]
         [INCLUDES DESTINATION [<dir> ...]]
         )

The ``TARGETS`` form specifies rules for installing targets from a
project.  There are five kinds of target files that may be installed:
``ARCHIVE``, ``LIBRARY``, ``RUNTIME``, ``FRAMEWORK``, and ``BUNDLE``.
Executables are treated as ``RUNTIME`` targets, except that those
marked with the ``MACOSX_BUNDLE`` property are treated as ``BUNDLE``
targets on OS X.  Static libraries are always treated as ``ARCHIVE``
targets.  Module libraries are always treated as ``LIBRARY`` targets.
For non-DLL platforms shared libraries are treated as ``LIBRARY``
targets, except that those marked with the ``FRAMEWORK`` property are
treated as ``FRAMEWORK`` targets on OS X.  For DLL platforms the DLL
part of a shared library is treated as a ``RUNTIME`` target and the
corresponding import library is treated as an ``ARCHIVE`` target.
All Windows-based systems including Cygwin are DLL platforms.
The ``ARCHIVE``, ``LIBRARY``, ``RUNTIME``, and ``FRAMEWORK`` arguments
change the type of target to which the subsequent properties apply.
If none is given the installation properties apply to all target
types.  If only one is given then only targets of that type will be
installed (which can be used to install just a DLL or just an import
library).

The ``PRIVATE_HEADER``, ``PUBLIC_HEADER``, and ``RESOURCE`` arguments
cause subsequent properties to be applied to installing a ``FRAMEWORK``
shared library target's associated files on non-Apple platforms.  Rules
defined by these arguments are ignored on Apple platforms because the
associated files are installed into the appropriate locations inside
the framework folder.  See documentation of the
``PRIVATE_HEADER``, ``PUBLIC_HEADER``, and
``RESOURCE`` target properties for details.

Either ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` may be specified as a
``LIBRARY`` option.  On some platforms a versioned shared library
has a symbolic link such as::

 lib<name>.so -> lib<name>.so.1

where ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so``
is a "namelink" allowing linkers to find the library when given
``-l<name>``.  The ``NAMELINK_ONLY`` option causes installation of only the
namelink when a library target is installed.  The ``NAMELINK_SKIP`` option
causes installation of library files other than the namelink when a
library target is installed.  When neither option is given both
portions are installed.  On platforms where versioned shared libraries
do not have namelinks or when a library is not versioned the
``NAMELINK_SKIP`` option installs the library and the ``NAMELINK_ONLY``
option installs nothing.  See the ``VERSION`` and
``SOVERSION`` target properties for details on creating versioned
shared libraries.

The ``INCLUDES DESTINATION`` specifies a list of directories
which will be added to the ``INTERFACE_INCLUDE_DIRECTORIES``
target property of the ``<targets>`` when exported by the
``install(EXPORT)`` command.  If a relative path is
specified, it is treated as relative to the ``$<INSTALL_PREFIX>``.
This is independent of the rest of the argument groups and does
not actually install anything.

One or more groups of properties may be specified in a single call to
the ``TARGETS`` form of this command.  A target may be installed more than
once to different locations.  Consider hypothetical targets ``myExe``,
``mySharedLib``, and ``myStaticLib``.  The code:

 install(TARGETS myExe mySharedLib myStaticLib
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib/static)
 install(TARGETS mySharedLib DESTINATION /some/full/path)

will install ``myExe`` to ``<prefix>/bin`` and ``myStaticLib`` to
``<prefix>/lib/static``.  On non-DLL platforms ``mySharedLib`` will be
installed to ``<prefix>/lib`` and ``/some/full/path``.  On DLL platforms
the ``mySharedLib`` DLL will be installed to ``<prefix>/bin`` and
``/some/full/path`` and its import library will be installed to
``<prefix>/lib/static`` and ``/some/full/path``.

The ``EXPORT`` option associates the installed target files with an
export called ``<export-name>``.  It must appear before any ``RUNTIME``,
``LIBRARY``, or ``ARCHIVE`` options.  To actually install the export
file itself, call ``install(EXPORT)``, documented below.

Installing a target with the ``EXCLUDE_FROM_ALL`` target property
set to ``TRUE`` has undefined behavior.

The install destination given to the target install ``DESTINATION`` may
use "generator expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available expressions.

Installing Files
^^^^^^^^^^^^^^^^

::

 install(<FILES|PROGRAMS> files... DESTINATION <dir>
         [PERMISSIONS permissions...]
         [CONFIGURATIONS [Debug|Release|...]]
         [COMPONENT <component>]
         [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])

The ``FILES`` form specifies rules for installing files for a project.
File names given as relative paths are interpreted with respect to the
current source directory.  Files installed by this form are by default
given permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and
``WORLD_READ`` if no ``PERMISSIONS`` argument is given.

The ``PROGRAMS`` form is identical to the ``FILES`` form except that the
default permissions for the installed file also include ``OWNER_EXECUTE``,
``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install
programs that are not targets, such as shell scripts.  Use the ``TARGETS``
form to install targets built within the project.

The list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use
"generator expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available expressions.
However, if any item begins in a generator expression it must evaluate
to a full path.

The install destination given to the files install ``DESTINATION`` may
use "generator expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available expressions.

Installing Directories
^^^^^^^^^^^^^^^^^^^^^^

::

 install(DIRECTORY dirs... DESTINATION <dir>
         [FILE_PERMISSIONS permissions...]
         [DIRECTORY_PERMISSIONS permissions...]
         [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]
         [CONFIGURATIONS [Debug|Release|...]]
         [COMPONENT <component>] [EXCLUDE_FROM_ALL]
         [FILES_MATCHING]
         [[PATTERN <pattern> | REGEX <regex>]
          [EXCLUDE] [PERMISSIONS permissions...]] [...])

The ``DIRECTORY`` form installs contents of one or more directories to a
given destination.  The directory structure is copied verbatim to the
destination.  The last component of each directory name is appended to
the destination directory but a trailing slash may be used to avoid
this because it leaves the last component empty.  Directory names
given as relative paths are interpreted with respect to the current
source directory.  If no input directory names are given the
destination directory will be created but nothing will be installed
into it.  The ``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS`` options
specify permissions given to files and directories in the destination.
If ``USE_SOURCE_PERMISSIONS`` is specified and ``FILE_PERMISSIONS`` is not,
file permissions will be copied from the source directory structure.
If no permissions are specified files will be given the default
permissions specified in the ``FILES`` form of the command, and the
directories will be given the default permissions specified in the
``PROGRAMS`` form of the command.

The ``MESSAGE_NEVER`` option disables file installation status output.

Installation of directories may be controlled with fine granularity
using the ``PATTERN`` or ``REGEX`` options.  These "match" options specify a
globbing pattern or regular expression to match directories or files
encountered within input directories.  They may be used to apply
certain options (see below) to a subset of the files and directories
encountered.  The full path to each input file or directory (with
forward slashes) is matched against the expression.  A ``PATTERN`` will
match only complete file names: the portion of the full path matching
the pattern must occur at the end of the file name and be preceded by
a slash.  A ``REGEX`` will match any portion of the full path but it may
use ``/`` and ``$`` to simulate the ``PATTERN`` behavior.  By default all
files and directories are installed whether or not they are matched.
The ``FILES_MATCHING`` option may be given before the first match option
to disable installation of files (but not directories) not matched by
any expression.  For example, the code

 install(DIRECTORY src/ DESTINATION include/myproj
         FILES_MATCHING PATTERN "*.h")

will extract and install header files from a source tree.

Some options may follow a ``PATTERN`` or ``REGEX`` expression and are applied
only to files or directories matching them.  The ``EXCLUDE`` option will
skip the matched file or directory.  The ``PERMISSIONS`` option overrides
the permissions setting for the matched file or directory.  For
example the code

 install(DIRECTORY icons scripts/ DESTINATION share/myproj
         PATTERN "CVS" EXCLUDE
         PATTERN "scripts/*"
         PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                     GROUP_EXECUTE GROUP_READ)

will install the ``icons`` directory to ``share/myproj/icons`` and the
``scripts`` directory to ``share/myproj``.  The icons will get default
file permissions, the scripts will be given specific permissions, and any
``CVS`` directories will be excluded.

The list of ``dirs...`` given to ``DIRECTORY`` and the install destination
given to the directory install ``DESTINATION`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.

Custom Installation Logic
^^^^^^^^^^^^^^^^^^^^^^^^^

::

 install([[SCRIPT <file>] [CODE <code>]]
         [COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])

The ``SCRIPT`` form will invoke the given CMake script files during
installation.  If the script file name is a relative path it will be
interpreted with respect to the current source directory.  The ``CODE``
form will invoke the given CMake code during installation.  Code is
specified as a single argument inside a double-quoted string.  For
example, the code

 install(CODE "MESSAGE(\"Sample install message.\")")

will print a message during installation.

Installing Exports
^^^^^^^^^^^^^^^^^^

::

 install(EXPORT <export-name> DESTINATION <dir>
         [NAMESPACE <namespace>] [FILE <name>.cmake]
         [PERMISSIONS permissions...]
         [CONFIGURATIONS [Debug|Release|...]]
         [EXPORT_LINK_INTERFACE_LIBRARIES]
         [COMPONENT <component>]
         [EXCLUDE_FROM_ALL])

The ``EXPORT`` form generates and installs a CMake file containing code to
import targets from the installation tree into another project.
Target installations are associated with the export ``<export-name>``
using the ``EXPORT`` option of the ``install(TARGETS)`` signature
documented above.  The ``NAMESPACE`` option will prepend ``<namespace>`` to
the target names as they are written to the import file.  By default
the generated file will be called ``<export-name>.cmake`` but the ``FILE``
option may be used to specify a different name.  The value given to
the ``FILE`` option must be a file name with the ``.cmake`` extension.
If a ``CONFIGURATIONS`` option is given then the file will only be installed
when one of the named configurations is installed.  Additionally, the
generated import file will reference only the matching target
configurations.  The ``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if
present, causes the contents of the properties matching
``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when
policy ``CMP0022`` is ``NEW``.  If a ``COMPONENT`` option is
specified that does not match that given to the targets associated with
``<export-name>`` the behavior is undefined.  If a library target is
included in the export but a target to which it links is not included
the behavior is unspecified.

The ``EXPORT`` form is useful to help outside projects use targets built
and installed by the current project.  For example, the code

 install(TARGETS myexe EXPORT myproj DESTINATION bin)
 install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)

will install the executable myexe to ``<prefix>/bin`` and code to import
it in the file ``<prefix>/lib/myproj/myproj.cmake``.  An outside project
may load this file with the include command and reference the ``myexe``
executable from the installation tree using the imported target name
``mp_myexe`` as if the target were built in its own tree.

.. note::
  This command supercedes the ``install_targets()`` command and
  the ``PRE_INSTALL_SCRIPT`` and ``POST_INSTALL_SCRIPT``
  target properties.  It also replaces the ``FILES`` forms of the
  ``install_files()`` and ``install_programs()`` commands.
  The processing order of these install rules relative to
  those generated by ``install_targets()``,
  ``install_files()``, and ``install_programs()`` commands
  is not defined.

link_directories
----------------

Specify directories in which the linker will look for libraries.

::

 link_directories(directory1 directory2 ...)

Specify the paths in which the linker should search for libraries.
The command will apply only to targets created after it is called.
Relative paths given to this command are interpreted as relative to
the current source directory, see ``CMP0015``.

Note that this command is rarely necessary.  Library locations
returned by ``find_package()`` and ``find_library()`` are
absolute paths. Pass these absolute library file paths directly to the
``target_link_libraries()`` command.  CMake will ensure the linker finds
them.

link_libraries
--------------

Link libraries to all targets added later.

::

 link_libraries([item1 [item2 [...]]]
                [[debug|optimized|general] <item>] ...)

Specify libraries or flags to use when linking any targets created later in
the current directory or below by commands such as ``add_executable()``
or ``add_library()``.  See the ``target_link_libraries()`` command
for meaning of arguments.

.. note::
  The ``target_link_libraries()`` command should be preferred whenever
  possible.  Library dependencies are chained automatically, so directory-wide
  specification of link libraries is rarely needed.

list
----

List operations.

::

 list(LENGTH <list> <output variable>)
 list(GET <list> <element index> [<element index> ...]
      <output variable>)
 list(APPEND <list> [<element> ...])
 list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)
 list(FIND <list> <value> <output variable>)
 list(INSERT <list> <element_index> <element> [<element> ...])
 list(REMOVE_ITEM <list> <value> [<value> ...])
 list(REMOVE_AT <list> <index> [<index> ...])
 list(REMOVE_DUPLICATES <list>)
 list(REVERSE <list>)
 list(SORT <list>)

``LENGTH`` will return a given list's length.

``GET`` will return list of elements specified by indices from the list.

``APPEND`` will append elements to the list.

``FILTER`` will include or remove items from the list that match the
mode's pattern.
In ``REGEX`` mode, items will be matched against the given regular expression.
For more information on regular expressions see also the ``string()``
command.

``FIND`` will return the index of the element specified in the list or -1
if it wasn't found.

``INSERT`` will insert elements to the list to the specified location.

``REMOVE_AT`` and ``REMOVE_ITEM`` will remove items from the list.  The
difference is that ``REMOVE_ITEM`` will remove the given items, while
``REMOVE_AT`` will remove the items at the given indices.

``REMOVE_DUPLICATES`` will remove duplicated items in the list.

``REVERSE`` reverses the contents of the list in-place.

``SORT`` sorts the list in-place alphabetically.

The list subcommands ``APPEND``, ``INSERT``, ``FILTER``, ``REMOVE_AT``,
``REMOVE_ITEM``, ``REMOVE_DUPLICATES``, ``REVERSE`` and ``SORT`` may create new
values for the list within the current CMake variable scope.  Similar to the
``set()`` command, the LIST command creates new variable values in the
current scope, even if the list itself is actually defined in a parent
scope.  To propagate the results of these operations upwards, use
``set()`` with ``PARENT_SCOPE``, ``set()`` with
``CACHE INTERNAL``, or some other means of value propagation.

NOTES: A list in cmake is a ``;`` separated group of strings.  To create a
list the set command can be used.  For example, ``set(var a b c d e)``
creates a list with ``a;b;c;d;e``, and ``set(var "a b c d e")`` creates a
string or a list with one item in it.   (Note macro arguments are not
variables, and therefore cannot be used in LIST commands.)

When specifying index values, if ``<element index>`` is 0 or greater, it
is indexed from the beginning of the list, with 0 representing the
first list element.  If ``<element index>`` is -1 or lesser, it is indexed
from the end of the list, with -1 representing the last list element.
Be careful when counting with negative indices: they do not start from
0.  -0 is equivalent to 0, the first list element.

load_cache
----------

Load in the values from another project's CMake cache.

::

 load_cache(pathToCacheFile READ_WITH_PREFIX
            prefix entry1...)

Read the cache and store the requested entries in variables with their
name prefixed with the given prefix.  This only reads the values, and
does not create entries in the local project's cache.

::

 load_cache(pathToCacheFile [EXCLUDE entry1...]
            [INCLUDE_INTERNALS entry1...])

Load in the values from another cache and store them in the local
project's cache as internal entries.  This is useful for a project
that depends on another project built in a different tree.  ``EXCLUDE``
option can be used to provide a list of entries to be excluded.
``INCLUDE_INTERNALS`` can be used to provide a list of internal entries to
be included.  Normally, no internal entries are brought in.  Use of
this form of the command is strongly discouraged, but it is provided
for backward compatibility.

macro
-----

Start recording a macro for later invocation as a command::

 macro(<name> [arg1 [arg2 [arg3 ...]]])
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 endmacro(<name>)

Define a macro named ``<name>`` that takes arguments named ``arg1``,
``arg2``, ``arg3``, (...).
Commands listed after macro, but before the matching
``endmacro()``, are not invoked until the macro is invoked.
When it is invoked, the commands recorded in the macro are first
modified by replacing formal parameters (``${arg1}``) with the arguments
passed, and then invoked as normal commands.
In addition to referencing the formal parameters you can reference the
values ``${ARGC}`` which will be set to the number of arguments passed
into the function as well as ``${ARGV0}``, ``${ARGV1}``, ``${ARGV2}``,
...  which will have the actual values of the arguments passed in.
This facilitates creating macros with optional arguments.
Additionally ``${ARGV}`` holds the list of all arguments given to the
macro and ``${ARGN}`` holds the list of arguments past the last expected
argument.
Referencing to ``${ARGV#}`` arguments beyond ``${ARGC}`` have undefined
behavior. Checking that ``${ARGC}`` is greater than ``#`` is the only
way to ensure that ``${ARGV#}`` was passed to the function as an extra
argument.

See the ``cmake_policy()`` command documentation for the behavior
of policies inside macros.

Macro Argument Caveats
^^^^^^^^^^^^^^^^^^^^^^

Note that the parameters to a macro and values such as ``ARGN`` are
not variables in the usual CMake sense.  They are string
replacements much like the C preprocessor would do with a macro.
Therefore you will NOT be able to use commands like::

 if(ARGV1) # ARGV1 is not a variable
 if(DEFINED ARGV2) # ARGV2 is not a variable
 if(ARGC GREATER 2) # ARGC is not a variable
 foreach(loop_var IN LISTS ARGN) # ARGN is not a variable

In the first case, you can use ``if(${ARGV1})``.
In the second and third case, the proper way to check if an optional
variable was passed to the macro is to use ``if(${ARGC} GREATER 2)``.
In the last case, you can use ``foreach(loop_var ${ARGN})`` but this
will skip empty arguments.
If you need to include them, you can use::

 set(list_var "${ARGN}")
 foreach(loop_var IN LISTS list_var)

Note that if you have a variable with the same name in the scope from
which the macro is called, using unreferenced names will use the
existing variable instead of the arguments. For example::

 macro(_BAR)
   foreach(arg IN LISTS ARGN)
     [...]
   endforeach()
 endmacro()

 function(_FOO)
   _bar(x y z)
 endfunction()

 _foo(a b c)

Will loop over ``a;b;c`` and not over ``x;y;z`` as one might be expecting.
If you want true CMake variables and/or better CMake scope control you
should look at the function command.

mark_as_advanced
----------------

Mark cmake cached variables as advanced.

::

 mark_as_advanced([CLEAR|FORCE] VAR [VAR2 ...])

Mark the named cached variables as advanced.  An advanced variable
will not be displayed in any of the cmake GUIs unless the show
advanced option is on.  If ``CLEAR`` is the first argument advanced
variables are changed back to unadvanced.  If ``FORCE`` is the first
argument, then the variable is made advanced.  If neither ``FORCE`` nor
``CLEAR`` is specified, new values will be marked as advanced, but if the
variable already has an advanced/non-advanced state, it will not be
changed.

It does nothing in script mode.

math
----

Mathematical expressions.

::

 math(EXPR <output variable> <math expression>)

``EXPR`` evaluates mathematical expression and returns result in the
output variable.  Example mathematical expression is '5 * ( 10 + 13
)'.  Supported operators are + - * / % | & ^ ~ << >> * / %.  They have
the same meaning as they do in C code.

message
-------

Display a message to the user.

::

 message([<mode>] "message to display" ...)

The optional ``<mode>`` keyword determines the type of message:

::

 (none)         = Important information
 STATUS         = Incidental information
 WARNING        = CMake Warning, continue processing
 AUTHOR_WARNING = CMake Warning (dev), continue processing
 SEND_ERROR     = CMake Error, continue processing,
                               but skip generation
 FATAL_ERROR    = CMake Error, stop processing and generation
 DEPRECATION    = CMake Deprecation Error or Warning if variable
                  CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED
                  is enabled, respectively, else no message.

The CMake command-line tool displays STATUS messages on stdout and all
other message types on stderr.  The CMake GUI displays all messages in
its log area.  The interactive dialogs (ccmake and CMakeSetup) show
STATUS messages one at a time on a status line and other messages in
interactive pop-up boxes.

CMake Warning and Error message text displays using a simple markup
language.  Non-indented text is formatted in line-wrapped paragraphs
delimited by newlines.  Indented text is considered pre-formatted.

option
------

Provides an option that the user can optionally select.

::

 option(<option_variable> "help string describing option"
        [initial value])

Provide an option for the user to select as ``ON`` or ``OFF``.  If no
initial value is provided, ``OFF`` is used.

If you have options that depend on the values of other options, see
the module help for ``CMakeDependentOption``.

project
-------

Set a name, version, and enable languages for the entire project.

 project(<PROJECT-NAME> [LANGUAGES] [<language-name>...])
 project(<PROJECT-NAME>
         [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]
         [LANGUAGES <language-name>...])

Sets the name of the project and stores the name in the
``PROJECT_NAME`` variable.  Additionally this sets variables

* ``PROJECT_SOURCE_DIR``,
  ``<PROJECT-NAME>_SOURCE_DIR``
* ``PROJECT_BINARY_DIR``,
  ``<PROJECT-NAME>_BINARY_DIR``

If ``VERSION`` is specified, given components must be non-negative integers.
If ``VERSION`` is not specified, the default version is the empty string.
The ``VERSION`` option may not be used unless policy ``CMP0048`` is
set to ``NEW``.

The ``project()`` command stores the version number and its components
in variables

* ``PROJECT_VERSION``,
  ``<PROJECT-NAME>_VERSION``
* ``PROJECT_VERSION_MAJOR``,
  ``<PROJECT-NAME>_VERSION_MAJOR``
* ``PROJECT_VERSION_MINOR``,
  ``<PROJECT-NAME>_VERSION_MINOR``
* ``PROJECT_VERSION_PATCH``,
  ``<PROJECT-NAME>_VERSION_PATCH``
* ``PROJECT_VERSION_TWEAK``,
  ``<PROJECT-NAME>_VERSION_TWEAK``

Variables corresponding to unspecified versions are set to the empty string
(if policy ``CMP0048`` is set to ``NEW``).

Optionally you can specify which languages your project supports.
Example languages are ``C``, ``CXX`` (i.e.  C++), ``Fortran``, etc.
By default ``C`` and ``CXX`` are enabled if no language options are
given.  Specify language ``NONE``, or use the ``LANGUAGES`` keyword
and list no languages, to skip enabling any languages.

If a variable exists called ``CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE``,
the file pointed to by that variable will be included as the last step of the
project command.

The top-level ``CMakeLists.txt`` file for a project must contain a
literal, direct call to the ``project()`` command; loading one
through the ``include()`` command is not sufficient.  If no such
call exists CMake will implicitly add one to the top that enables the
default languages (``C`` and ``CXX``).

.. note::
  Call the ``cmake_minimum_required()`` command at the beginning
  of the top-level ``CMakeLists.txt`` file even before calling the
  ``project()`` command.  It is important to establish version and
  policy settings before invoking other commands whose behavior they
  may affect.  See also policy ``CMP0000``.

qt_wrap_cpp
-----------

Create Qt Wrappers.

::

 qt_wrap_cpp(resultingLibraryName DestName
             SourceLists ...)

Produce moc files for all the .h files listed in the SourceLists.  The
moc files will be added to the library using the ``DestName`` source list.

qt_wrap_ui
----------

Create Qt user interfaces Wrappers.

::

 qt_wrap_ui(resultingLibraryName HeadersDestName
            SourcesDestName SourceLists ...)

Produce .h and .cxx files for all the .ui files listed in the
``SourceLists``.  The .h files will be added to the library using the
``HeadersDestNamesource`` list.  The .cxx files will be added to the
library using the ``SourcesDestNamesource`` list.

remove_definitions
------------------

Removes -D define flags added by ``add_definitions()``.

::

 remove_definitions(-DFOO -DBAR ...)

Removes flags (added by ``add_definitions()``) from the compiler
command line for sources in the current directory and below.

return
------

Return from a file, directory or function.

::

 return()

Returns from a file, directory or function.  When this command is
encountered in an included file (via ``include()`` or
``find_package()``), it causes processing of the current file to stop
and control is returned to the including file.  If it is encountered in a
file which is not included by another file, e.g.  a ``CMakeLists.txt``,
control is returned to the parent directory if there is one.  If return is
called in a function, control is returned to the caller of the function.
Note that a macro is not a function and does not handle return like a
function does.

separate_arguments
------------------

Parse space-separated arguments into a semicolon-separated list.

::

 separate_arguments(<var> <UNIX|WINDOWS>_COMMAND "<args>")

Parses a unix- or windows-style command-line string "<args>" and
stores a semicolon-separated list of the arguments in ``<var>``.  The
entire command line must be given in one "<args>" argument.

The ``UNIX_COMMAND`` mode separates arguments by unquoted whitespace.  It
recognizes both single-quote and double-quote pairs.  A backslash
escapes the next literal character (\" is "); there are no special
escapes (\n is just n).

The ``WINDOWS_COMMAND`` mode parses a windows command-line using the same
syntax the runtime library uses to construct argv at startup.  It
separates arguments by whitespace that is not double-quoted.
Backslashes are literal unless they precede double-quotes.  See the
MSDN article "Parsing C Command-Line Arguments" for details.

::

 separate_arguments(VARIABLE)

Convert the value of ``VARIABLE`` to a semi-colon separated list.  All
spaces are replaced with ';'.  This helps with generating command
lines.

set_directory_properties
------------------------

Set a property of the directory.

::

 set_directory_properties(PROPERTIES prop1 value1 prop2 value2)

Set a property for the current directory and subdirectories. See
:ref:`Directory Properties` for the list of properties known
to CMake.

set_property
------------

Set a named property in a given scope.

::

 set_property(<GLOBAL                            |
               DIRECTORY [dir]                   |
               TARGET    [target1 [target2 ...]] |
               SOURCE    [src1 [src2 ...]]       |
               INSTALL   [file1 [file2 ...]]     |
               TEST      [test1 [test2 ...]]     |
               CACHE     [entry1 [entry2 ...]]>
              [APPEND] [APPEND_STRING]
              PROPERTY <name> [value1 [value2 ...]])

Set one property on zero or more objects of a scope.  The first
argument determines the scope in which the property is set.  It must
be one of the following:

``GLOBAL``
  Scope is unique and does not accept a name.

``DIRECTORY``
  Scope defaults to the current directory but another
  directory (already processed by CMake) may be named by full or
  relative path.

``TARGET``
  Scope may name zero or more existing targets.

``SOURCE``
  Scope may name zero or more source files.  Note that source
  file properties are visible only to targets added in the same
  directory (CMakeLists.txt).

``INSTALL``
  Scope may name zero or more installed file paths.
  These are made available to CPack to influence deployment.

  Both the property key and value may use generator expressions.
  Specific properties may apply to installed files and/or directories.

  Path components have to be separated by forward slashes,
  must be normalized and are case sensitive.

  To reference the installation prefix itself with a relative path use ".".

  Currently installed file properties are only defined for
  the WIX generator where the given paths are relative
  to the installation prefix.

``TEST``
  Scope may name zero or more existing tests.

``CACHE``
  Scope must name zero or more cache existing entries.

The required ``PROPERTY`` option is immediately followed by the name of
the property to set.  Remaining arguments are used to compose the
property value in the form of a semicolon-separated list.  If the
``APPEND`` option is given the list is appended to any existing property
value.  If the ``APPEND_STRING`` option is given the string is append to any
existing property value as string, i.e.  it results in a longer string
and not a list of strings.

See the ``cmake-properties(7)`` manual for a list of properties
in each scope.

set
---

Set a normal, cache, or environment variable to a given value.
See the :ref:`cmake-language(7) variables <CMake Language Variables>`
documentation for the scopes and interaction of normal variables
and cache entries.

Signatures of this command that specify a ``<value>...`` placeholder
expect zero or more arguments.  Multiple arguments will be joined as
a :ref:`;-list <CMake Language Lists>` to form the actual variable
value to be set.  Zero arguments will cause normal variables to be
unset.  See the ``unset()`` command to unset variables explicitly.

Set Normal Variable
^^^^^^^^^^^^^^^^^^^

::

 set(<variable> <value>... [PARENT_SCOPE])

Set the given ``<variable>`` in the current function or directory scope.

If the ``PARENT_SCOPE`` option is given the variable will be set in
the scope above the current scope.  Each new directory or function
creates a new scope.  This command will set the value of a variable
into the parent directory or calling function (whichever is applicable
to the case at hand).

Set Cache Entry
^^^^^^^^^^^^^^^

::

 set(<variable> <value>... CACHE <type> <docstring> [FORCE])

Set the given cache ``<variable>`` (cache entry).  Since cache entries
are meant to provide user-settable values this does not overwrite
existing cache entries by default.  Use the ``FORCE`` option to
overwrite existing entries.

The ``<type>`` must be specified as one of:

``BOOL``
  Boolean ``ON/OFF`` value.  ``cmake-gui(1)`` offers a checkbox.

``FILEPATH``
  Path to a file on disk.  ``cmake-gui(1)`` offers a file dialog.

``PATH``
  Path to a directory on disk.  ``cmake-gui(1)`` offers a file dialog.

``STRING``
  A line of text.  ``cmake-gui(1)`` offers a text field or a
  drop-down selection if the ``STRINGS`` cache entry
  property is set.

``INTERNAL``
  A line of text.  ``cmake-gui(1)`` does not show internal entries.
  They may be used to store variables persistently across runs.
  Use of this type implies ``FORCE``.

The ``<docstring>`` must be specified as a line of text providing
a quick summary of the option for presentation to ``cmake-gui(1)``
users.

If the cache entry does not exist prior to the call or the ``FORCE``
option is given then the cache entry will be set to the given value.
Furthermore, any normal variable binding in the current scope will
be removed to expose the newly cached value to any immediately
following evaluation.

It is possible for the cache entry to exist prior to the call but
have no type set if it was created on the ``cmake(1)`` command
line by a user through the ``-D<var>=<value>`` option without
specifying a type.  In this case the ``set`` command will add the
type.  Furthermore, if the ``<type>`` is ``PATH`` or ``FILEPATH``
and the ``<value>`` provided on the command line is a relative path,
then the ``set`` command will treat the path as relative to the
current working directory and convert it to an absolute path.

Set Environment Variable
^^^^^^^^^^^^^^^^^^^^^^^^

::

 set(ENV{<variable>} <value>...)

Set the current process environment ``<variable>`` to the given value.

set_source_files_properties
---------------------------

Source files can have properties that affect how they are built.

::

 set_source_files_properties([file1 [file2 [...]]]
                             PROPERTIES prop1 value1
                             [prop2 value2 [...]])

Set properties associated with source files using a key/value paired
list.  See :ref:`Source File Properties` for the list of properties known
to CMake.  Source file properties are visible only to targets added
in the same directory (CMakeLists.txt).

set_target_properties
---------------------

Targets can have properties that affect how they are built.

::

 set_target_properties(target1 target2 ...
                       PROPERTIES prop1 value1
                       prop2 value2 ...)

Set properties on a target.  The syntax for the command is to list all
the files you want to change, and then provide the values you want to
set next.  You can use any prop value pair you want and extract it
later with the ``get_property()`` or ``get_target_property()``
command.

See :ref:`Target Properties` for the list of properties known to CMake.

set_tests_properties
--------------------

Set a property of the tests.

::

 set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)

Set a property for the tests.  If the test is not found, CMake
will report an error.
``Generator expressions`` will be
expanded the same as supported by the test's ``add_test()`` call.  See
:ref:`Test Properties` for the list of properties known to CMake.

site_name
---------

Set the given variable to the name of the computer.

::

 site_name(variable)

source_group
------------

Define a grouping for source files in IDE project generation.

 source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])

Defines a group into which sources will be placed in project files.
This is intended to set up file tabs in Visual Studio.
The options are:

``FILES``
 Any source file specified explicitly will be placed in group
 ``<name>``.  Relative paths are interpreted with respect to the
 current source directory.

``REGULAR_EXPRESSION``
 Any source file whose name matches the regular expression will
 be placed in group ``<name>``.

If a source file matches multiple groups, the *last* group that
explicitly lists the file with ``FILES`` will be favored, if any.
If no group explicitly lists the file, the *last* group whose
regular expression matches the file will be favored.

The ``<name>`` of the group may contain backslashes to specify subgroups:

 source_group(outer\\inner ...)

For backwards compatibility, the short-hand signature

 source_group(<name> <regex>)

is equivalent to

 source_group(<name> REGULAR_EXPRESSION <regex>)

string
------

String operations.

Search and Replace
^^^^^^^^^^^^^^^^^^

FIND
""""

::

 string(FIND <string> <substring> <output variable> [REVERSE])

Return the position where the given substring was found in
the supplied string.  If the ``REVERSE`` flag was used, the command will
search for the position of the last occurrence of the specified
substring.  If the substring is not found, a position of -1 is returned.

REPLACE
"""""""

::

 string(REPLACE <match_string>
        <replace_string> <output variable>
        <input> [<input>...])

Replace all occurrences of ``match_string`` in the input
with ``replace_string`` and store the result in the output.

Regular Expressions
^^^^^^^^^^^^^^^^^^^

REGEX MATCH
"""""""""""

::

 string(REGEX MATCH <regular_expression>
        <output variable> <input> [<input>...])

Match the regular expression once and store the match in the output variable.
All ``<input>`` arguments are concatenated before matching.

REGEX MATCHALL
""""""""""""""

::

 string(REGEX MATCHALL <regular_expression>
        <output variable> <input> [<input>...])

Match the regular expression as many times as possible and store the matches
in the output variable as a list.
All ``<input>`` arguments are concatenated before matching.

REGEX REPLACE
"""""""""""""

::

 string(REGEX REPLACE <regular_expression>
        <replace_expression> <output variable>
        <input> [<input>...])

Match the regular expression as many times as possible and substitute the
replacement expression for the match in the output.
All ``<input>`` arguments are concatenated before matching.

The replace expression may refer to paren-delimited subexpressions of the
match using ``\1``, ``\2``, ..., ``\9``.  Note that two backslashes (``\\1``)
are required in CMake code to get a backslash through argument parsing.

Regex Specification
"""""""""""""""""""

The following characters have special meaning in regular expressions:

::

 ^         Matches at beginning of input
 $         Matches at end of input
 .         Matches any single character
 [ ]       Matches any character(s) inside the brackets
 [^ ]      Matches any character(s) not inside the brackets
  -        Inside brackets, specifies an inclusive range between
           characters on either side e.g. [a-f] is [abcdef]
           To match a literal - using brackets, make it the first
           or the last character e.g. [+*/-] matches basic
           mathematical operators.
 *         Matches preceding pattern zero or more times
 +         Matches preceding pattern one or more times
 ?         Matches preceding pattern zero or once only
 |         Matches a pattern on either side of the |
 ()        Saves a matched subexpression, which can be referenced
           in the REGEX REPLACE operation. Additionally it is saved
           by all regular expression-related commands, including
           e.g. if( MATCHES ), in the variables CMAKE_MATCH_(0..9).

``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|``
has lower precedence than concatenation.  This means that the regular
expression ``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular
expression ``^(ab|cd)$`` matches ``ab`` but not ``abd``.

Manipulation
^^^^^^^^^^^^

APPEND
""""""

::

 string(APPEND <string variable> [<input>...])

Append all the input arguments to the string.

CONCAT
""""""

::

 string(CONCAT <output variable> [<input>...])

Concatenate all the input arguments together and store
the result in the named output variable.

TOLOWER
"""""""

::

 string(TOLOWER <string1> <output variable>)

Convert string to lower characters.

TOUPPER
"""""""

::

 string(TOUPPER <string1> <output variable>)

Convert string to upper characters.

LENGTH
""""""

::

 string(LENGTH <string> <output variable>)

Store in an output variable a given string's length.

SUBSTRING
"""""""""

::

 string(SUBSTRING <string> <begin> <length> <output variable>)

Store in an output variable a substring of a given string.  If length is
``-1`` the remainder of the string starting at begin will be returned.
If string is shorter than length then end of string is used instead.

.. note::
  CMake 3.1 and below reported an error if length pointed past
  the end of string.

STRIP
"""""

::

 string(STRIP <string> <output variable>)

Store in an output variable a substring of a given string with leading and
trailing spaces removed.

GENEX_STRIP
"""""""""""

::

 string(GENEX_STRIP <input string> <output variable>)

Strip any ``generator expressions``
from the ``input string`` and store the result in the ``output variable``.

Comparison
^^^^^^^^^^

::

 string(COMPARE EQUAL <string1> <string2> <output variable>)
 string(COMPARE NOTEQUAL <string1> <string2> <output variable>)
 string(COMPARE LESS <string1> <string2> <output variable>)
 string(COMPARE GREATER <string1> <string2> <output variable>)

Compare the strings and store true or false in the output variable.

Hashing
^^^^^^^

::

 string(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512>
        <output variable> <input>)

Compute a cryptographic hash of the input string.

Generation
^^^^^^^^^^

ASCII
"""""

::

 string(ASCII <number> [<number> ...] <output variable>)

Convert all numbers into corresponding ASCII characters.

CONFIGURE
"""""""""

::

 string(CONFIGURE <string1> <output variable>
        [@ONLY] [ESCAPE_QUOTES])

Transform a string like ``configure_file()`` transforms a file.

RANDOM
""""""

::

 string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]
        [RANDOM_SEED <seed>] <output variable>)

Return a random string of given length consisting of
characters from the given alphabet.  Default length is 5 characters
and default alphabet is all numbers and upper and lower case letters.
If an integer ``RANDOM_SEED`` is given, its value will be used to seed the
random number generator.

TIMESTAMP
"""""""""

::

 string(TIMESTAMP <output variable> [<format string>] [UTC])

Write a string representation of the current date
and/or time to the output variable.

Should the command be unable to obtain a timestamp the output variable
will be set to the empty string "".

The optional ``UTC`` flag requests the current date/time representation to
be in Coordinated Universal Time (UTC) rather than local time.

The optional ``<format string>`` may contain the following format
specifiers:

::

 %d        The day of the current month (01-31).
 %H        The hour on a 24-hour clock (00-23).
 %I        The hour on a 12-hour clock (01-12).
 %j        The day of the current year (001-366).
 %m        The month of the current year (01-12).
 %M        The minute of the current hour (00-59).
 %s        Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).
 %S        The second of the current minute.
           60 represents a leap second. (00-60)
 %U        The week number of the current year (00-53).
 %w        The day of the current week. 0 is Sunday. (0-6)
 %y        The last two digits of the current year (00-99)
 %Y        The current year.

Unknown format specifiers will be ignored and copied to the output
as-is.

If no explicit ``<format string>`` is given it will default to:

::

 %Y-%m-%dT%H:%M:%S    for local time.
 %Y-%m-%dT%H:%M:%SZ   for UTC.

::

 string(MAKE_C_IDENTIFIER <input string> <output variable>)

Write a string which can be used as an identifier in C.

UUID
""""

::

 string(UUID <output variable> NAMESPACE <namespace> NAME <name>
        TYPE <MD5|SHA1> [UPPER])

Create a univerally unique identifier (aka GUID) as per RFC4122
based on the hash of the combined values of ``<namespace>``
(which itself has to be a valid UUID) and ``<name>``.
The hash algorithm can be either ``MD5`` (Version 3 UUID) or
``SHA1`` (Version 5 UUID).
A UUID has the format ``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx``
where each `x` represents a lower case hexadecimal character.
Where required an uppercase representation can be requested
with the optional ``UPPER`` flag.

target_compile_definitions
--------------------------

Add compile definitions to a target.

::

 target_compile_definitions(<target>
   <INTERFACE|PUBLIC|PRIVATE> [items1...]
   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specify compile definitions to use when compiling a given ``<target>``.  The
named ``<target>`` must have been created by a command such as
``add_executable()`` or ``add_library()`` and must not be an
:ref:`Imported Target <Imported Targets>`.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``
items will populate the ``COMPILE_DEFINITIONS`` property of
``<target>``. ``PUBLIC`` and ``INTERFACE`` items will populate the
``INTERFACE_COMPILE_DEFINITIONS`` property of ``<target>``.  The
following arguments specify compile definitions.  Repeated calls for the
same ``<target>`` append items in the order called.

Arguments to ``target_compile_definitions`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

target_compile_features
-----------------------

Add expected compiler features to a target.

::

 target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])

Specify compiler features required when compiling a given target.  If the
feature is not listed in the ``CMAKE_C_COMPILE_FEATURES`` variable
or ``CMAKE_CXX_COMPILE_FEATURES`` variable,
then an error will be reported by CMake.  If the use of the feature requires
an additional compiler flag, such as ``-std=gnu++11``, the flag will be added
automatically.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the scope of the features.  ``PRIVATE`` and ``PUBLIC`` items will
populate the ``COMPILE_FEATURES`` property of ``<target>``.
``PUBLIC`` and ``INTERFACE`` items will populate the
``INTERFACE_COMPILE_FEATURES`` property of ``<target>``.  Repeated
calls for the same ``<target>`` append items.

The named ``<target>`` must have been created by a command such as
``add_executable()`` or ``add_library()`` and must not be
an ``IMPORTED`` target.

Arguments to ``target_compile_features`` may use "generator expressions"
with the syntax ``$<...>``.
See the ``cmake-generator-expressions(7)`` manual for available
expressions.  See the ``cmake-compile-features(7)`` manual for
information on compile features and a list of supported compilers.

target_compile_options
----------------------

Add compile options to a target.

::

 target_compile_options(<target> [BEFORE]
   <INTERFACE|PUBLIC|PRIVATE> [items1...]
   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specify compile options to use when compiling a given target.  The
named ``<target>`` must have been created by a command such as
``add_executable()`` or ``add_library()`` and must not be an
:ref:`IMPORTED Target <Imported Targets>`.  If ``BEFORE`` is specified,
the content will be prepended to the property instead of being appended.

This command can be used to add any options, but
alternative commands exist to add preprocessor definitions
(``target_compile_definitions()`` and ``add_definitions()``) or
include directories (``target_include_directories()`` and
``include_directories()``).  See documentation of the
``directory`` and
``target`` ``COMPILE_OPTIONS`` properties.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``
items will populate the ``COMPILE_OPTIONS`` property of
``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the
``INTERFACE_COMPILE_OPTIONS`` property of ``<target>``.  The
following arguments specify compile options.  Repeated calls for the same
``<target>`` append items in the order called.

Arguments to ``target_compile_options`` may use "generator expressions"
with the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

target_include_directories
--------------------------

Add include directories to a target.

::

 target_include_directories(<target> [SYSTEM] [BEFORE]
   <INTERFACE|PUBLIC|PRIVATE> [items1...]
   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specify include directories to use when compiling a given target.
The named ``<target>`` must have been created by a command such
as ``add_executable()`` or ``add_library()`` and must not be an
``IMPORTED`` target.

If ``BEFORE`` is specified, the content will be prepended to the property
instead of being appended.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to specify
the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC`` items will
populate the ``INCLUDE_DIRECTORIES`` property of ``<target>``.
``PUBLIC`` and ``INTERFACE`` items will populate the
``INTERFACE_INCLUDE_DIRECTORIES``
property of ``<target>``.  The following arguments specify include
directories.

Specified include directories may be absolute paths or relative paths.
Repeated calls for the same <target> append items in the order called.  If
``SYSTEM`` is specified, the compiler will be told the
directories are meant as system include directories on some platforms
(signalling this setting might achieve effects such as the compiler
skipping warnings, or these fixed-install system files not being
considered in dependency calculations - see compiler docs).  If ``SYSTEM``
is used together with ``PUBLIC`` or ``INTERFACE``, the
``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` target property will be
populated with the specified directories.

Arguments to ``target_include_directories`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

 target_include_directories(mylib PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>
   $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib
 )

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the ``INSTALL_INTERFACE`` of the
``INTERFACE_INCLUDE_DIRECTORIES`` of a target with absolute paths to the include
directories of dependencies.  That would hard-code into installed packages
the include directory paths for dependencies
**as found on the machine the package was made on**.

The ``INSTALL_INTERFACE`` of the ``INTERFACE_INCLUDE_DIRECTORIES`` is only
suitable for specifying the required include directories for headers
provided with the target itself, not those provided by the transitive
dependencies listed in its ``INTERFACE_LINK_LIBRARIES`` target
property.  Those dependencies should themselves be targets that specify
their own header locations in ``INTERFACE_INCLUDE_DIRECTORIES``.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

target_link_libraries
---------------------

Specify libraries or flags to use when linking a given target and/or
its dependents.  :ref:`Usage requirements <Target Usage Requirements>`
from linked library targets will be propagated.  Usage requirements
of a target's dependencies affect compilation of its own sources.

Overview
^^^^^^^^

This command has several signatures as detailed in subsections below.
All of them have the general form::

 target_link_libraries(<target> ... <item>... ...)

The named ``<target>`` must have been created in the current directory by
a command such as ``add_executable()`` or ``add_library()``.
Repeated calls for the same ``<target>`` append items in the order called.
Each ``<item>`` may be:

* **A library target name**: The generated link line will have the
  full path to the linkable library file associated with the target.
  The buildsystem will have a dependency to re-link ``<target>`` if
  the library file changes.

  The named target must be created by ``add_library()`` within
  the project or as an :ref:`IMPORTED library <Imported Targets>`.
  If it is created within the project an ordering dependency will
  automatically be added in the build system to make sure the named
  library target is up-to-date before the ``<target>`` links.

  If an imported library has the ``IMPORTED_NO_SONAME``
  target property set, CMake may ask the linker to search for
  the library instead of using the full path
  (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``).

* **A full path to a library file**: The generated link line will
  normally preserve the full path to the file. The buildsystem will
  have a dependency to re-link ``<target>`` if the library file changes.

  There are some cases where CMake may ask the linker to search for
  the library (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``), such
  as when a shared library is detected to have no ``SONAME`` field.
  See policy ``CMP0060`` for discussion of another case.

  If the library file is in a Mac OSX framework, the ``Headers`` directory
  of the framework will also be processed as a
  :ref:`usage requirement <Target Usage Requirements>`.  This has the same
  effect as passing the framework directory as an include directory.

* **A plain library name**: The generated link line will ask the linker
  to search for the library (e.g. ``foo`` becomes ``-lfoo`` or ``foo.lib``).

* **A link flag**: Item names starting with ``-``, but not ``-l`` or
  ``-framework``, are treated as linker flags.  Note that such flags will
  be treated like any other library link item for purposes of transitive
  dependencies, so they are generally safe to specify only as private link
  items that will not propagate to dependents.

* A ``debug``, ``optimized``, or ``general`` keyword immediately followed
  by another ``<item>``.  The item following such a keyword will be used
  only for the corresponding build configuration.  The ``debug`` keyword
  corresponds to the ``Debug`` configuration (or to configurations named
  in the ``DEBUG_CONFIGURATIONS`` global property if it is set).
  The ``optimized`` keyword corresponds to all other configurations.  The
  ``general`` keyword corresponds to all configurations, and is purely
  optional.  Higher granularity may be achieved for per-configuration
  rules by creating and linking to
  :ref:`IMPORTED library targets <Imported Targets>`.

Items containing ``::``, such as ``Foo::Bar``, are assumed to be
:ref:`IMPORTED <Imported Targets>` or :ref:`ALIAS <Alias Targets>` library
target names and will cause an error if no such target exists.
See policy ``CMP0028``.

Arguments to ``target_link_libraries`` may use "generator expressions"
with the syntax ``$<...>``.  Note however, that generator expressions
will not be used in OLD handling of ``CMP0003`` or ``CMP0004``.
See the ``cmake-generator-expressions(7)`` manual for available
expressions.  See the ``cmake-buildsystem(7)`` manual for more on
defining buildsystem properties.

Libraries for a Target and/or its Dependents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 target_link_libraries(<target>
                       <PRIVATE|PUBLIC|INTERFACE> <item>...
                      [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)

The ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` keywords can be used to
specify both the link dependencies and the link interface in one command.
Libraries and targets following ``PUBLIC`` are linked to, and are made
part of the link interface.  Libraries and targets following ``PRIVATE``
are linked to, but are not made part of the link interface.  Libraries
following ``INTERFACE`` are appended to the link interface and are not
used for linking ``<target>``.

Libraries for both a Target and its Dependents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 target_link_libraries(<target> <item>...)

Library dependencies are transitive by default with this signature.
When this target is linked into another target then the libraries
linked to this target will appear on the link line for the other
target too.  This transitive "link interface" is stored in the
``INTERFACE_LINK_LIBRARIES`` target property and may be overridden
by setting the property directly.  When ``CMP0022`` is not set to
``NEW``, transitive linking is built in but may be overridden by the
``LINK_INTERFACE_LIBRARIES`` property.  Calls to other signatures
of this command may set the property making any libraries linked
exclusively by this signature private.

Libraries for a Target and/or its Dependents (Legacy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 target_link_libraries(<target>
                       <LINK_PRIVATE|LINK_PUBLIC> <lib>...
                      [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)

The ``LINK_PUBLIC`` and ``LINK_PRIVATE`` modes can be used to specify both
the link dependencies and the link interface in one command.

This signature is for compatibility only.  Prefer the ``PUBLIC`` or
``PRIVATE`` keywords instead.

Libraries and targets following ``LINK_PUBLIC`` are linked to, and are
made part of the ``INTERFACE_LINK_LIBRARIES``.  If policy
``CMP0022`` is not ``NEW``, they are also made part of the
``LINK_INTERFACE_LIBRARIES``.  Libraries and targets following
``LINK_PRIVATE`` are linked to, but are not made part of the
``INTERFACE_LINK_LIBRARIES`` (or ``LINK_INTERFACE_LIBRARIES``).

Libraries for Dependents Only (Legacy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)

The ``LINK_INTERFACE_LIBRARIES`` mode appends the libraries to the
``INTERFACE_LINK_LIBRARIES`` target property instead of using them
for linking.  If policy ``CMP0022`` is not ``NEW``, then this mode
also appends libraries to the ``LINK_INTERFACE_LIBRARIES`` and its
per-configuration equivalent.

This signature is for compatibility only.  Prefer the ``INTERFACE`` mode
instead.

Libraries specified as ``debug`` are wrapped in a generator expression to
correspond to debug builds.  If policy ``CMP0022`` is
not ``NEW``, the libraries are also appended to the
``LINK_INTERFACE_LIBRARIES_DEBUG``
property (or to the properties corresponding to configurations listed in
the ``DEBUG_CONFIGURATIONS`` global property if it is set).
Libraries specified as ``optimized`` are appended to the
``INTERFACE_LINK_LIBRARIES`` property.  If policy ``CMP0022``
is not ``NEW``, they are also appended to the
``LINK_INTERFACE_LIBRARIES`` property.  Libraries specified as
``general`` (or without any keyword) are treated as if specified for both
``debug`` and ``optimized``.

Cyclic Dependencies of Static Libraries
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The library dependency graph is normally acyclic (a DAG), but in the case
of mutually-dependent ``STATIC`` libraries CMake allows the graph to
contain cycles (strongly connected components).  When another target links
to one of the libraries, CMake repeats the entire connected component.
For example, the code

 add_library(A STATIC a.c)
 add_library(B STATIC b.c)
 target_link_libraries(A B)
 target_link_libraries(B A)
 add_executable(main main.c)
 target_link_libraries(main A)

links ``main`` to ``A B A B``.  While one repetition is usually
sufficient, pathological object file and symbol arrangements can require
more.  One may handle such cases by using the
``LINK_INTERFACE_MULTIPLICITY`` target property or by manually
repeating the component in the last ``target_link_libraries`` call.
However, if two archives are really so interdependent they should probably
be combined into a single archive, perhaps by using :ref:`Object Libraries`.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the
``INTERFACE_LINK_LIBRARIES`` of a target with absolute paths to dependencies.
That would hard-code into installed packages the library file paths
for dependencies **as found on the machine the package was made on**.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

target_sources
--------------

Add sources to a target.

::

 target_sources(<target>
   <INTERFACE|PUBLIC|PRIVATE> [items1...]
   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

Specify sources to use when compiling a given target.  The
named ``<target>`` must have been created by a command such as
``add_executable()`` or ``add_library()`` and must not be an
:ref:`IMPORTED Target <Imported Targets>`.

The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to
specify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``
items will populate the ``SOURCES`` property of
``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the
``INTERFACE_SOURCES`` property of ``<target>``.  The
following arguments specify sources.  Repeated calls for the same
``<target>`` append items in the order called.

Arguments to ``target_sources`` may use "generator expressions"
with the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

try_compile
-----------

Try building some code.

Try Compiling Whole Projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 try_compile(RESULT_VAR <bindir> <srcdir>
             <projectName> [<targetName>] [CMAKE_FLAGS <flags>...]
             [OUTPUT_VARIABLE <var>])

Try building a project.  The success or failure of the ``try_compile``,
i.e. ``TRUE`` or ``FALSE`` respectively, is returned in ``RESULT_VAR``.

In this form, ``<srcdir>`` should contain a complete CMake project with a
``CMakeLists.txt`` file and all sources.  The ``<bindir>`` and ``<srcdir>``
will not be deleted after this command is run.  Specify ``<targetName>`` to
build a specific target instead of the ``all`` or ``ALL_BUILD`` target.  See
below for the meaning of other options.

Try Compiling Source Files
^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 try_compile(RESULT_VAR <bindir> <srcfile|SOURCES srcfile...>
             [CMAKE_FLAGS <flags>...]
             [COMPILE_DEFINITIONS <defs>...]
             [LINK_LIBRARIES <libs>...]
             [OUTPUT_VARIABLE <var>]
             [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]])

Try building an executable from one or more source files.  The success or
failure of the ``try_compile``, i.e. ``TRUE`` or ``FALSE`` respectively, is
returned in ``RESULT_VAR``.

In this form the user need only supply one or more source files that include a
definition for ``main``.  CMake will create a ``CMakeLists.txt`` file to build
the source(s) as an executable that looks something like this::

 add_definitions(<expanded COMPILE_DEFINITIONS from caller>)
 include_directories(${INCLUDE_DIRECTORIES})
 link_directories(${LINK_DIRECTORIES})
 add_executable(cmTryCompileExec <srcfile>...)
 target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})

The options are:

``CMAKE_FLAGS <flags>...``
  Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to
  the ``cmake`` command-line used to drive the test build.
  The above example shows how values for variables
  ``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES``
  are used.

``COMPILE_DEFINITIONS <defs>...``
  Specify ``-Ddefinition`` arguments to pass to ``add_definitions``
  in the generated test project.

``COPY_FILE <fileName>``
  Copy the linked executable to the given ``<fileName>``.

``COPY_FILE_ERROR <var>``
  Use after ``COPY_FILE`` to capture into variable ``<var>`` any error
  message encountered while trying to copy the file.

``LINK_LIBRARIES <libs>...``
  Specify libraries to be linked in the generated project.
  The list of libraries may refer to system libraries and to
  :ref:`Imported Targets <Imported Targets>` from the calling project.

  If this option is specified, any ``-DLINK_LIBRARIES=...`` value
  given to the ``CMAKE_FLAGS`` option will be ignored.

``OUTPUT_VARIABLE <var>``
  Store the output from the build process the given variable.

In this version all files in ``<bindir>/CMakeFiles/CMakeTmp`` will be
cleaned automatically.  For debugging, ``--debug-trycompile`` can be
passed to ``cmake`` to avoid this clean.  However, multiple sequential
``try_compile`` operations reuse this single output directory.  If you use
``--debug-trycompile``, you can only debug one ``try_compile`` call at a time.
The recommended procedure is to protect all ``try_compile`` calls in your
project by ``if(NOT DEFINED RESULT_VAR)`` logic, configure with cmake
all the way through once, then delete the cache entry associated with
the try_compile call of interest, and then re-run cmake again with
``--debug-trycompile``.

Other Behavior Settings
^^^^^^^^^^^^^^^^^^^^^^^

If set, the following variables are passed in to the generated
try_compile CMakeLists.txt to initialize compile target properties with
default values:

* ``CMAKE_ENABLE_EXPORTS``
* ``CMAKE_LINK_SEARCH_START_STATIC``
* ``CMAKE_LINK_SEARCH_END_STATIC``
* ``CMAKE_POSITION_INDEPENDENT_CODE``

If ``CMP0056`` is set to ``NEW``, then
``CMAKE_EXE_LINKER_FLAGS`` is passed in as well.

The current setting of ``CMP0065`` is set in the generated project.

Set the ``CMAKE_TRY_COMPILE_CONFIGURATION`` variable to choose
a build configuration.

Set the ``CMAKE_TRY_COMPILE_TARGET_TYPE`` variable to specify
the type of target used for the source file signature.

Set the ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`` variable to specify
variables that must be propagated into the test project.  This variable is
meant for use only in toolchain files.

try_run
-------

Try compiling and then running some code.

Try Compiling and Running Source Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR
         bindir srcfile [CMAKE_FLAGS <flags>...]
         [COMPILE_DEFINITIONS <defs>...]
         [LINK_LIBRARIES <libs>...]
         [COMPILE_OUTPUT_VARIABLE <var>]
         [RUN_OUTPUT_VARIABLE <var>]
         [OUTPUT_VARIABLE <var>]
         [ARGS <args>...])

Try compiling a ``<srcfile>``.  Returns ``TRUE`` or ``FALSE`` for success
or failure in ``COMPILE_RESULT_VAR``.  If the compile succeeded, runs the
executable and returns its exit code in ``RUN_RESULT_VAR``.  If the
executable was built, but failed to run, then ``RUN_RESULT_VAR`` will be
set to ``FAILED_TO_RUN``.  See the ``try_compile()`` command for
information on how the test project is constructed to build the source file.

The options are:

``CMAKE_FLAGS <flags>...``
  Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to
  the ``cmake`` command-line used to drive the test build.
  The example in ``try_compile()`` shows how values for variables
  ``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES``
  are used.

``COMPILE_DEFINITIONS <defs>...``
  Specify ``-Ddefinition`` arguments to pass to ``add_definitions``
  in the generated test project.

``COMPILE_OUTPUT_VARIABLE <var>``
  Report the compile step build output in a given variable.

``LINK_LIBRARIES <libs>...``
  Specify libraries to be linked in the generated project.
  The list of libraries may refer to system libraries and to
  :ref:`Imported Targets <Imported Targets>` from the calling project.

  If this option is specified, any ``-DLINK_LIBRARIES=...`` value
  given to the ``CMAKE_FLAGS`` option will be ignored.

``OUTPUT_VARIABLE <var>``
  Report the compile build output and the output from running the executable
  in the given variable.  This option exists for legacy reasons.  Prefer
  ``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead.

``RUN_OUTPUT_VARIABLE <var>``
  Report the output from running the executable in a given variable.

Other Behavior Settings
^^^^^^^^^^^^^^^^^^^^^^^

Set the ``CMAKE_TRY_COMPILE_CONFIGURATION`` variable to choose
a build configuration.

Behavior when Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When cross compiling, the executable compiled in the first step
usually cannot be run on the build host.  The ``try_run`` command checks
the ``CMAKE_CROSSCOMPILING`` variable to detect whether CMake is in
cross-compiling mode.  If that is the case, it will still try to compile
the executable, but it will not try to run the executable unless the
``CMAKE_CROSSCOMPILING_EMULATOR`` variable is set.  Instead it
will create cache variables which must be filled by the user or by
presetting them in some CMake script file to the values the executable
would have produced if it had been run on its actual target platform.
These cache entries are:

``<RUN_RESULT_VAR>``
  Exit code if the executable were to be run on the target platform.

``<RUN_RESULT_VAR>__TRYRUN_OUTPUT``
  Output from stdout and stderr if the executable were to be run on
  the target platform.  This is created only if the
  ``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` option was used.

In order to make cross compiling your project easier, use ``try_run``
only if really required.  If you use ``try_run``, use the
``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` options only if really
required.  Using them will require that when cross-compiling, the cache
variables will have to be set manually to the output of the executable.
You can also "guard" the calls to ``try_run`` with an ``if()``
block checking the ``CMAKE_CROSSCOMPILING`` variable and
provide an easy-to-preset alternative for this case.

unset
-----

Unset a variable, cache variable, or environment variable.

::

 unset(<variable> [CACHE | PARENT_SCOPE])

Removes the specified variable causing it to become undefined.  If
``CACHE`` is present then the variable is removed from the cache instead
of the current scope.

If ``PARENT_SCOPE`` is present then the variable is removed from the scope
above the current scope.  See the same option in the ``set()`` command
for further details.

``<variable>`` can be an environment variable such as:

::

 unset(ENV{LD_LIBRARY_PATH})

in which case the variable will be removed from the current
environment.

variable_watch
--------------

Watch the CMake variable for change.

::

 variable_watch(<variable name> [<command to execute>])

If the specified variable changes, the message will be printed about
the variable being changed.  If the command is specified, the command
will be executed.  The command will receive the following arguments:
COMMAND(<variable> <access> <value> <current list file> <stack>)

while
-----

Evaluate a group of commands while a condition is true

::

 while(condition)
   COMMAND1(ARGS ...)
   COMMAND2(ARGS ...)
   ...
 endwhile(condition)

All commands between while and the matching ``endwhile()`` are recorded
without being invoked.  Once the ``endwhile()`` is evaluated, the
recorded list of commands is invoked as long as the condition is true.  The
condition is evaluated using the same logic as the ``if()`` command.

Deprecated Commands
===================

These commands are available only for compatibility with older
versions of CMake.  Do not use them in new code.

build_name
----------

Disallowed.  See CMake Policy ``CMP0036``.

Use ``${CMAKE_SYSTEM}`` and ``${CMAKE_CXX_COMPILER}`` instead.

::

 build_name(variable)

Sets the specified variable to a string representing the platform and
compiler settings.  These values are now available through the
``CMAKE_SYSTEM`` and
``CMAKE_CXX_COMPILER`` variables.

exec_program
------------

Deprecated.  Use the ``execute_process()`` command instead.

Run an executable program during the processing of the CMakeList.txt
file.

::

 exec_program(Executable [directory in which to run]
              [ARGS <arguments to executable>]
              [OUTPUT_VARIABLE <var>]
              [RETURN_VALUE <var>])

The executable is run in the optionally specified directory.  The
executable can include arguments if it is double quoted, but it is
better to use the optional ``ARGS`` argument to specify arguments to the
program.  This is because cmake will then be able to escape spaces in
the executable path.  An optional argument ``OUTPUT_VARIABLE`` specifies a
variable in which to store the output.  To capture the return value of
the execution, provide a ``RETURN_VALUE``.  If ``OUTPUT_VARIABLE`` is
specified, then no output will go to the stdout/stderr of the console
running cmake.

export_library_dependencies
---------------------------

Disallowed.  See CMake Policy ``CMP0033``.

Use ``install(EXPORT)`` or ``export()`` command.

This command generates an old-style library dependencies file.
Projects requiring CMake 2.6 or later should not use the command.  Use
instead the ``install(EXPORT)`` command to help export targets from an
installation tree and the ``export()`` command to export targets from a
build tree.

The old-style library dependencies file does not take into account
per-configuration names of libraries or the
``LINK_INTERFACE_LIBRARIES`` target property.

::

 export_library_dependencies(<file> [APPEND])

Create a file named ``<file>`` that can be included into a CMake listfile
with the INCLUDE command.  The file will contain a number of SET
commands that will set all the variables needed for library dependency
information.  This should be the last command in the top level
CMakeLists.txt file of the project.  If the ``APPEND`` option is
specified, the SET commands will be appended to the given file instead
of replacing it.

install_files
-------------

Deprecated.  Use the ``install(FILES)`` command instead.

This command has been superceded by the ``install()`` command.  It is
provided for compatibility with older CMake code.  The ``FILES`` form is
directly replaced by the ``FILES`` form of the ``install()``
command.  The regexp form can be expressed more clearly using the ``GLOB``
form of the ``file()`` command.

::

 install_files(<dir> extension file file ...)

Create rules to install the listed files with the given extension into
the given directory.  Only files existing in the current source tree
or its corresponding location in the binary tree may be listed.  If a
file specified already has an extension, that extension will be
removed first.  This is useful for providing lists of source files
such as foo.cxx when you want the corresponding foo.h to be installed.
A typical extension is '.h'.

::

 install_files(<dir> regexp)

Any files in the current source directory that match the regular
expression will be installed.

::

 install_files(<dir> FILES file file ...)

Any files listed after the ``FILES`` keyword will be installed explicitly
from the names given.  Full paths are allowed in this form.

The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable ``CMAKE_INSTALL_PREFIX``.

install_programs
----------------

Deprecated. Use the ``install(PROGRAMS)`` command instead.

This command has been superceded by the ``install()`` command.  It is
provided for compatibility with older CMake code.  The ``FILES`` form is
directly replaced by the ``PROGRAMS`` form of the ``install()``
command.  The regexp form can be expressed more clearly using the ``GLOB``
form of the ``file()`` command.

::

 install_programs(<dir> file1 file2 [file3 ...])
 install_programs(<dir> FILES file1 [file2 ...])

Create rules to install the listed programs into the given directory.
Use the ``FILES`` argument to guarantee that the file list version of the
command will be used even when there is only one argument.

::

 install_programs(<dir> regexp)

In the second form any program in the current source directory that
matches the regular expression will be installed.

This command is intended to install programs that are not built by
cmake, such as shell scripts.  See the ``TARGETS`` form of the
``install()`` command to create installation rules for targets built
by cmake.

The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable ``CMAKE_INSTALL_PREFIX``.

install_targets
---------------

Deprecated. Use the ``install(TARGETS)`` command instead.

This command has been superceded by the ``install()`` command.  It is
provided for compatibility with older CMake code.

::

 install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)

Create rules to install the listed targets into the given directory.
The directory ``<dir>`` is relative to the installation prefix, which is
stored in the variable ``CMAKE_INSTALL_PREFIX``.  If
``RUNTIME_DIRECTORY`` is specified, then on systems with special runtime
files (Windows DLL), the files will be copied to that directory.

load_command
------------

Disallowed.  See CMake Policy ``CMP0031``.

Load a command into a running CMake.

::

 load_command(COMMAND_NAME <loc1> [loc2 ...])

The given locations are searched for a library whose name is
cmCOMMAND_NAME.  If found, it is loaded as a module and the command is
added to the set of available CMake commands.  Usually,
``try_compile()`` is used before this command to compile the
module.  If the command is successfully loaded a variable named

::

 CMAKE_LOADED_COMMAND_<COMMAND_NAME>

will be set to the full path of the module that was loaded.  Otherwise
the variable will not be set.

make_directory
--------------

Deprecated. Use the ``file(MAKE_DIRECTORY)`` command instead.

::

 make_directory(directory)

Creates the specified directory.  Full paths should be given.  Any
parent directories that do not exist will also be created.  Use with
care.

output_required_files
---------------------

Disallowed.  See CMake Policy ``CMP0032``.

Approximate C preprocessor dependency scanning.

This command exists only because ancient CMake versions provided it.
CMake handles preprocessor dependency scanning automatically using a
more advanced scanner.

::

 output_required_files(srcfile outputfile)

Outputs a list of all the source files that are required by the
specified srcfile.  This list is written into outputfile.  This is
similar to writing out the dependencies for srcfile except that it
jumps from .h files into .cxx, .c and .cpp files if possible.

remove
------

Deprecated. Use the ``list(REMOVE_ITEM)`` command instead.

::

 remove(VAR VALUE VALUE ...)

Removes ``VALUE`` from the variable ``VAR``.  This is typically used to
remove entries from a vector (e.g.  semicolon separated list).  ``VALUE``
is expanded.

subdir_depends
--------------

Disallowed.  See CMake Policy ``CMP0029``.

Does nothing.

::

 subdir_depends(subdir dep1 dep2 ...)

Does not do anything.  This command used to help projects order
parallel builds correctly.  This functionality is now automatic.

subdirs
-------

Deprecated. Use the ``add_subdirectory()`` command instead.

Add a list of subdirectories to the build.

::

 subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]
         [PREORDER] )

Add a list of subdirectories to the build.  The ``add_subdirectory()``
command should be used instead of ``subdirs`` although ``subdirs`` will still
work.  This will cause any CMakeLists.txt files in the sub directories
to be processed by CMake.  Any directories after the ``PREORDER`` flag are
traversed first by makefile builds, the ``PREORDER`` flag has no effect on
IDE projects.  Any directories after the ``EXCLUDE_FROM_ALL`` marker will
not be included in the top level makefile or project file.  This is
useful for having CMake create makefiles or projects for a set of
examples in a project.  You would want CMake to generate makefiles or
project files for all the examples at the same time, but you would not
want them to show up in the top level project or be built each time
make is run from the top.

use_mangled_mesa
----------------

Disallowed.  See CMake Policy ``CMP0030``.

Copy mesa headers for use in combination with system GL.

::

 use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)

The path to mesa includes, should contain gl_mangle.h.  The mesa
headers are copied to the specified output directory.  This allows
mangled mesa headers to override other GL headers by being added to
the include directory path earlier.

utility_source
--------------

Disallowed.  See CMake Policy ``CMP0034``.

Specify the source tree of a third-party utility.

::

 utility_source(cache_entry executable_name
                path_to_source [file1 file2 ...])

When a third-party utility's source is included in the distribution,
this command specifies its location and name.  The cache entry will
not be set unless the ``path_to_source`` and all listed files exist.  It
is assumed that the source tree of the utility will have been built
before it is needed.

When cross compiling CMake will print a warning if a ``utility_source()``
command is executed, because in many cases it is used to build an
executable which is executed later on.  This doesn't work when cross
compiling, since the executable can run only on their target platform.
So in this case the cache entry has to be adjusted manually so it
points to an executable which is runnable on the build host.

variable_requires
-----------------

Disallowed.  See CMake Policy ``CMP0035``.

Use the ``if()`` command instead.

Assert satisfaction of an option's required variables.

::

 variable_requires(TEST_VARIABLE RESULT_VARIABLE
                   REQUIRED_VARIABLE1
                   REQUIRED_VARIABLE2 ...)

The first argument (``TEST_VARIABLE``) is the name of the variable to be
tested, if that variable is false nothing else is done.  If
``TEST_VARIABLE`` is true, then the next argument (``RESULT_VARIABLE``)
is a variable that is set to true if all the required variables are set.
The rest of the arguments are variables that must be true or not set
to NOTFOUND to avoid an error.  If any are not true, an error is
reported.

write_file
----------

Deprecated. Use the ``file(WRITE)`` command instead.

::

 write_file(filename "message to write"... [APPEND])

The first argument is the file name, the rest of the arguments are
messages to write.  If the argument ``APPEND`` is specified, then the
message will be appended.

NOTE 1: ``file(WRITE)``  and ``file(APPEND)``  do exactly
the same as this one but add some more functionality.

NOTE 2: When using ``write_file`` the produced file cannot be used as an
input to CMake (CONFIGURE_FILE, source file ...) because it will lead
to an infinite loop.  Use ``configure_file()`` if you want to
generate input files to CMake.

CTest Commands
==============

These commands are available only in ctest scripts.

ctest_build
-----------

Perform the :ref:`CTest Build Step` as a :ref:`Dashboard Client`.

::

 ctest_build([BUILD <build-dir>] [APPEND]
             [CONFIGURATION <config>]
             [FLAGS <flags>]
             [PROJECT_NAME <project-name>]
             [TARGET <target-name>]
             [NUMBER_ERRORS <num-err-var>]
             [NUMBER_WARNINGS <num-warn-var>]
             [RETURN_VALUE <result-var>]
             )

Build the project and store results in ``Build.xml``
for submission with the ``ctest_submit()`` command.

The ``CTEST_BUILD_COMMAND`` variable may be set to explicitly
specify the build command line.  Otherwise the build command line is
computed automatically based on the options given.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  ``CTEST_BINARY_DIRECTORY`` variable is used.

``APPEND``
  Mark results for append to those previously submitted to a
  dashboard server since the last ``ctest_start()`` call.
  Append semantics are defined by the dashboard server in use.

``CONFIGURATION <config>``
  Specify the build configuration (e.g. ``Debug``).  If not
  specified the ``CTEST_BUILD_CONFIGURATION`` variable will be checked.
  Otherwise the ``-C <cfg>`` option given to the ``ctest(1)``
  command will be used, if any.

``FLAGS <flags>``
  Pass additional arguments to the underlying build command.
  If not specified the ``CTEST_BUILD_FLAGS`` variable will be checked.
  This can, e.g., be used to trigger a parallel build using the
  ``-j`` option of make. See the ``ProcessorCount`` module
  for an example.

``PROJECT_NAME <project-name>``
  Set the name of the project to build.  This should correspond
  to the top-level call to the ``project()`` command.
  If not specified the ``CTEST_PROJECT_NAME`` variable will be checked.

``TARGET <target-name>``
  Specify the name of a target to build.  If not specified the
  ``CTEST_BUILD_TARGET`` variable will be checked.  Otherwise the
  default target will be built.  This is the "all" target
  (called ``ALL_BUILD`` in :ref:`Visual Studio Generators`).

``NUMBER_ERRORS <num-err-var>``
  Store the number of build errors detected in the given variable.

``NUMBER_WARNINGS <num-warn-var>``
  Store the number of build warnings detected in the given variable.

``RETURN_VALUE <result-var>``
  Store the return value of the native build tool in the given variable.

``QUIET``
  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.  The summary of warnings / errors,
  as well as the output from the native build tool is unaffected by
  this option.

ctest_configure
---------------

Perform the :ref:`CTest Configure Step` as a :ref:`Dashboard Client`.

::

 ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND]
                 [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET])

Configure the project build tree and record results in ``Configure.xml``
for submission with the ``ctest_submit()`` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  ``CTEST_BINARY_DIRECTORY`` variable is used.

``SOURCE <source-dir>``
  Specify the source directory.  If not given, the
  ``CTEST_SOURCE_DIRECTORY`` variable is used.

``APPEND``
  Mark results for append to those previously submitted to a
  dashboard server since the last ``ctest_start()`` call.
  Append semantics are defined by the dashboard server in use.

``OPTIONS <options>``
  Specify command-line arguments to pass to the configuration tool.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable the return value of the native
  configuration tool.

``QUIET``
  Suppress any CTest-specific non-error messages that would have
  otherwise been printed to the console.  Output from the underlying
  configure command is not affected.

ctest_coverage
--------------

Perform the :ref:`CTest Coverage Step` as a :ref:`Dashboard Client`.

::

 ctest_coverage([BUILD <build-dir>] [APPEND]
                [LABELS <label>...]
                [RETURN_VALUE <result-var>]
                [QUIET]
                )

Collect coverage tool results and stores them in ``Coverage.xml``
for submission with the ``ctest_submit()`` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  ``CTEST_BINARY_DIRECTORY`` variable is used.

``APPEND``
  Mark results for append to those previously submitted to a
  dashboard server since the last ``ctest_start()`` call.
  Append semantics are defined by the dashboard server in use.

``LABELS``
  Filter the coverage report to include only source files labeled
  with at least one of the labels specified.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` if coverage tools
  ran without error and non-zero otherwise.

``QUIET``
  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.  The summary indicating how many
  lines of code were covered is unaffected by this option.

ctest_empty_binary_directory
----------------------------

empties the binary directory

::

 ctest_empty_binary_directory( directory )

Removes a binary directory.  This command will perform some checks
prior to deleting the directory in an attempt to avoid malicious or
accidental directory deletion.

ctest_memcheck
--------------

Perform the :ref:`CTest MemCheck Step` as a :ref:`Dashboard Client`.

::

 ctest_memcheck([BUILD <build-dir>] [APPEND]
                [START <start-number>]
                [END <end-number>]
                [STRIDE <stride-number>]
                [EXCLUDE <exclude-regex>]
                [INCLUDE <include-regex>]
                [EXCLUDE_LABEL <label-exclude-regex>]
                [INCLUDE_LABEL <label-include-regex>]
                [PARALLEL_LEVEL <level>]
                [TEST_LOAD <threshold>]
                [SCHEDULE_RANDOM <ON|OFF>]
                [STOP_TIME <time-of-day>]
                [RETURN_VALUE <result-var>]
                [QUIET]
                )

Run tests with a dynamic analysis tool and store results in
``MemCheck.xml`` for submission with the ``ctest_submit()``
command.

The options are the same as those for the ``ctest_test()`` command.

ctest_read_custom_files
-----------------------

read CTestCustom files.

::

 ctest_read_custom_files( directory ... )

Read all the CTestCustom.ctest or CTestCustom.cmake files from the
given directory.

By default, invoking ``ctest(1)`` without a script will read custom
files from the binary directory.

ctest_run_script
----------------

runs a ctest -S script

::

 ctest_run_script([NEW_PROCESS] script_file_name script_file_name1
             script_file_name2 ... [RETURN_VALUE var])

Runs a script or scripts much like if it was run from ctest -S.  If no
argument is provided then the current script is run using the current
settings of the variables.  If ``NEW_PROCESS`` is specified then each
script will be run in a separate process.If ``RETURN_VALUE`` is specified
the return value of the last script run will be put into ``var``.

ctest_sleep
-----------

sleeps for some amount of time

::

 ctest_sleep(<seconds>)

Sleep for given number of seconds.

::

 ctest_sleep(<time1> <duration> <time2>)

Sleep for t=(time1 + duration - time2) seconds if t > 0.

ctest_start
-----------

Starts the testing for a given model

::

 ctest_start(Model [TRACK <track>] [APPEND] [source [binary]] [QUIET])

Starts the testing for a given model.  The command should be called
after the binary directory is initialized.  If the 'source' and
'binary' directory are not specified, it reads the
``CTEST_SOURCE_DIRECTORY`` and ``CTEST_BINARY_DIRECTORY``.
If the track is
specified, the submissions will go to the specified track.  If APPEND
is used, the existing TAG is used rather than creating a new one based
on the current time stamp.  If ``QUIET`` is used, CTest will suppress any
non-error messages that it otherwise would have printed to the console.

If the ``CTEST_CHECKOUT_COMMAND`` variable
(or the ``CTEST_CVS_CHECKOUT`` variable)
is set, its content is treated as command-line.  The command is
invoked with the current working directory set to the parent of the source
directory, even if the source directory already exists.  This can be used
to create the source tree from a version control repository.

ctest_submit
------------

Perform the :ref:`CTest Submit Step` as a :ref:`Dashboard Client`.

::

 ctest_submit([PARTS <part>...] [FILES <file>...]
              [RETRY_COUNT <count>]
              [RETRY_DELAY <delay>]
              [RETURN_VALUE <result-var>]
              [QUIET]
              )

Submit results to a dashboard server.
By default all available parts are submitted.

The options are:

``PARTS <part>...``
  Specify a subset of parts to submit.  Valid part names are::

 Start      = nothing
 Update     = ctest_update results, in Update.xml
 Configure  = ctest_configure results, in Configure.xml
 Build      = ctest_build results, in Build.xml
 Test       = ctest_test results, in Test.xml
 Coverage   = ctest_coverage results, in Coverage.xml
 MemCheck   = ctest_memcheck results, in DynamicAnalysis.xml
 Notes      = Files listed by CTEST_NOTES_FILES, in Notes.xml
 ExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES
 Upload     = Files prepared for upload by ctest_upload(), in Upload.xml
 Submit     = nothing

``FILES <file>...``
  Specify an explicit list of specific files to be submitted.
  Each individual file must exist at the time of the call.

``RETRY_COUNT <count>``
  Specify how many times to retry a timed-out submission.

``RETRY_DELAY <delay>``
  Specify how long (in seconds) to wait after a timed-out submission
  before attempting to re-submit.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` for success and
  non-zero on failure.

``QUIET``
  Suppress all non-error messages that would have otherwise been
  printed to the console.

Submit to CDash Upload API
^^^^^^^^^^^^^^^^^^^^^^^^^^

::

 ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>])

This second signature is used to upload files to CDash via the CDash
file upload API. The api first sends a request to upload to CDash along
with a content hash of the file. If CDash does not already have the file,
then it is uploaded. Along with the file, a CDash type string is specified
to tell CDash which handler to use to process the data.

ctest_test
----------

Perform the :ref:`CTest Test Step` as a :ref:`Dashboard Client`.

::

 ctest_test([BUILD <build-dir>] [APPEND]
            [START <start-number>]
            [END <end-number>]
            [STRIDE <stride-number>]
            [EXCLUDE <exclude-regex>]
            [INCLUDE <include-regex>]
            [EXCLUDE_LABEL <label-exclude-regex>]
            [INCLUDE_LABEL <label-include-regex>]
            [PARALLEL_LEVEL <level>]
            [TEST_LOAD <threshold>]
            [SCHEDULE_RANDOM <ON|OFF>]
            [STOP_TIME <time-of-day>]
            [RETURN_VALUE <result-var>]
            [QUIET]
            )

Run tests in the project build tree and store results in
``Test.xml`` for submission with the ``ctest_submit()`` command.

The options are:

``BUILD <build-dir>``
  Specify the top-level build directory.  If not given, the
  ``CTEST_BINARY_DIRECTORY`` variable is used.

``APPEND``
  Mark results for append to those previously submitted to a
  dashboard server since the last ``ctest_start()`` call.
  Append semantics are defined by the dashboard server in use.

``START <start-number>``
  Specify the beginning of a range of test numbers.

``END <end-number>``
  Specify the end of a range of test numbers.

``STRIDE <stride-number>``
  Specify the stride by which to step across a range of test numbers.

``EXCLUDE <exclude-regex>``
  Specify a regular expression matching test names to exclude.

``INCLUDE <include-regex>``
  Specify a regular expression matching test names to include.
  Tests not matching this expression are excluded.

``EXCLUDE_LABEL <label-exclude-regex>``
  Specify a regular expression matching test labels to exclude.

``INCLUDE_LABEL <label-include-regex>``
  Specify a regular expression matching test labels to include.
  Tests not matching this expression are excluded.

``PARALLEL_LEVEL <level>``
  Specify a positive number representing the number of tests to
  be run in parallel.

``TEST_LOAD <threshold>``
  While running tests in parallel, try not to start tests when they
  may cause the CPU load to pass above a given threshold.  If not
  specified the ``CTEST_TEST_LOAD`` variable will be checked,
  and then the ``--test-load`` command-line argument to ``ctest(1)``.
  See also the ``TestLoad`` setting in the :ref:`CTest Test Step`.

``SCHEDULE_RANDOM <ON|OFF>``
  Launch tests in a random order.  This may be useful for detecting
  implicit test dependencies.

``STOP_TIME <time-of-day>``
  Specify a time of day at which the tests should all stop running.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable ``0`` if all tests passed.
  Store non-zero if anything went wrong.

``QUIET``
  Suppress any CTest-specific non-error messages that would have otherwise
  been printed to the console.  Output from the underlying test command is not
  affected.  Summary info detailing the percentage of passing tests is also
  unaffected by the ``QUIET`` option.

See also the ``CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE``
and ``CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE`` variables.

ctest_update
------------

Perform the :ref:`CTest Update Step` as a :ref:`Dashboard Client`.

::

 ctest_update([SOURCE <source-dir>] [RETURN_VALUE <result-var>] [QUIET])

Update the source tree from version control and record results in
``Update.xml`` for submission with the ``ctest_submit()`` command.

The options are:

``SOURCE <source-dir>``
  Specify the source directory.  If not given, the
  ``CTEST_SOURCE_DIRECTORY`` variable is used.

``RETURN_VALUE <result-var>``
  Store in the ``<result-var>`` variable the number of files
  updated or ``-1`` on error.

``QUIET``
  Tell CTest to suppress most non-error messages that it would
  have otherwise printed to the console.  CTest will still report
  the new revision of the repository and any conflicting files
  that were found.

The update always follows the version control branch currently checked
out in the source directory.  See the :ref:`CTest Update Step`
documentation for more information.

ctest_upload
------------

Upload files to a dashboard server as a :ref:`Dashboard Client`.

::

 ctest_upload(FILES <file>... [QUIET])

The options are:

``FILES <file>...``
  Specify a list of files to be sent along with the build results to the
  dashboard server.

``QUIET``
  Suppress any CTest-specific non-error output that would have been
  printed to the console otherwise.

cmake-compile-features(7)
*************************

Introduction
============

Project source code may depend on, or be conditional on, the availability
of certain features of the compiler.  There are three use-cases which arise:
`Compile Feature Requirements`_, `Optional Compile Features`_
and `Conditional Compilation Options`_.

While features are typically specified in programming language standards,
CMake provides a primary user interface based on granular handling of
the features, not the language standard that introduced the feature.

The ``CMAKE_C_KNOWN_FEATURES`` and
``CMAKE_CXX_KNOWN_FEATURES`` global properties contain all the
features known to CMake, regardless of compiler support for the feature.
The ``CMAKE_C_COMPILE_FEATURES`` and
``CMAKE_CXX_COMPILE_FEATURES`` variables contain all features
CMake knows are known to the compiler, regardless of language standard
or compile flags needed to use them.

Features known to CMake are named mostly following the same convention
as the Clang feature test macros.  The are some exceptions, such as
CMake using ``cxx_final`` and ``cxx_override`` instead of the single
``cxx_override_control`` used by Clang.

Compile Feature Requirements
============================

Compile feature requirements may be specified with the
``target_compile_features()`` command.  For example, if a target must
be compiled with compiler support for the
``cxx_constexpr`` feature:

 add_library(mylib requires_constexpr.cpp)
 target_compile_features(mylib PRIVATE cxx_constexpr)

In processing the requirement for the ``cxx_constexpr`` feature,
``cmake(1)`` will ensure that the in-use C++ compiler is capable
of the feature, and will add any necessary flags such as ``-std=gnu++11``
to the compile lines of C++ files in the ``mylib`` target.  A
``FATAL_ERROR`` is issued if the compiler is not capable of the
feature.

The exact compile flags and language standard are deliberately not part
of the user interface for this use-case.  CMake will compute the
appropriate compile flags to use by considering the features specified
for each target.

Such compile flags are added even if the compiler supports the
particular feature without the flag. For example, the GNU compiler
supports variadic templates (with a warning) even if ``-std=gnu++98`` is
used.  CMake adds the ``-std=gnu++11`` flag if ``cxx_variadic_templates``
is specified as a requirement.

In the above example, ``mylib`` requires ``cxx_constexpr`` when it
is built itself, but consumers of ``mylib`` are not required to use a
compiler which supports ``cxx_constexpr``.  If the interface of
``mylib`` does require the ``cxx_constexpr`` feature (or any other
known feature), that may be specified with the ``PUBLIC`` or
``INTERFACE`` signatures of ``target_compile_features()``:

 add_library(mylib requires_constexpr.cpp)
 # cxx_constexpr is a usage-requirement
 target_compile_features(mylib PUBLIC cxx_constexpr)

 # main.cpp will be compiled with -std=gnu++11 on GNU for cxx_constexpr.
 add_executable(myexe main.cpp)
 target_link_libraries(myexe mylib)

Feature requirements are evaluated transitively by consuming the link
implementation.  See ``cmake-buildsystem(7)`` for more on
transitive behavior of build properties and usage requirements.

Because the ``CXX_EXTENSIONS`` target property is ``ON`` by default,
CMake uses extended variants of language dialects by default, such as
``-std=gnu++11`` instead of ``-std=c++11``.  That target property may be
set to ``OFF`` to use the non-extended variant of the dialect flag.  Note
that because most compilers enable extensions by default, this could
expose cross-platform bugs in user code or in the headers of third-party
dependencies.

Optional Compile Features
=========================

Compile features may be preferred if available, without creating a hard
requirement.  For example, a library may provides alternative
implementations depending on whether the ``cxx_variadic_templates``
feature is available:

 #if Foo_COMPILER_CXX_VARIADIC_TEMPLATES
 template<int I, int... Is>
 struct Interface;

 template<int I>
 struct Interface<I>
 {
   static int accumulate()
   {
     return I;
   }
 };

 template<int I, int... Is>
 struct Interface
 {
   static int accumulate()
   {
     return I + Interface<Is...>::accumulate();
   }
 };
 #else
 template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>
 struct Interface
 {
   static int accumulate() { return I1 + I2 + I3 + I4; }
 };
 #endif

Such an interface depends on using the correct preprocessor defines for the
compiler features.  CMake can generate a header file containing such
defines using the ``WriteCompilerDetectionHeader`` module.  The
module contains the ``write_compiler_detection_header`` function which
accepts parameters to control the content of the generated header file:

 write_compiler_detection_header(
   FILE "${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h"
   PREFIX Foo
   COMPILERS GNU
   FEATURES
     cxx_variadic_templates
 )

Such a header file may be used internally in the source code of a project,
and it may be installed and used in the interface of library code.

For each feature listed in ``FEATURES``, a preprocessor definition
is created in the header file, and defined to either ``1`` or ``0``.

Additionally, some features call for additional defines, such as the
``cxx_final`` and ``cxx_override`` features. Rather than being used in
``#ifdef`` code, the ``final`` keyword is abstracted by a symbol
which is defined to either ``final``, a compiler-specific equivalent, or
to empty.  That way, C++ code can be written to unconditionally use the
symbol, and compiler support determines what it is expanded to:

 struct Interface {
   virtual void Execute() = 0;
 };

 struct Concrete Foo_FINAL {
   void Execute() Foo_OVERRIDE;
 };

In this case, ``Foo_FINAL`` will expand to ``final`` if the
compiler supports the keyword, or to empty otherwise.

In this use-case, the CMake code will wish to enable a particular language
standard if available from the compiler. The ``CXX_STANDARD``
target property variable may be set to the desired language standard
for a particular target, and the ``CMAKE_CXX_STANDARD`` may be
set to influence all following targets:

 write_compiler_detection_header(
   FILE "${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h"
   PREFIX Foo
   COMPILERS GNU
   FEATURES
     cxx_final cxx_override
 )

 # Includes foo_compiler_detection.h and uses the Foo_FINAL symbol
 # which will expand to 'final' if the compiler supports the requested
 # CXX_STANDARD.
 add_library(foo foo.cpp)
 set_property(TARGET foo PROPERTY CXX_STANDARD 11)

 # Includes foo_compiler_detection.h and uses the Foo_FINAL symbol
 # which will expand to 'final' if the compiler supports the feature,
 # even though CXX_STANDARD is not set explicitly.  The requirement of
 # cxx_constexpr causes CMake to set CXX_STANDARD internally, which
 # affects the compile flags.
 add_library(foo_impl foo_impl.cpp)
 target_compile_features(foo_impl PRIVATE cxx_constexpr)

The ``write_compiler_detection_header`` function also creates compatibility
code for other features which have standard equivalents.  For example, the
``cxx_static_assert`` feature is emulated with a template and abstracted
via the ``<PREFIX>_STATIC_ASSERT`` and ``<PREFIX>_STATIC_ASSERT_MSG``
function-macros.

Conditional Compilation Options
===============================

Libraries may provide entirely different header files depending on
requested compiler features.

For example, a header at ``with_variadics/interface.h`` may contain:

 template<int I, int... Is>
 struct Interface;

 template<int I>
 struct Interface<I>
 {
   static int accumulate()
   {
     return I;
   }
 };

 template<int I, int... Is>
 struct Interface
 {
   static int accumulate()
   {
     return I + Interface<Is...>::accumulate();
   }
 };

while a header at ``no_variadics/interface.h`` may contain:

 template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>
 struct Interface
 {
   static int accumulate() { return I1 + I2 + I3 + I4; }
 };

It would be possible to write a abstraction ``interface.h`` header
containing something like:

 #include "foo_compiler_detection.h"
 #if Foo_COMPILER_CXX_VARIADIC_TEMPLATES
 #include "with_variadics/interface.h"
 #else
 #include "no_variadics/interface.h"
 #endif

However this could be unmaintainable if there are many files to
abstract. What is needed is to use alternative include directories
depending on the compiler capabilities.

CMake provides a ``COMPILE_FEATURES``
``generator expression`` to implement
such conditions.  This may be used with the build-property commands such as
``target_include_directories()`` and ``target_link_libraries()``
to set the appropriate ``buildsystem``
properties:

 add_library(foo INTERFACE)
 set(with_variadics ${CMAKE_CURRENT_SOURCE_DIR}/with_variadics)
 set(no_variadics ${CMAKE_CURRENT_SOURCE_DIR}/no_variadics)
 target_include_directories(foo
   INTERFACE
     "$<$<COMPILE_FEATURES:cxx_variadic_templates>:${with_variadics}>"
     "$<$<NOT:$<COMPILE_FEATURES:cxx_variadic_templates>>:${no_variadics}>"
   )

Consuming code then simply links to the ``foo`` target as usual and uses
the feature-appropriate include directory

 add_executable(consumer_with consumer_with.cpp)
 target_link_libraries(consumer_with foo)
 set_property(TARGET consumer_with CXX_STANDARD 11)

 add_executable(consumer_no consumer_no.cpp)
 target_link_libraries(consumer_no foo)

Supported Compilers
===================

CMake is currently aware of the ``language standards``
and ``compile features`` available from
the following ``compiler ids`` as of the
versions specified for each:

* ``AppleClang``: Apple Clang for Xcode versions 4.4 though 6.2.
* ``Clang``: Clang compiler versions 2.9 through 3.4.
* ``GNU``: GNU compiler versions 4.4 through 5.0.
* ``MSVC``: Microsoft Visual Studio versions 2010 through 2015.
* ``SunPro``: Oracle SolarisStudio version 12.4.
* ``Intel``: Intel compiler versions 12.1 through 16.0 on UNIX platforms.

cmake-developer(7)
******************

Introduction
============

This manual is intended for reference by developers modifying the CMake
source tree itself.


Permitted C++ Subset
====================

CMake is required to build with ancient C++ compilers and standard library
implementations.  Some common C++ constructs may not be used in CMake in order
to build with such toolchains.

std::auto_ptr
-------------

Some implementations have a ``std::auto_ptr`` which can not be used as a
return value from a function. ``std::auto_ptr`` may not be used. Use
``cmsys::auto_ptr`` instead.

size_t
------

Various implementations have differing implementation of ``size_t``.  When
assigning the result of ``.size()`` on a container for example, the result
should be assigned to ``size_t`` not to ``std::size_t``, ``unsigned int`` or
similar types.

Adding Compile Features
=======================

CMake reports an error if a compiler whose features are known does not report
support for a particular requested feature.  A compiler is considered to have
known features if it reports support for at least one feature.

When adding a new compile feature to CMake, it is therefore necessary to list
support for the feature for all CompilerIds which already have one or more
feature supported, if the new feature is available for any version of the
compiler.

When adding the first supported feature to a particular CompilerId, it is
necessary to list support for all features known to cmake (See
``CMAKE_C_COMPILE_FEATURES`` and
``CMAKE_CXX_COMPILE_FEATURES`` as appropriate), where available for
the compiler.  Ensure that the ``CMAKE_<LANG>_STANDARD_DEFAULT`` is set to
the computed internal variable ``CMAKE_<LANG>_STANDARD_COMPUTED_DEFAULT``
for compiler versions which should be supported.

It is sensible to record the features for the most recent version of a
particular CompilerId first, and then work backwards.  It is sensible to
try to create a continuous range of versions of feature releases of the
compiler.  Gaps in the range indicate incorrect features recorded for
intermediate releases.

Generally, features are made available for a particular version if the
compiler vendor documents availability of the feature with that
version.  Note that sometimes partially implemented features appear to
be functional in previous releases (such as ``cxx_constexpr`` in GNU 4.6,
though availability is documented in GNU 4.7), and sometimes compiler vendors
document availability of features, though supporting infrastructure is
not available (such as ``__has_feature(cxx_generic_lambdas)`` indicating
non-availability in Clang 3.4, though it is documented as available, and
fixed in Clang 3.5).  Similar cases for other compilers and versions
need to be investigated when extending CMake to support them.

When a vendor releases a new version of a known compiler which supports
a previously unsupported feature, and there are already known features for
that compiler, the feature should be listed as supported in CMake for
that version of the compiler as soon as reasonably possible.

Standard-specific/compiler-specific variables such
``CMAKE_CXX98_COMPILE_FEATURES`` are deliberately not documented.  They
only exist for the compiler-specific implementation of adding the ``-std``
compile flag for compilers which need that.

Help
====

The ``Help`` directory contains CMake help manual source files.
They are written using the `reStructuredText`_ markup syntax and
processed by `Sphinx`_ to generate the CMake help manuals.

Markup Constructs
-----------------

In addition to using Sphinx to generate the CMake help manuals, we
also use a C++-implemented document processor to print documents for
the ``--help-*`` command-line help options.  It supports a subset of
reStructuredText markup.  When authoring or modifying documents,
please verify that the command-line help looks good in addition to the
Sphinx-generated html and man pages.

The command-line help processor supports the following constructs
defined by reStructuredText, Sphinx, and a CMake extension to Sphinx.

CMake Domain directives
 Directives defined in the `CMake Domain`_ for defining CMake
 documentation objects are printed in command-line help output as
 if the lines were normal paragraph text with interpretation.

CMake Domain interpreted text roles
 Interpreted text roles defined in the `CMake Domain`_ for
 cross-referencing CMake documentation objects are replaced by their
 link text in command-line help output.  Other roles are printed
 literally and not processed.

``code-block`` directive
 Add a literal code block without interpretation.  The command-line
 help processor prints the block content without the leading directive
 line and with common indentation replaced by one space.

``include`` directive
 Include another document source file.  The command-line help
 processor prints the included document inline with the referencing
 document.

literal block after ``::``
 A paragraph ending in ``::`` followed by a blank line treats
 the following indented block as literal text without interpretation.
 The command-line help processor prints the ``::`` literally and
 prints the block content with common indentation replaced by one
 space.

``note`` directive
 Call out a side note.  The command-line help processor prints the
 block content as if the lines were normal paragraph text with
 interpretation.

``parsed-literal`` directive
 Add a literal block with markup interpretation.  The command-line
 help processor prints the block content without the leading
 directive line and with common indentation replaced by one space.

``productionlist`` directive
 Render context-free grammar productions.  The command-line help
 processor prints the block content as if the lines were normal
 paragraph text with interpretation.

``replace`` directive
 Define a ``|substitution|`` replacement.
 The command-line help processor requires a substitution replacement
 to be defined before it is referenced.

``|substitution|`` reference
 Reference a substitution replacement previously defined by
 the ``replace`` directive.  The command-line help processor
 performs the substitution and replaces all newlines in the
 replacement text with spaces.

``toctree`` directive
 Include other document sources in the Table-of-Contents
 document tree.  The command-line help processor prints
 the referenced documents inline as part of the referencing
 document.

Inline markup constructs not listed above are printed literally in the
command-line help output.  We prefer to use inline markup constructs that
look correct in source form, so avoid use of \\-escapes in favor of inline
literals when possible.

Explicit markup blocks not matching directives listed above are removed from
command-line help output.  Do not use them, except for plain ``..`` comments
that are removed by Sphinx too.

Note that nested indentation of blocks is not recognized by the
command-line help processor.  Therefore:

* Explicit markup blocks are recognized only when not indented
  inside other blocks.

* Literal blocks after paragraphs ending in ``::`` but not
  at the top indentation level may consume all indented lines
  following them.

Try to avoid these cases in practice.

CMake Domain
------------

CMake adds a `Sphinx Domain`_ called ``cmake``, also called the
"CMake Domain".  It defines several "object" types for CMake
documentation:

``command``
 A CMake language command.

``generator``
 A CMake native build system generator.
 See the ``cmake(1)`` command-line tool's ``-G`` option.

``manual``
 A CMake manual page, like this ``cmake-developer(7)`` manual.

``module``
 A CMake module.
 See the ``cmake-modules(7)`` manual
 and the ``include()`` command.

``policy``
 A CMake policy.
 See the ``cmake-policies(7)`` manual
 and the ``cmake_policy()`` command.

``prop_cache, prop_dir, prop_gbl, prop_sf, prop_inst, prop_test, prop_tgt``
 A CMake cache, directory, global, source file, installed file, test,
 or target property, respectively.  See the ``cmake-properties(7)``
 manual and the ``set_property()`` command.

``variable``
 A CMake language variable.
 See the ``cmake-variables(7)`` manual
 and the ``set()`` command.

Documentation objects in the CMake Domain come from two sources.
First, the CMake extension to Sphinx transforms every document named
with the form ``Help/<type>/<file-name>.rst`` to a domain object with
type ``<type>``.  The object name is extracted from the document title,
which is expected to be of the form::

 <object-name>
 -------------

and to appear at or near the top of the ``.rst`` file before any other
lines starting in a letter, digit, or ``<``.  If no such title appears
literally in the ``.rst`` file, the object name is the ``<file-name>``.
If a title does appear, it is expected that ``<file-name>`` is equal
to ``<object-name>`` with any ``<`` and ``>`` characters removed.

Second, the CMake Domain provides directives to define objects inside
other documents:

 .. command:: <command-name>

  This indented block documents <command-name>.

 .. variable:: <variable-name>

  This indented block documents <variable-name>.

Object types for which no directive is available must be defined using
the first approach above.

Cross-References
----------------

Sphinx uses reStructuredText interpreted text roles to provide
cross-reference syntax.  The `CMake Domain`_ provides for each
domain object type a role of the same name to cross-reference it.
CMake Domain roles are inline markup of the forms::

 :type:`name`
 :type:`text <name>`

where ``type`` is the domain object type and ``name`` is the
domain object name.  In the first form the link text will be
``name`` (or ``name()`` if the type is ``command``) and in
the second form the link text will be the explicit ``text``.
For example, the code:

 * The :command:`list` command.
 * The :command:`list(APPEND)` sub-command.
 * The :command:`list() command <list>`.
 * The :command:`list(APPEND) sub-command <list>`.
 * The :variable:`CMAKE_VERSION` variable.
 * The :prop_tgt:`OUTPUT_NAME_<CONFIG>` target property.

produces:

* The ``list()`` command.
* The ``list(APPEND)`` sub-command.
* The ``list() command``.
* The ``list(APPEND) sub-command``.
* The ``CMAKE_VERSION`` variable.
* The ``OUTPUT_NAME_<CONFIG>`` target property.

Note that CMake Domain roles differ from Sphinx and reStructuredText
convention in that the form ``a<b>``, without a space preceding ``<``,
is interpreted as a name instead of link text with an explicit target.
This is necessary because we use ``<placeholders>`` frequently in
object names like ``OUTPUT_NAME_<CONFIG>``.  The form ``a <b>``,
with a space preceding ``<``, is still interpreted as a link text
with an explicit target.

Style
-----

Style: Section Headers
^^^^^^^^^^^^^^^^^^^^^^

When marking section titles, make the section decoration line as long as
the title text.  Use only a line below the title, not above. For
example:

 Title Text
 ----------

Capitalize the first letter of each non-minor word in the title.

The section header underline character hierarchy is

* ``#``: Manual group (part) in the master document
* ``*``: Manual (chapter) title
* ``=``: Section within a manual
* ``-``: Subsection or `CMake Domain`_ object document title
* ``^``: Subsubsection or `CMake Domain`_ object document section
* ``"``: Paragraph or `CMake Domain`_ object document subsection

Style: Whitespace
^^^^^^^^^^^^^^^^^

Use two spaces for indentation.  Use two spaces between sentences in
prose.

Style: Line Length
^^^^^^^^^^^^^^^^^^

Prefer to restrict the width of lines to 75-80 columns.  This is not a
hard restriction, but writing new paragraphs wrapped at 75 columns
allows space for adding minor content without significant re-wrapping of
content.

Style: Prose
^^^^^^^^^^^^

Use American English spellings in prose.

Style: Starting Literal Blocks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Prefer to mark the start of literal blocks with ``::`` at the end of
the preceding paragraph. In cases where the following block gets
a ``code-block`` marker, put a single ``:`` at the end of the preceding
paragraph.

Style: CMake Command Signatures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Command signatures should be marked up as plain literal blocks, not as
cmake ``code-blocks``.

Signatures are separated from preceding content by a section header.
That is, use:

 ... preceding paragraph.

 Normal Libraries
 ^^^^^^^^^^^^^^^^

 ::

   add_library(<lib> ...)

 This signature is used for ...

Signatures of commands should wrap optional parts with square brackets,
and should mark list of optional arguments with an ellipsis (``...``).
Elements of the signature which are specified by the user should be
specified with angle brackets, and may be referred to in prose using
``inline-literal`` syntax.

Style: Boolean Constants
^^^^^^^^^^^^^^^^^^^^^^^^

Use "``OFF``" and "``ON``" for boolean values which can be modified by
the user, such as ``POSITION_INDEPENDENT_CODE``. Such properties
may be "enabled" and "disabled". Use "``True``" and "``False``" for
inherent values which can't be modified after being set, such as the
``IMPORTED`` property of a build target.

Style: Inline Literals
^^^^^^^^^^^^^^^^^^^^^^

Mark up references to keywords in signatures, file names, and other
technical terms with ``inline-literal`` syntax, for example:

 If ``WIN32`` is used with :command:`add_executable`, the
 :prop_tgt:`WIN32_EXECUTABLE` target property is enabled. That command
 creates the file ``<name>.exe`` on Windows.

Style: Cross-References
^^^^^^^^^^^^^^^^^^^^^^^

Mark up linkable references as links, including repeats.
An alternative, which is used by wikipedia
(`<http://en.wikipedia.org/wiki/WP:REPEATLINK>`_),
is to link to a reference only once per article. That style is not used
in CMake documentation.

Style: Referencing CMake Concepts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If referring to a concept which corresponds to a property, and that
concept is described in a high-level manual, prefer to link to the
manual section instead of the property. For example:

 This command creates an :ref:`Imported Target <Imported Targets>`.

instead of:

 This command creates an :prop_tgt:`IMPORTED` target.

The latter should be used only when referring specifically to the
property.

References to manual sections are not automatically created by creating
a section, but code such as:

 .. _`Imported Targets`:

creates a suitable anchor.  Use an anchor name which matches the name
of the corresponding section.  Refer to the anchor using a
cross-reference with specified text.

Imported Targets need the ``IMPORTED`` term marked up with care in
particular because the term may refer to a command keyword
(``IMPORTED``), a target property (``IMPORTED``), or a
concept (:ref:`Imported Targets`).

Where a property, command or variable is related conceptually to others,
by for example, being related to the buildsystem description, generator
expressions or Qt, each relevant property, command or variable should
link to the primary manual, which provides high-level information.  Only
particular information relating to the command should be in the
documentation of the command.

Style: Referencing CMake Domain Objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When referring to `CMake Domain`_ objects such as properties, variables,
commands etc, prefer to link to the target object and follow that with
the type of object it is.  For example:

 Set the :prop_tgt:`AUTOMOC` target property to ``ON``.

Instead of

 Set the target property :prop_tgt:`AUTOMOC` to ``ON``.

The ``policy`` directive is an exception, and the type us usually
referred to before the link:

 If policy :prop_tgt:`CMP0022` is set to ``NEW`` the behavior is ...

However, markup self-references with ``inline-literal`` syntax.
For example, within the ``add_executable()`` command
documentation, use

 ``add_executable``

not

 :command:`add_executable`

which is used elsewhere.

Modules
=======

The ``Modules`` directory contains CMake-language ``.cmake`` module files.

Module Documentation
--------------------

To document CMake module ``Modules/<module-name>.cmake``, modify
``Help/manual/cmake-modules.7.rst`` to reference the module in the
``toctree`` directive, in sorted order, as::

 /module/<module-name>

Then add the module document file ``Help/module/<module-name>.rst``
containing just the line::

 .. cmake-module:: ../../Modules/<module-name>.cmake

The ``cmake-module`` directive will scan the module file to extract
reStructuredText markup from comment blocks that start in ``.rst:``.
Add to the top of ``Modules/<module-name>.cmake`` a
:ref:`Line Comment` block of the form:

 #.rst:
 # <module-name>
 # -------------
 #
 # <reStructuredText documentation of module>

or a :ref:`Bracket Comment` of the form:

 #[[.rst:
 <module-name>
 -------------

 <reStructuredText documentation of module>
 #]]

Any number of ``=`` may be used in the opening and closing brackets
as long as they match.  Content on the line containing the closing
bracket is excluded if and only if the line starts in ``#``.

Additional such ``.rst:`` comments may appear anywhere in the module file.
All such comments must start with ``#`` in the first column.

For example, a ``Modules/Findxxx.cmake`` module may contain:

 #.rst:
 # FindXxx
 # -------
 #
 # This is a cool module.
 # This module does really cool stuff.
 # It can do even more than you think.
 #
 # It even needs two paragraphs to tell you about it.
 # And it defines the following variables:
 #
 # * VAR_COOL: this is great isn't it?
 # * VAR_REALLY_COOL: cool right?

 <code>

 #[========================================[.rst:
 .. command:: xxx_do_something

  This command does something for Xxx::

   xxx_do_something(some arguments)
 #]========================================]
 macro(xxx_do_something)
   <code>
 endmacro()

After the top documentation block, leave a *BLANK* line, and then add a
copyright and licence notice block like this one (change only the year
range and name)

 #=============================================================================
 # Copyright 2009-2011 Your Name
 #
 # Distributed under the OSI-approved BSD License (the "License");
 # see accompanying file Copyright.txt for details.
 #
 # This software is distributed WITHOUT ANY WARRANTY; without even the
 # implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 # See the License for more information.
 #=============================================================================
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)

Test the documentation formatting by running
``cmake --help-module <module-name>``, and also by enabling the
``SPHINX_HTML`` and ``SPHINX_MAN`` options to build the documentation.
Edit the comments until generated documentation looks satisfactory.  To
have a .cmake file in this directory NOT show up in the modules
documentation, simply leave out the ``Help/module/<module-name>.rst``
file and the ``Help/manual/cmake-modules.7.rst`` toctree entry.

Find Modules
------------

A "find module" is a ``Modules/Find<package>.cmake`` file to be loaded
by the ``find_package()`` command when invoked for ``<package>``.

The primary task of a find module is to determine whether a package
exists on the system, set the ``<package>_FOUND`` variable to reflect
this and provide any variables, macros and imported targets required to
use the package.  A find module is useful in cases where an upstream
library does not provide a
:ref:`config file package <Config File Packages>`.

The traditional approach is to use variables for everything, including
libraries and executables: see the `Standard Variable Names`_ section
below.  This is what most of the existing find modules provided by CMake
do.

The more modern approach is to behave as much like
:ref:`config file packages <Config File Packages>` files as possible, by
providing :ref:`imported target <Imported targets>`.  This has the advantage
of propagating :ref:`Target Usage Requirements` to consumers.

In either case (or even when providing both variables and imported
targets), find modules should provide backwards compatibility with old
versions that had the same name.

A FindFoo.cmake module will typically be loaded by the command::

 find_package(Foo [major[.minor[.patch[.tweak]]]]
              [EXACT] [QUIET] [REQUIRED]
              [[COMPONENTS] [components...]]
              [OPTIONAL_COMPONENTS components...]
              [NO_POLICY_SCOPE])

See the ``find_package()`` documentation for details on what
variables are set for the find module.  Most of these are dealt with by
using ``FindPackageHandleStandardArgs``.

Briefly, the module should only locate versions of the package
compatible with the requested version, as described by the
``Foo_FIND_VERSION`` family of variables.  If ``Foo_FIND_QUIETLY`` is
set to true, it should avoid printing messages, including anything
complaining about the package not being found.  If ``Foo_FIND_REQUIRED``
is set to true, the module should issue a ``FATAL_ERROR`` if the package
cannot be found.  If neither are set to true, it should print a
non-fatal message if it cannot find the package.

Packages that find multiple semi-independent parts (like bundles of
libraries) should search for the components listed in
``Foo_FIND_COMPONENTS`` if it is set , and only set ``Foo_FOUND`` to
true if for each searched-for component ``<c>`` that was not found,
``Foo_FIND_REQUIRED_<c>`` is not set to true.  The ``HANDLE_COMPONENTS``
argument of ``find_package_handle_standard_args()`` can be used to
implement this.

If ``Foo_FIND_COMPONENTS`` is not set, which modules are searched for
and required is up to the find module, but should be documented.

For internal implementation, it is a generally accepted convention that
variables starting with underscore are for temporary use only.

Like all modules, find modules should be properly documented.  To add a
module to the CMake documentation, follow the steps in the `Module
Documentation`_ section above.



Standard Variable Names
^^^^^^^^^^^^^^^^^^^^^^^

For a ``FindXxx.cmake`` module that takes the approach of setting
variables (either instead of or in addition to creating imported
targets), the following variable names should be used to keep things
consistent between find modules.  Note that all variables start with
``Xxx_`` to make sure they do not interfere with other find modules; the
same consideration applies to macros, functions and imported targets.

``Xxx_INCLUDE_DIRS``
  The final set of include directories listed in one variable for use by
  client code.  This should not be a cache entry.

``Xxx_LIBRARIES``
  The libraries to link against to use Xxx. These should include full
  paths.  This should not be a cache entry.

``Xxx_DEFINITIONS``
  Definitions to use when compiling code that uses Xxx. This really
  shouldn't include options such as ``-DHAS_JPEG`` that a client
  source-code file uses to decide whether to ``#include <jpeg.h>``

``Xxx_EXECUTABLE``
  Where to find the Xxx tool.

``Xxx_Yyy_EXECUTABLE``
  Where to find the Yyy tool that comes with Xxx.

``Xxx_LIBRARY_DIRS``
  Optionally, the final set of library directories listed in one
  variable for use by client code.  This should not be a cache entry.

``Xxx_ROOT_DIR``
  Where to find the base directory of Xxx.

``Xxx_VERSION_Yy``
  Expect Version Yy if true. Make sure at most one of these is ever true.

``Xxx_WRAP_Yy``
  If False, do not try to use the relevant CMake wrapping command.

``Xxx_Yy_FOUND``
  If False, optional Yy part of Xxx system is not available.

``Xxx_FOUND``
  Set to false, or undefined, if we haven't found, or don't want to use
  Xxx.

``Xxx_NOT_FOUND_MESSAGE``
  Should be set by config-files in the case that it has set
  ``Xxx_FOUND`` to FALSE.  The contained message will be printed by the
  ``find_package()`` command and by
  ``find_package_handle_standard_args()`` to inform the user about the
  problem.

``Xxx_RUNTIME_LIBRARY_DIRS``
  Optionally, the runtime library search path for use when running an
  executable linked to shared libraries.  The list should be used by
  user code to create the ``PATH`` on windows or ``LD_LIBRARY_PATH`` on
  UNIX.  This should not be a cache entry.

``Xxx_VERSION``
  The full version string of the package found, if any.  Note that many
  existing modules provide ``Xxx_VERSION_STRING`` instead.

``Xxx_VERSION_MAJOR``
  The major version of the package found, if any.

``Xxx_VERSION_MINOR``
  The minor version of the package found, if any.

``Xxx_VERSION_PATCH``
  The patch version of the package found, if any.

The following names should not usually be used in CMakeLists.txt files, but
are typically cache variables for users to edit and control the
behaviour of find modules (like entering the path to a library manually)

``Xxx_LIBRARY``
  The path of the Xxx library (as used with ``find_library()``, for
  example).

``Xxx_Yy_LIBRARY``
  The path of the Yy library that is part of the Xxx system. It may or
  may not be required to use Xxx.

``Xxx_INCLUDE_DIR``
  Where to find headers for using the Xxx library.

``Xxx_Yy_INCLUDE_DIR``
  Where to find headers for using the Yy library of the Xxx system.

To prevent users being overwhelmed with settings to configure, try to
keep as many options as possible out of the cache, leaving at least one
option which can be used to disable use of the module, or locate a
not-found library (e.g. ``Xxx_ROOT_DIR``).  For the same reason, mark
most cache options as advanced.  For packages which provide both debug
and release binaries, it is common to create cache variables with a
``_LIBRARY_<CONFIG>`` suffix, such as ``Foo_LIBRARY_RELEASE`` and
``Foo_LIBRARY_DEBUG``.

While these are the standard variable names, you should provide
backwards compatibility for any old names that were actually in use.
Make sure you comment them as deprecated, so that no-one starts using
them.



A Sample Find Module
^^^^^^^^^^^^^^^^^^^^

We will describe how to create a simple find module for a library
``Foo``.

The first thing that is needed is documentation.  CMake's documentation
system requires you to start the file with a documentation marker and
the name of the module.  You should follow this with a simple statement
of what the module does.

 #.rst:
 # FindFoo
 # -------
 #
 # Finds the Foo library
 #

More description may be required for some packages.  If there are
caveats or other details users of the module should be aware of, you can
add further paragraphs below this.  Then you need to document what
variables and imported targets are set by the module, such as

 # This will define the following variables::
 #
 #   Foo_FOUND    - True if the system has the Foo library
 #   Foo_VERSION  - The version of the Foo library which was found
 #
 # and the following imported targets::
 #
 #   Foo::Foo   - The Foo library

If the package provides any macros, they should be listed here, but can
be documented where they are defined.  See the `Module
Documentation`_ section above for more details.

After the documentation, leave a blank line, and then add a copyright and
licence notice block

 #=============================================================================
 # Copyright 2009-2011 Your Name
 #
 # Distributed under the OSI-approved BSD License (the "License");
 # see accompanying file Copyright.txt for details.
 #
 # This software is distributed WITHOUT ANY WARRANTY; without even the
 # implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 # See the License for more information.
 #=============================================================================
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)

Now the actual libraries and so on have to be found.  The code here will
obviously vary from module to module (dealing with that, after all, is the
point of find modules), but there tends to be a common pattern for libraries.

First, we try to use ``pkg-config`` to find the library.  Note that we
cannot rely on this, as it may not be available, but it provides a good
starting point.

 find_package(PkgConfig)
 pkg_check_modules(PC_Foo QUIET Foo)

This should define some variables starting ``PC_Foo_`` that contain the
information from the ``Foo.pc`` file.

Now we need to find the libraries and include files; we use the
information from ``pkg-config`` to provide hints to CMake about where to
look.

 find_path(Foo_INCLUDE_DIR
   NAMES foo.h
   PATHS ${PC_Foo_INCLUDE_DIRS}
   PATH_SUFFIXES Foo
 )
 find_library(Foo_LIBRARY
   NAMES foo
   PATHS ${PC_Foo_LIBRARY_DIRS}
 )

If you have a good way of getting the version (from a header file, for
example), you can use that information to set ``Foo_VERSION`` (although
note that find modules have traditionally used ``Foo_VERSION_STRING``,
so you may want to set both).  Otherwise, attempt to use the information
from ``pkg-config``

 set(Foo_VERSION ${PC_Foo_VERSION})

Now we can use ``FindPackageHandleStandardArgs`` to do most of the
rest of the work for us

 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(Foo
   FOUND_VAR Foo_FOUND
   REQUIRED_VARS
     Foo_LIBRARY
     Foo_INCLUDE_DIR
   VERSION_VAR Foo_VERSION
 )

This will check that the ``REQUIRED_VARS`` contain values (that do not
end in ``-NOTFOUND``) and set ``Foo_FOUND`` appropriately.  It will also
cache those values.  If ``Foo_VERSION`` is set, and a required version
was passed to ``find_package()``, it will check the requested version
against the one in ``Foo_VERSION``.  It will also print messages as
appropriate; note that if the package was found, it will print the
contents of the first required variable to indicate where it was found.

At this point, we have to provide a way for users of the find module to
link to the library or libraries that were found.  There are two
approaches, as discussed in the `Find Modules`_ section above.  The
traditional variable approach looks like

 if(Foo_FOUND)
   set(Foo_LIBRARIES ${Foo_LIBRARY})
   set(Foo_INCLUDE_DIRS ${Foo_INCLUDE_DIR})
   set(Foo_DEFINITIONS ${PC_Foo_CFLAGS_OTHER})
 endif()

If more than one library was found, all of them should be included in
these variables (see the `Standard Variable Names`_ section for more
information).

When providing imported targets, these should be namespaced (hence the
``Foo::`` prefix); CMake will recognize that values passed to
``target_link_libraries()`` that contain ``::`` in their name are
supposed to be imported targets (rather than just library names), and
will produce appropriate diagnostic messages if that target does not
exist (see policy ``CMP0028``).

 if(Foo_FOUND AND NOT TARGET Foo::Foo)
   add_library(Foo::Foo UNKNOWN IMPORTED)
   set_target_properties(Foo::Foo PROPERTIES
     IMPORTED_LOCATION "${Foo_LIBRARY}"
     INTERFACE_COMPILE_OPTIONS "${PC_Foo_CFLAGS_OTHER}"
     INTERFACE_INCLUDE_DIRECTORIES "${Foo_INCLUDE_DIR}"
   )
 endif()

One thing to note about this is that the ``INTERFACE_INCLUDE_DIRECTORIES`` and
similar properties should only contain information about the target itself, and
not any of its dependencies.  Instead, those dependencies should also be
targets, and CMake should be told that they are dependencies of this target.
CMake will then combine all the necessary information automatically.

The type of the ``IMPORTED`` target created in the
``add_library()`` command can always be specified as ``UNKNOWN``
type.  This simplifies the code in cases where static or shared variants may
be found, and CMake will determine the type by inspecting the files.

If the library is available with multiple configurations, the
``IMPORTED_CONFIGURATIONS`` target property should also be
populated:

 if(Foo_FOUND)
   if (NOT TARGET Foo::Foo)
     add_library(Foo::Foo UNKNOWN IMPORTED)
   endif()
   if (Foo_LIBRARY_RELEASE)
     set_property(TARGET Foo::Foo APPEND PROPERTY
       IMPORTED_CONFIGURATIONS RELEASE
     )
     set_target_properties(Foo::Foo PROPERTIES
       IMPORTED_LOCATION_RELEASE "${Foo_LIBRARY_RELEASE}"
     )
   endif()
   if (Foo_LIBRARY_DEBUG)
     set_property(TARGET Foo::Foo APPEND PROPERTY
       IMPORTED_CONFIGURATIONS DEBUG
     )
     set_target_properties(Foo::Foo PROPERTIES
       IMPORTED_LOCATION_DEBUG "${Foo_LIBRARY_DEBUG}"
     )
   endif()
   set_target_properties(Foo::Foo PROPERTIES
     INTERFACE_COMPILE_OPTIONS "${PC_Foo_CFLAGS_OTHER}"
     INTERFACE_INCLUDE_DIRECTORIES "${Foo_INCLUDE_DIR}"
   )
 endif()

The ``RELEASE`` variant should be listed first in the property
so that that variant is chosen if the user uses a configuration which is
not an exact match for any listed ``IMPORTED_CONFIGURATIONS``.

Most of the cache variables should be hidden in the ``ccmake`` interface unless
the user explicitly asks to edit them.

 mark_as_advanced(
   Foo_INCLUDE_DIR
   Foo_LIBRARY
 )

If this module replaces an older version, you should set compatibility variables
to cause the least disruption possible.

 # compatibility variables
 set(Foo_VERSION_STRING ${Foo_VERSION})

cmake-generator-expressions(7)
******************************

Introduction
============

Generator expressions are evaluated during build system generation to produce
information specific to each build configuration.

Generator expressions are allowed in the context of many target properties,
such as ``LINK_LIBRARIES``, ``INCLUDE_DIRECTORIES``,
``COMPILE_DEFINITIONS`` and others.  They may also be used when using
commands to populate those properties, such as ``target_link_libraries()``,
``target_include_directories()``, ``target_compile_definitions()``
and others.

This means that they enable conditional linking, conditional
definitions used when compiling, and conditional include directories and
more.  The conditions may be based on the build configuration, target
properties, platform information or any other queryable information.

Logical Expressions
===================

Logical expressions are used to create conditional output.  The basic
expressions are the ``0`` and ``1`` expressions.  Because other logical
expressions evaluate to either ``0`` or ``1``, they can be composed to
create conditional output::

 $<$<CONFIG:Debug>:DEBUG_MODE>

expands to ``DEBUG_MODE`` when the ``Debug`` configuration is used, and
otherwise expands to nothing.

Available logical expressions are:

``$<BOOL:...>``
  ``1`` if the ``...`` is true, else ``0``
``$<AND:?[,?]...>``
  ``1`` if all ``?`` are ``1``, else ``0``

  The ``?`` must always be either ``0`` or ``1`` in boolean expressions.

``$<OR:?[,?]...>``
  ``0`` if all ``?`` are ``0``, else ``1``
``$<NOT:?>``
  ``0`` if ``?`` is ``1``, else ``1``
``$<STREQUAL:a,b>``
  ``1`` if ``a`` is STREQUAL ``b``, else ``0``
``$<EQUAL:a,b>``
  ``1`` if ``a`` is EQUAL ``b`` in a numeric comparison, else ``0``
``$<CONFIG:cfg>``
  ``1`` if config is ``cfg``, else ``0``. This is a case-insensitive comparison.
  The mapping in ``MAP_IMPORTED_CONFIG_<CONFIG>`` is also considered by
  this expression when it is evaluated on a property on an ``IMPORTED``
  target.
``$<PLATFORM_ID:comp>``
  ``1`` if the CMake-id of the platform matches ``comp``, otherwise ``0``.
``$<C_COMPILER_ID:comp>``
  ``1`` if the CMake-id of the C compiler matches ``comp``, otherwise ``0``.
``$<CXX_COMPILER_ID:comp>``
  ``1`` if the CMake-id of the CXX compiler matches ``comp``, otherwise ``0``.
``$<VERSION_GREATER:v1,v2>``
  ``1`` if ``v1`` is a version greater than ``v2``, else ``0``.
``$<VERSION_LESS:v1,v2>``
  ``1`` if ``v1`` is a version less than ``v2``, else ``0``.
``$<VERSION_EQUAL:v1,v2>``
  ``1`` if ``v1`` is the same version as ``v2``, else ``0``.
``$<C_COMPILER_VERSION:ver>``
  ``1`` if the version of the C compiler matches ``ver``, otherwise ``0``.
``$<CXX_COMPILER_VERSION:ver>``
  ``1`` if the version of the CXX compiler matches ``ver``, otherwise ``0``.
``$<TARGET_POLICY:pol>``
  ``1`` if the policy ``pol`` was NEW when the 'head' target was created,
  else ``0``.  If the policy was not set, the warning message for the policy
  will be emitted. This generator expression only works for a subset of
  policies.
``$<COMPILE_FEATURES:feature[,feature]...>``
  ``1`` if all of the ``feature`` features are available for the 'head'
  target, and ``0`` otherwise. If this expression is used while evaluating
  the link implementation of a target and if any dependency transitively
  increases the required ``C_STANDARD`` or ``CXX_STANDARD``
  for the 'head' target, an error is reported.  See the
  ``cmake-compile-features(7)`` manual for information on
  compile features and a list of supported compilers.
``$<COMPILE_LANGUAGE:lang>``
  ``1`` when the language used for compilation unit matches ``lang``,
  otherwise ``0``.  This expression used to specify compile options for
  source files of a particular language in a target. For example, to specify
  the use of the ``-fno-exceptions`` compile option (compiler id checks
  elided):

  .. code-block:: cmake

    add_executable(myapp main.cpp foo.c bar.cpp)
    target_compile_options(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>
    )

  This generator expression has limited use because it is not possible to
  use it with the Visual Studio generators.  Portable buildsystems would
  not use this expression, and would create separate libraries for each
  source file language instead:

  .. code-block:: cmake

    add_library(myapp_c foo.c)
    add_library(myapp_cxx foo.c)
    target_compile_options(myapp_cxx PUBLIC -fno-exceptions)
    add_executable(myapp main.cpp)
    target_link_libraries(myapp myapp_c myapp_cxx)

  The ``Makefile`` and ``Ninja`` based generators can also use this
  expression to specify compile-language specific compile definitions
  and include directories:

  .. code-block:: cmake

    add_executable(myapp main.cpp foo.c bar.cpp)
    target_compile_definitions(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:COMPILING_CXX>
    )
    target_include_directories(myapp
      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:/opt/foo/cxx_headers>
    )

Informational Expressions
=========================

These expressions expand to some information. The information may be used
directly, eg::

 include_directories(/usr/include/$<CXX_COMPILER_ID>/)

expands to ``/usr/include/GNU/`` or ``/usr/include/Clang/`` etc, depending on
the Id of the compiler.

These expressions may also may be combined with logical expressions::

 $<$<VERSION_LESS:$<CXX_COMPILER_VERSION>,4.2.0>:OLD_COMPILER>

expands to ``OLD_COMPILER`` if the
``CMAKE_CXX_COMPILER_VERSION`` is less
than 4.2.0.

Available informational expressions are:

``$<CONFIGURATION>``
  Configuration name. Deprecated. Use ``CONFIG`` instead.
``$<CONFIG>``
  Configuration name
``$<PLATFORM_ID>``
  The CMake-id of the platform.
  See also the ``CMAKE_SYSTEM_NAME`` variable.
``$<C_COMPILER_ID>``
  The CMake-id of the C compiler used.
  See also the ``CMAKE_<LANG>_COMPILER_ID`` variable.
``$<CXX_COMPILER_ID>``
  The CMake-id of the CXX compiler used.
  See also the ``CMAKE_<LANG>_COMPILER_ID`` variable.
``$<C_COMPILER_VERSION>``
  The version of the C compiler used.
  See also the ``CMAKE_<LANG>_COMPILER_VERSION`` variable.
``$<CXX_COMPILER_VERSION>``
  The version of the CXX compiler used.
  See also the ``CMAKE_<LANG>_COMPILER_VERSION`` variable.
``$<TARGET_FILE:tgt>``
  Full path to main file (.exe, .so.1.2, .a) where ``tgt`` is the name of a target.
``$<TARGET_FILE_NAME:tgt>``
  Name of main file (.exe, .so.1.2, .a).
``$<TARGET_FILE_DIR:tgt>``
  Directory of main file (.exe, .so.1.2, .a).
``$<TARGET_LINKER_FILE:tgt>``
  File used to link (.a, .lib, .so) where ``tgt`` is the name of a target.
``$<TARGET_LINKER_FILE_NAME:tgt>``
  Name of file used to link (.a, .lib, .so).
``$<TARGET_LINKER_FILE_DIR:tgt>``
  Directory of file used to link (.a, .lib, .so).
``$<TARGET_SONAME_FILE:tgt>``
  File with soname (.so.3) where ``tgt`` is the name of a target.
``$<TARGET_SONAME_FILE_NAME:tgt>``
  Name of file with soname (.so.3).
``$<TARGET_SONAME_FILE_DIR:tgt>``
  Directory of with soname (.so.3).
``$<TARGET_PDB_FILE:tgt>``
  Full path to the linker generated program database file (.pdb)
  where ``tgt`` is the name of a target.

  See also the ``PDB_NAME`` and ``PDB_OUTPUT_DIRECTORY``
  target properties and their configuration specific variants
  ``PDB_NAME_<CONFIG>`` and ``PDB_OUTPUT_DIRECTORY_<CONFIG>``.
``$<TARGET_PDB_FILE_NAME:tgt>``
  Name of the linker generated program database file (.pdb).
``$<TARGET_PDB_FILE_DIR:tgt>``
  Directory of the linker generated program database file (.pdb).
``$<TARGET_PROPERTY:tgt,prop>``
  Value of the property ``prop`` on the target ``tgt``.

  Note that ``tgt`` is not added as a dependency of the target this
  expression is evaluated on.
``$<TARGET_PROPERTY:prop>``
  Value of the property ``prop`` on the target on which the generator
  expression is evaluated.
``$<INSTALL_PREFIX>``
  Content of the install prefix when the target is exported via
  ``install(EXPORT)`` and empty otherwise.
``$<COMPILE_LANGUAGE>``
  The compile language of source files when evaluating compile options. See
  the unary version for notes about portability of this generator
  expression.

Output Expressions
==================

These expressions generate output, in some cases depending on an input. These
expressions may be combined with other expressions for information or logical
comparison::

 -I$<JOIN:$<TARGET_PROPERTY:INCLUDE_DIRECTORIES>, -I>

generates a string of the entries in the ``INCLUDE_DIRECTORIES`` target
property with each entry preceded by ``-I``. Note that a more-complete use
in this situation would require first checking if the INCLUDE_DIRECTORIES
property is non-empty::

 $<$<BOOL:${prop}>:-I$<JOIN:${prop}, -I>>

where ``${prop}`` refers to a helper variable::

 set(prop "$<TARGET_PROPERTY:INCLUDE_DIRECTORIES>")

Available output expressions are:

``$<0:...>``
  Empty string (ignores ``...``)
``$<1:...>``
  Content of ``...``
``$<JOIN:list,...>``
  Joins the list with the content of ``...``
``$<ANGLE-R>``
  A literal ``>``. Used to compare strings which contain a ``>`` for example.
``$<COMMA>``
  A literal ``,``. Used to compare strings which contain a ``,`` for example.
``$<SEMICOLON>``
  A literal ``;``. Used to prevent list expansion on an argument with ``;``.
``$<TARGET_NAME:...>``
  Marks ``...`` as being the name of a target.  This is required if exporting
  targets to multiple dependent export sets.  The ``...`` must be a literal
  name of a target- it may not contain generator expressions.
``$<LINK_ONLY:...>``
  Content of ``...`` except when evaluated in a link interface while
  propagating :ref:`Target Usage Requirements`, in which case it is the
  empty string.
  Intended for use only in an ``INTERFACE_LINK_LIBRARIES`` target
  property, perhaps via the ``target_link_libraries()`` command,
  to specify private link dependencies without other usage requirements.
``$<INSTALL_INTERFACE:...>``
  Content of ``...`` when the property is exported using ``install(EXPORT)``,
  and empty otherwise.
``$<BUILD_INTERFACE:...>``
  Content of ``...`` when the property is exported using ``export()``, or
  when the target is used by another target in the same buildsystem. Expands to
  the empty string otherwise.
``$<LOWER_CASE:...>``
  Content of ``...`` converted to lower case.
``$<UPPER_CASE:...>``
  Content of ``...`` converted to upper case.
``$<MAKE_C_IDENTIFIER:...>``
  Content of ``...`` converted to a C identifier.
``$<TARGET_OBJECTS:objLib>``
  List of objects resulting from build of ``objLib``. ``objLib`` must be an
  object of type ``OBJECT_LIBRARY``.  This expression may only be used in
  the sources of ``add_library()`` and ``add_executable()``
  commands.
``$<SHELL_PATH:...>``
  Content of ``...`` converted to shell path style. For example, slashes are
  converted to backslashes in Windows shells and drive letters are converted
  to posix paths in MSYS shells. The ``...`` must be an absolute path.

cmake-generators(7)
*******************

Introduction
============

A *CMake Generator* is responsible for writing the input files for
a native build system.  Exactly one of the `CMake Generators`_ must be
selected for a build tree to determine what native build system is to
be used.  Optionally one of the `Extra Generators`_ may be selected
as a variant of some of the `Command-Line Build Tool Generators`_ to
produce project files for an auxiliary IDE.

CMake Generators are platform-specific so each may be available only
on certain platforms.  The ``cmake(1)`` command-line tool ``--help``
output lists available generators on the current platform.  Use its ``-G``
option to specify the generator for a new build tree.
The ``cmake-gui(1)`` offers interactive selection of a generator
when creating a new build tree.

CMake Generators
================

Command-Line Build Tool Generators
----------------------------------

These generators support command-line build tools.  In order to use them,
one must launch CMake from a command-line prompt whose environment is
already configured for the chosen compiler and build tool.

Makefile Generators
^^^^^^^^^^^^^^^^^^^

Borland Makefiles
-----------------

Generates Borland makefiles.

MSYS Makefiles
--------------

Generates makefiles for use with MSYS ``make`` under the MSYS shell.

Use this generator in a MSYS shell prompt and using ``make`` as the build
tool.  The generated makefiles use ``/bin/sh`` as the shell to launch build
rules.  They are not compatible with a Windows command prompt.

To build under a Windows command prompt, use the
``MinGW Makefiles`` generator.

MinGW Makefiles
---------------

Generates makefiles for use with ``mingw32-make`` under a Windows command
prompt.

Use this generator under a Windows command prompt with MinGW in the ``PATH``
and using ``mingw32-make`` as the build tool.  The generated makefiles use
``cmd.exe`` as the shell to launch build rules.  They are not compatible with
MSYS or a unix shell.

To build under the MSYS shell, use the ``MSYS Makefiles`` generator.

NMake Makefiles
---------------

Generates NMake makefiles.

NMake Makefiles JOM
-------------------

Generates JOM makefiles.

Unix Makefiles
--------------

Generates standard UNIX makefiles.

A hierarchy of UNIX makefiles is generated into the build tree.  Any
standard UNIX-style make program can build the project through the
default make target.  A "make install" target is also provided.

Watcom WMake
------------

Generates Watcom WMake makefiles.

Ninja Generator
^^^^^^^^^^^^^^^

Ninja
-----

Generates build.ninja files.

A build.ninja file is generated into the build tree.  Recent versions
of the ninja program can build the project through the "all" target.
An "install" target is also provided.

For each subdirectory ``sub/dir`` of the project an additional target
named ``sub/dir/all`` is generated that depends on all targets required
by that subdirectory.

IDE Build Tool Generators
-------------------------

These generators support Integrated Development Environment (IDE)
project files.  Since the IDEs configure their own environment
one may launch CMake from any environment.

Visual Studio Generators
^^^^^^^^^^^^^^^^^^^^^^^^

Visual Studio 6
---------------

Removed.  This once generated Visual Studio 6 project files, but the
generator has been removed since CMake 3.6.  It is still possible to
build with VS 6 tools using the ``NMake Makefiles`` generator.

Visual Studio 7
---------------

Removed.  This once generated Visual Studio .NET 2002 project files, but
the generator has been removed since CMake 3.6.  It is still possible to
build with VS 7.0 tools using the ``NMake Makefiles`` generator.

Visual Studio 7 .NET 2003
-------------------------

Deprecated.  Generates Visual Studio .NET 2003 project files.

.. note::
  This generator is deprecated and will be removed
  in a future version of CMake.  It will still be
  possible to build with VS 7.1 tools using the
  ``NMake Makefiles`` generator.

Visual Studio 8 2005
--------------------

Generates Visual Studio 8 2005 project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 8 2005 Win64``
  Specify target platform ``x64``.

``Visual Studio 8 2005 <WinCE-SDK>``
  Specify target platform matching a Windows CE SDK name.

Visual Studio 9 2008
--------------------

Generates Visual Studio 9 2008 project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 9 2008 Win64``
  Specify target platform ``x64``.

``Visual Studio 9 2008 IA64``
  Specify target platform ``Itanium``.

``Visual Studio 9 2008 <WinCE-SDK>``
  Specify target platform matching a Windows CE SDK name.

Visual Studio 10 2010
---------------------

Generates Visual Studio 10 (VS 2010) project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 10 2010 Win64``
  Specify target platform ``x64``.

``Visual Studio 10 2010 IA64``
  Specify target platform ``Itanium``.

For compatibility with CMake versions prior to 3.0, one may specify this
generator using the name ``Visual Studio 10`` without the year component.

Visual Studio 11 2012
---------------------

Generates Visual Studio 11 (VS 2012) project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 11 2012 Win64``
  Specify target platform ``x64``.

``Visual Studio 11 2012 ARM``
  Specify target platform ``ARM``.

``Visual Studio 11 2012 <WinCE-SDK>``
  Specify target platform matching a Windows CE SDK name.

For compatibility with CMake versions prior to 3.0, one may specify this
generator using the name "Visual Studio 11" without the year component.

Visual Studio 12 2013
---------------------

Generates Visual Studio 12 (VS 2013) project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 12 2013 Win64``
  Specify target platform ``x64``.

``Visual Studio 12 2013 ARM``
  Specify target platform ``ARM``.

For compatibility with CMake versions prior to 3.0, one may specify this
generator using the name "Visual Studio 12" without the year component.

Visual Studio 14 2015
---------------------

Generates Visual Studio 14 (VS 2015) project files.

The ``CMAKE_GENERATOR_PLATFORM`` variable may be set
to specify a target platform name.

For compatibility with CMake versions prior to 3.1, one may specify
a target platform name optionally at the end of this generator name:

``Visual Studio 14 2015 Win64``
  Specify target platform ``x64``.

``Visual Studio 14 2015 ARM``
  Specify target platform ``ARM``.

Other Generators
^^^^^^^^^^^^^^^^

Green Hills MULTI
-----------------

Generates Green Hills MULTI project files (experimental, work-in-progress).

Customizations are available through the following cache variables:

* ``GHS_BSP_NAME``
* ``GHS_CUSTOMIZATION``
* ``GHS_GPJ_MACROS``
* ``GHS_OS_DIR``

.. note::
  This generator is deemed experimental as of CMake 3.6.0
  and is still a work in progress.  Future versions of CMake
  may make breaking changes as the generator matures.

Xcode
-----

Generate Xcode project files.

Extra Generators
================

Some of the `CMake Generators`_ listed in the ``cmake(1)``
command-line tool ``--help`` output may have variants that specify
an extra generator for an auxiliary IDE tool.  Such generator
names have the form ``<extra-generator> - <main-generator>``.
The following extra generators are known to CMake.

CodeBlocks
----------

Generates CodeBlocks project files.

Project files for CodeBlocks will be created in the top directory and
in every subdirectory which features a CMakeLists.txt file containing
a PROJECT() call.  Additionally a hierarchy of makefiles is generated
into the build tree.  The appropriate make program can build the
project through the default make target.  A "make install" target is
also provided.

This "extra" generator may be specified as:

``CodeBlocks - MinGW Makefiles``
 Generate with ``MinGW Makefiles``.

``CodeBlocks - NMake Makefiles``
 Generate with ``NMake Makefiles``.

``CodeBlocks - Ninja``
 Generate with ``Ninja``.

``CodeBlocks - Unix Makefiles``
 Generate with ``Unix Makefiles``.

CodeLite
----------

Generates CodeLite project files.

Project files for CodeLite will be created in the top directory and
in every subdirectory which features a CMakeLists.txt file containing
a PROJECT() call. The appropriate make program can build the
project through the default make target.  A "make install" target is
also provided.

This "extra" generator may be specified as:

``CodeLite - MinGW Makefiles``
 Generate with ``MinGW Makefiles``.

``CodeLite - NMake Makefiles``
 Generate with ``NMake Makefiles``.

``CodeLite - Ninja``
 Generate with ``Ninja``.

``CodeLite - Unix Makefiles``
 Generate with ``Unix Makefiles``.

Eclipse CDT4
------------

Generates Eclipse CDT 4.0 project files.

Project files for Eclipse will be created in the top directory.  In
out of source builds, a linked resource to the top level source
directory will be created.  Additionally a hierarchy of makefiles is
generated into the build tree.  The appropriate make program can build
the project through the default make target.  A "make install" target
is also provided.

This "extra" generator may be specified as:

``Eclipse CDT4 - MinGW Makefiles``
 Generate with ``MinGW Makefiles``.

``Eclipse CDT4 - NMake Makefiles``
 Generate with ``NMake Makefiles``.

``Eclipse CDT4 - Ninja``
 Generate with ``Ninja``.

``Eclipse CDT4 - Unix Makefiles``
 Generate with ``Unix Makefiles``.

KDevelop3
---------

Generates KDevelop 3 project files.

Project files for KDevelop 3 will be created in the top directory and
in every subdirectory which features a CMakeLists.txt file containing
a PROJECT() call.  If you change the settings using KDevelop cmake
will try its best to keep your changes when regenerating the project
files.  Additionally a hierarchy of UNIX makefiles is generated into
the build tree.  Any standard UNIX-style make program can build the
project through the default make target.  A "make install" target is
also provided.

This "extra" generator may be specified as:

``KDevelop3 - Unix Makefiles``
 Generate with ``Unix Makefiles``.

``KDevelop3``
 Generate with ``Unix Makefiles``.

 For historical reasons this extra generator may be specified
 directly as the main generator and it will be used as the
 extra generator with ``Unix Makefiles`` automatically.

Kate
----

Generates Kate project files.

A project file for Kate will be created in the top directory in the top level
build directory.
To use it in kate, the Project plugin must be enabled.
The project file is loaded in kate simply by opening the
ProjectName.kateproject file in the editor.
If the kate Build-plugin is enabled, all targets generated by CMake are
available for building.

This "extra" generator may be specified as:

``Kate - MinGW Makefiles``
 Generate with ``MinGW Makefiles``.

``Kate - NMake Makefiles``
 Generate with ``NMake Makefiles``.

``Kate - Ninja``
 Generate with ``Ninja``.

``Kate - Unix Makefiles``
 Generate with ``Unix Makefiles``.

Sublime Text 2
--------------

Generates Sublime Text 2 project files.

Project files for Sublime Text 2 will be created in the top directory
and in every subdirectory which features a CMakeLists.txt file
containing a PROJECT() call.  Additionally Makefiles (or build.ninja
files) are generated into the build tree.  The appropriate make
program can build the project through the default make target.  A
"make install" target is also provided.

This "extra" generator may be specified as:

``Sublime Text 2 - MinGW Makefiles``
 Generate with ``MinGW Makefiles``.

``Sublime Text 2 - NMake Makefiles``
 Generate with ``NMake Makefiles``.

``Sublime Text 2 - Ninja``
 Generate with ``Ninja``.

``Sublime Text 2 - Unix Makefiles``
 Generate with ``Unix Makefiles``.

cmake-language(7)
*****************

Organization
============

CMake input files are written in the "CMake Language" in source files
named ``CMakeLists.txt`` or ending in a ``.cmake`` file name extension.

CMake Language source files in a project are organized into:

* `Directories`_ (``CMakeLists.txt``),
* `Scripts`_ (``<script>.cmake``), and
* `Modules`_ (``<module>.cmake``).

Directories
-----------

When CMake processes a project source tree, the entry point is
a source file called ``CMakeLists.txt`` in the top-level source
directory.  This file may contain the entire build specification
or use the ``add_subdirectory()`` command to add subdirectories
to the build.  Each subdirectory added by the command must also
contain a ``CMakeLists.txt`` file as the entry point to that
directory.  For each source directory whose ``CMakeLists.txt`` file
is processed CMake generates a corresponding directory in the build
tree to act as the default working and output directory.

Scripts
-------

An individual ``<script>.cmake`` source file may be processed
in *script mode* by using the ``cmake(1)`` command-line tool
with the ``-P`` option.  Script mode simply runs the commands in
the given CMake Language source file and does not generate a
build system.  It does not allow CMake commands that define build
targets or actions.

Modules
-------

CMake Language code in either `Directories`_ or `Scripts`_ may
use the ``include()`` command to load a ``<module>.cmake``
source file in the scope of the including context.
See the ``cmake-modules(7)`` manual page for documentation
of modules included with the CMake distribution.
Project source trees may also provide their own modules and
specify their location(s) in the ``CMAKE_MODULE_PATH``
variable.

Syntax
======

Encoding
--------

A CMake Language source file may be written in 7-bit ASCII text for
maximum portability across all supported platforms.  Newlines may be
encoded as either ``\n`` or ``\r\n`` but will be converted to ``\n``
as input files are read.

Note that the implementation is 8-bit clean so source files may
be encoded as UTF-8 on platforms with system APIs supporting this
encoding.  In addition, CMake 3.2 and above support source files
encoded in UTF-8 on Windows (using UTF-16 to call system APIs).
Furthermore, CMake 3.0 and above allow a leading UTF-8
`Byte-Order Mark`_ in source files.

Source Files
------------

A CMake Language source file consists of zero or more
`Command Invocations`_ separated by newlines and optionally
spaces and `Comments`_:

.. productionlist::
 file: `file_element`*
 file_element: `command_invocation` `line_ending` |
             : (`bracket_comment`|`space`)* `line_ending`
 line_ending: `line_comment`? `newline`
 space: <match '[ \t]+'>
 newline: <match '\n'>

Note that any source file line not inside `Command Arguments`_ or
a `Bracket Comment`_ can end in a `Line Comment`_.

Command Invocations
-------------------

A *command invocation* is a name followed by paren-enclosed arguments
separated by whitespace:

.. productionlist::
 command_invocation: `space`* `identifier` `space`* '(' `arguments` ')'
 identifier: <match '[A-Za-z_][A-Za-z0-9_]*'>
 arguments: `argument`? `separated_arguments`*
 separated_arguments: `separation`+ `argument`? |
                    : `separation`* '(' `arguments` ')'
 separation: `space` | `line_ending`

For example:

 add_executable(hello world.c)

Command names are case-insensitive.
Nested unquoted parentheses in the arguments must balance.
Each ``(`` or ``)`` is given to the command invocation as
a literal `Unquoted Argument`_.  This may be used in calls
to the ``if()`` command to enclose conditions.
For example:

 if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE

.. note::
 CMake versions prior to 3.0 require command name identifiers
 to be at least 2 characters.

 CMake versions prior to 2.8.12 silently accept an `Unquoted Argument`_
 or a `Quoted Argument`_ immediately following a `Quoted Argument`_ and
 not separated by any whitespace.  For compatibility, CMake 2.8.12 and
 higher accept such code but produce a warning.

Command Arguments
-----------------

There are three types of arguments within `Command Invocations`_:

.. productionlist::
 argument: `bracket_argument` | `quoted_argument` | `unquoted_argument`

Bracket Argument
^^^^^^^^^^^^^^^^

A *bracket argument*, inspired by `Lua`_ long bracket syntax,
encloses content between opening and closing "brackets" of the
same length:

.. productionlist::
 bracket_argument: `bracket_open` `bracket_content` `bracket_close`
 bracket_open: '[' '='{len} '['
 bracket_content: <any text not containing a `bracket_close`
                :  of the same {len} as the `bracket_open`>
 bracket_close: ']' '='{len} ']'

An opening bracket of length *len >= 0* is written ``[`` followed
by *len* ``=`` followed by ``[`` and the corresponding closing
bracket is written ``]`` followed by *len* ``=`` followed by ``]``.
Brackets do not nest.  A unique length may always be chosen
for the opening and closing brackets to contain closing brackets
of other lengths.

Bracket argument content consists of all text between the opening
and closing brackets, except that one newline immediately following
the opening bracket, if any, is ignored.  No evaluation of the
enclosed content, such as `Escape Sequences`_ or `Variable References`_,
is performed.  A bracket argument is always given to the command
invocation as exactly one argument.

For example:

 message([=[
 This is the first line in a bracket argument with bracket length 1.
 No \-escape sequences or ${variable} references are evaluated.
 This is always one argument even though it contains a ; character.
 The text does not end on a closing bracket of length 0 like ]].
 It does end in a closing bracket of length 1.
 ]=])

.. note::
 CMake versions prior to 3.0 do not support bracket arguments.
 They interpret the opening bracket as the start of an
 `Unquoted Argument`_.

Quoted Argument
^^^^^^^^^^^^^^^

A *quoted argument* encloses content between opening and closing
double-quote characters:

.. productionlist::
 quoted_argument: '"' `quoted_element`* '"'
 quoted_element: <any character except '\' or '"'> |
                 : `escape_sequence` |
                 : `quoted_continuation`
 quoted_continuation: '\' `newline`

Quoted argument content consists of all text between opening and
closing quotes.  Both `Escape Sequences`_ and `Variable References`_
are evaluated.  A quoted argument is always given to the command
invocation as exactly one argument.

For example:

 message("This is a quoted argument containing multiple lines.
 This is always one argument even though it contains a ; character.
 Both \\-escape sequences and ${variable} references are evaluated.
 The text does not end on an escaped double-quote like \".
 It does end in an unescaped double quote.
 ")

The final ``\`` on any line ending in an odd number of backslashes
is treated as a line continuation and ignored along with the
immediately following newline character.  For example:

 message("\
 This is the first line of a quoted argument. \
 In fact it is the only line but since it is long \
 the source code uses line continuation.\
 ")

.. note::
 CMake versions prior to 3.0 do not support continuation with ``\``.
 They report errors in quoted arguments containing lines ending in
 an odd number of ``\`` characters.

Unquoted Argument
^^^^^^^^^^^^^^^^^

An *unquoted argument* is not enclosed by any quoting syntax.
It may not contain any whitespace, ``(``, ``)``, ``#``, ``"``, or ``\``
except when escaped by a backslash:

.. productionlist::
 unquoted_argument: `unquoted_element`+ | `unquoted_legacy`
 unquoted_element: <any character except whitespace or one of '()#"\'> |
                 : `escape_sequence`
 unquoted_legacy: <see note in text>

Unquoted argument content consists of all text in a contiguous block
of allowed or escaped characters.  Both `Escape Sequences`_ and
`Variable References`_ are evaluated.  The resulting value is divided
in the same way `Lists`_ divide into elements.  Each non-empty element
is given to the command invocation as an argument.  Therefore an
unquoted argument may be given to a command invocation as zero or
more arguments.

For example:

 foreach(arg
     NoSpace
     Escaped\ Space
     This;Divides;Into;Five;Arguments
     Escaped\;Semicolon
     )
   message("${arg}")
 endforeach()

.. note::
 To support legacy CMake code, unquoted arguments may also contain
 double-quoted strings (``"..."``, possibly enclosing horizontal
 whitespace), and make-style variable references (``$(MAKEVAR)``).
 Unescaped double-quotes must balance, may not appear at the
 beginning of an unquoted argument, and are treated as part of the
 content.  For example, the unquoted arguments ``-Da="b c"``,
 ``-Da=$(v)``, and ``a" "b"c"d`` are each interpreted literally.

 The above "unquoted_legacy" production represents such arguments.
 We do not recommend using legacy unquoted arguments in new code.
 Instead use a `Quoted Argument`_ or a `Bracket Argument`_ to
 represent the content.

Escape Sequences
----------------

An *escape sequence* is a ``\`` followed by one character:

.. productionlist::
 escape_sequence: `escape_identity` | `escape_encoded` | `escape_semicolon`
 escape_identity: '\' <match '[^A-Za-z0-9;]'>
 escape_encoded: '\t' | '\r' | '\n'
 escape_semicolon: '\;'

A ``\`` followed by a non-alphanumeric character simply encodes the literal
character without interpreting it as syntax.  A ``\t``, ``\r``, or ``\n``
encodes a tab, carriage return, or newline character, respectively. A ``\;``
outside of any `Variable References`_  encodes itself but may be used in an
`Unquoted Argument`_ to encode the ``;`` without dividing the argument
value on it.  A ``\;`` inside `Variable References`_ encodes the literal
``;`` character.  (See also policy ``CMP0053`` documentation for
historical considerations.)

Variable References
-------------------

A *variable reference* has the form ``${variable_name}`` and is
evaluated inside a `Quoted Argument`_ or an `Unquoted Argument`_.
A variable reference is replaced by the value of the variable,
or by the empty string if the variable is not set.
Variable references can nest and are evaluated from the
inside out, e.g. ``${outer_${inner_variable}_variable}``.

Literal variable references may consist of alphanumeric characters,
the characters ``/_.+-``, and `Escape Sequences`_.  Nested references
may be used to evaluate variables of any name.  (See also policy
``CMP0053`` documentation for historical considerations.)

The `Variables`_ section documents the scope of variable names
and how their values are set.

An *environment variable reference* has the form ``$ENV{VAR}`` and
is evaluated in the same contexts as a normal variable reference.

Comments
--------

A comment starts with a ``#`` character that is not inside a
`Bracket Argument`_, `Quoted Argument`_, or escaped with ``\``
as part of an `Unquoted Argument`_.  There are two types of
comments: a `Bracket Comment`_ and a `Line Comment`_.

Bracket Comment
^^^^^^^^^^^^^^^

A ``#`` immediately followed by a `Bracket Argument`_ forms a
*bracket comment* consisting of the entire bracket enclosure:

.. productionlist::
 bracket_comment: '#' `bracket_argument`

For example:

 #[[This is a bracket comment.
 It runs until the close bracket.]]
 message("First Argument\n" #[[Bracket Comment]] "Second Argument")

.. note::
 CMake versions prior to 3.0 do not support bracket comments.
 They interpret the opening ``#`` as the start of a `Line Comment`_.

Line Comment
^^^^^^^^^^^^

A ``#`` not immediately followed by a `Bracket Argument`_ forms a
*line comment* that runs until the end of the line:

.. productionlist::
 line_comment: '#' <any text not starting in a `bracket_argument`
             :      and not containing a `newline`>

For example:

 # This is a line comment.
 message("First Argument\n" # This is a line comment :)
         "Second Argument") # This is a line comment.

Control Structures
==================

Conditional Blocks
------------------

The ``if()``/``elseif()``/``else()``/``endif()``
commands delimit code blocks to be executed conditionally.

Loops
-----

The ``foreach()``/``endforeach()`` and
``while()``/``endwhile()`` commands delimit code
blocks to be executed in a loop.  Inside such blocks the
``break()`` command may be used to terminate the loop
early whereas the ``continue()`` command may be used
to start with the next iteration immediately.

Command Definitions
-------------------

The ``macro()``/``endmacro()``, and
``function()``/``endfunction()`` commands delimit
code blocks to be recorded for later invocation as commands.

Variables
=========

Variables are the basic unit of storage in the CMake Language.
Their values are always of string type, though some commands may
interpret the strings as values of other types.
The ``set()`` and ``unset()`` commands explicitly
set or unset a variable, but other commands have semantics
that modify variables as well.
Variable names are case-sensitive and may consist of almost
any text, but we recommend sticking to names consisting only
of alphanumeric characters plus ``_`` and ``-``.

Variables have dynamic scope.  Each variable "set" or "unset"
creates a binding in the current scope:

Function Scope
 `Command Definitions`_ created by the ``function()`` command
 create commands that, when invoked, process the recorded commands
 in a new variable binding scope.  A variable "set" or "unset"
 binds in this scope and is visible for the current function and
 any nested calls, but not after the function returns.

Directory Scope
 Each of the `Directories`_ in a source tree has its own variable
 bindings.  Before processing the ``CMakeLists.txt`` file for a
 directory, CMake copies all variable bindings currently defined
 in the parent directory, if any, to initialize the new directory
 scope.  CMake `Scripts`_, when processed with ``cmake -P``, bind
 variables in one "directory" scope.

 A variable "set" or "unset" not inside a function call binds
 to the current directory scope.

Persistent Cache
 CMake stores a separate set of "cache" variables, or "cache entries",
 whose values persist across multiple runs within a project build
 tree.  Cache entries have an isolated binding scope modified only
 by explicit request, such as by the ``CACHE`` option of the
 ``set()`` and ``unset()`` commands.

When evaluating `Variable References`_, CMake first searches the
function call stack, if any, for a binding and then falls back
to the binding in the current directory scope, if any.  If a
"set" binding is found, its value is used.  If an "unset" binding
is found, or no binding is found, CMake then searches for a
cache entry.  If a cache entry is found, its value is used.
Otherwise, the variable reference evaluates to an empty string.

The ``cmake-variables(7)`` manual documents many variables
that are provided by CMake or have meaning to CMake when set
by project code.

Lists
=====

Although all values in CMake are stored as strings, a string
may be treated as a list in certain contexts, such as during
evaluation of an `Unquoted Argument`_.  In such contexts, a string
is divided into list elements by splitting on ``;`` characters not
following an unequal number of ``[`` and ``]`` characters and not
immediately preceded by a ``\``.  The sequence ``\;`` does not
divide a value but is replaced by ``;`` in the resulting element.

A list of elements is represented as a string by concatenating
the elements separated by ``;``.  For example, the ``set()``
command stores multiple values into the destination variable
as a list:

 set(srcs a.c b.c c.c) # sets "srcs" to "a.c;b.c;c.c"

Lists are meant for simple use cases such as a list of source
files and should not be used for complex data processing tasks.
Most commands that construct lists do not escape ``;`` characters
in list elements, thus flattening nested lists:

 set(x a "b;c") # sets "x" to "a;b;c", not "a;b\;c"

cmake-modules(7)
****************

All Modules
===========

AddFileDependencies
-------------------

ADD_FILE_DEPENDENCIES(source_file depend_files...)

Adds the given files as dependencies to source_file

BundleUtilities
---------------

Functions to help assemble a standalone bundle application.

A collection of CMake utility functions useful for dealing with .app
bundles on the Mac and bundle-like directories on any OS.

The following functions are provided by this module:

::

 fixup_bundle
 copy_and_fixup_bundle
 verify_app
 get_bundle_main_executable
 get_dotapp_dir
 get_bundle_and_executable
 get_bundle_all_executables
 get_item_key
 get_item_rpaths
 clear_bundle_keys
 set_bundle_key_values
 get_bundle_keys
 copy_resolved_item_into_bundle
 copy_resolved_framework_into_bundle
 fixup_bundle_item
 verify_bundle_prerequisites
 verify_bundle_symlinks

Requires CMake 2.6 or greater because it uses function, break and
PARENT_SCOPE.  Also depends on GetPrerequisites.cmake.

::

 FIXUP_BUNDLE(<app> <libs> <dirs>)

Fix up a bundle in-place and make it standalone, such that it can be
drag-n-drop copied to another machine and run on that machine as long
as all of the system libraries are compatible.

If you pass plugins to fixup_bundle as the libs parameter, you should
install them or copy them into the bundle before calling fixup_bundle.
The "libs" parameter is a list of libraries that must be fixed up, but
that cannot be determined by otool output analysis.  (i.e., plugins)

Gather all the keys for all the executables and libraries in a bundle,
and then, for each key, copy each prerequisite into the bundle.  Then
fix each one up according to its own list of prerequisites.

Then clear all the keys and call verify_app on the final bundle to
ensure that it is truly standalone.

As an optional parameter (IGNORE_ITEM) a list of file names can be passed,
which are then ignored (e.g. IGNORE_ITEM "vcredist_x86.exe;vcredist_x64.exe")

::

 COPY_AND_FIXUP_BUNDLE(<src> <dst> <libs> <dirs>)

Makes a copy of the bundle <src> at location <dst> and then fixes up
the new copied bundle in-place at <dst>...

::

 VERIFY_APP(<app>)

Verifies that an application <app> appears valid based on running
analysis tools on it.  Calls "message(FATAL_ERROR" if the application
is not verified.

As an optional parameter (IGNORE_ITEM) a list of file names can be passed,
which are then ignored (e.g. IGNORE_ITEM "vcredist_x86.exe;vcredist_x64.exe")

::

 GET_BUNDLE_MAIN_EXECUTABLE(<bundle> <result_var>)

The result will be the full path name of the bundle's main executable
file or an "error:" prefixed string if it could not be determined.

::

 GET_DOTAPP_DIR(<exe> <dotapp_dir_var>)

Returns the nearest parent dir whose name ends with ".app" given the
full path to an executable.  If there is no such parent dir, then
simply return the dir containing the executable.

The returned directory may or may not exist.

::

 GET_BUNDLE_AND_EXECUTABLE(<app> <bundle_var> <executable_var> <valid_var>)

Takes either a ".app" directory name or the name of an executable
nested inside a ".app" directory and returns the path to the ".app"
directory in <bundle_var> and the path to its main executable in
<executable_var>

::

 GET_BUNDLE_ALL_EXECUTABLES(<bundle> <exes_var>)

Scans the given bundle recursively for all executable files and
accumulates them into a variable.

::

 GET_ITEM_KEY(<item> <key_var>)

Given a file (item) name, generate a key that should be unique
considering the set of libraries that need copying or fixing up to
make a bundle standalone.  This is essentially the file name including
extension with "." replaced by "_"

This key is used as a prefix for CMake variables so that we can
associate a set of variables with a given item based on its key.

::

 CLEAR_BUNDLE_KEYS(<keys_var>)

Loop over the list of keys, clearing all the variables associated with
each key.  After the loop, clear the list of keys itself.

Caller of get_bundle_keys should call clear_bundle_keys when done with
list of keys.

::

 SET_BUNDLE_KEY_VALUES(<keys_var> <context> <item> <exepath> <dirs>
                       <copyflag> [<rpaths>])

Add a key to the list (if necessary) for the given item.  If added,
also set all the variables associated with that key.

::

 GET_BUNDLE_KEYS(<app> <libs> <dirs> <keys_var>)

Loop over all the executable and library files within the bundle (and
given as extra <libs>) and accumulate a list of keys representing
them.  Set values associated with each key such that we can loop over
all of them and copy prerequisite libs into the bundle and then do
appropriate install_name_tool fixups.

As an optional parameter (IGNORE_ITEM) a list of file names can be passed,
which are then ignored (e.g. IGNORE_ITEM "vcredist_x86.exe;vcredist_x64.exe")

::

 COPY_RESOLVED_ITEM_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)

Copy a resolved item into the bundle if necessary.  Copy is not
necessary if the resolved_item is "the same as" the
resolved_embedded_item.

::

 COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)

Copy a resolved framework into the bundle if necessary.  Copy is not
necessary if the resolved_item is "the same as" the
resolved_embedded_item.

By default, BU_COPY_FULL_FRAMEWORK_CONTENTS is not set.  If you want
full frameworks embedded in your bundles, set
BU_COPY_FULL_FRAMEWORK_CONTENTS to ON before calling fixup_bundle.  By
default, COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE copies the framework
dylib itself plus the framework Resources directory.

::

 FIXUP_BUNDLE_ITEM(<resolved_embedded_item> <exepath> <dirs>)

Get the direct/non-system prerequisites of the resolved embedded item.
For each prerequisite, change the way it is referenced to the value of
the _EMBEDDED_ITEM keyed variable for that prerequisite.  (Most likely
changing to an "@executable_path" style reference.)

This function requires that the resolved_embedded_item be "inside" the
bundle already.  In other words, if you pass plugins to fixup_bundle
as the libs parameter, you should install them or copy them into the
bundle before calling fixup_bundle.  The "libs" parameter is a list of
libraries that must be fixed up, but that cannot be determined by
otool output analysis.  (i.e., plugins)

Also, change the id of the item being fixed up to its own
_EMBEDDED_ITEM value.

Accumulate changes in a local variable and make *one* call to
install_name_tool at the end of the function with all the changes at
once.

If the BU_CHMOD_BUNDLE_ITEMS variable is set then bundle items will be
marked writable before install_name_tool tries to change them.

::

 VERIFY_BUNDLE_PREREQUISITES(<bundle> <result_var> <info_var>)

Verifies that the sum of all prerequisites of all files inside the
bundle are contained within the bundle or are "system" libraries,
presumed to exist everywhere.

As an optional parameter (IGNORE_ITEM) a list of file names can be passed,
which are then ignored (e.g. IGNORE_ITEM "vcredist_x86.exe;vcredist_x64.exe")

::

 VERIFY_BUNDLE_SYMLINKS(<bundle> <result_var> <info_var>)

Verifies that any symlinks found in the bundle point to other files
that are already also in the bundle...  Anything that points to an
external file causes this function to fail the verification.

CheckCCompilerFlag
------------------

Check whether the C compiler supports a given flag.

CHECK_C_COMPILER_FLAG(<flag> <var>)

::

 <flag> - the compiler flag
 <var>  - variable to store the result
          Will be created as an internal cache variable.

This internally calls the check_c_source_compiles macro and sets
CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for
CheckCSourceCompiles for a listing of variables that can otherwise
modify the build.  The result only tells that the compiler does not
give an error message when it encounters the flag.  If the flag has
any effect or even a specific one is beyond the scope of this module.

CheckCSourceCompiles
--------------------

Check if given C source compiles and links into an executable

CHECK_C_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])

::

 <code>       - source code to try to compile, must define 'main'
 <var>        - variable to store whether the source code compiled
                Will be created as an internal cache variable.
 <fail-regex> - fail if test output matches this regex

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckCSourceRuns
----------------

Check if the given C source code compiles and runs.

CHECK_C_SOURCE_RUNS(<code> <var>)

::

 <code>   - source code to try to compile
 <var>    - variable to store the result
            (1 for success, empty for failure)
            Will be created as an internal cache variable.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckCXXCompilerFlag
--------------------

Check whether the CXX compiler supports a given flag.

CHECK_CXX_COMPILER_FLAG(<flag> <var>)

::

 <flag> - the compiler flag
 <var>  - variable to store the result

This internally calls the check_cxx_source_compiles macro and sets
CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for
CheckCXXSourceCompiles for a listing of variables that can otherwise
modify the build.  The result only tells that the compiler does not
give an error message when it encounters the flag.  If the flag has
any effect or even a specific one is beyond the scope of this module.

CheckCXXSourceCompiles
----------------------

Check if given C++ source compiles and links into an executable

CHECK_CXX_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])

::

 <code>       - source code to try to compile, must define 'main'
 <var>        - variable to store whether the source code compiled
                Will be created as an internal cache variable.
 <fail-regex> - fail if test output matches this regex

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckCXXSourceRuns
------------------

Check if the given C++ source code compiles and runs.

CHECK_CXX_SOURCE_RUNS(<code> <var>)

::

 <code>   - source code to try to compile
 <var>    - variable to store the result
            (1 for success, empty for failure)
            Will be created as an internal cache variable.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckCXXSymbolExists
--------------------

Check if a symbol exists as a function, variable, or macro in C++

CHECK_CXX_SYMBOL_EXISTS(<symbol> <files> <variable>)

Check that the <symbol> is available after including given header
<files> and store the result in a <variable>.  Specify the list of
files in one argument as a semicolon-separated list.
CHECK_CXX_SYMBOL_EXISTS() can be used to check in C++ files, as
opposed to CHECK_SYMBOL_EXISTS(), which works only for C.

If the header files define the symbol as a macro it is considered
available and assumed to work.  If the header files declare the symbol
as a function or variable then the symbol must also be available for
linking.  If the symbol is a type or enum value it will not be
recognized (consider using CheckTypeSize or CheckCSourceCompiles).

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckFortranCompilerFlag
------------------------

Check whether the Fortran compiler supports a given flag.

CHECK_Fortran_COMPILER_FLAG(<flag> <var>)

::

 <flag> - the compiler flag
 <var>  - variable to store the result
          Will be created as an internal cache variable.

This internally calls the check_fortran_source_compiles macro and
sets CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for
CheckFortranSourceCompiles for a listing of variables that can
otherwise modify the build.  The result only tells that the compiler
does not give an error message when it encounters the flag.  If the
flag has any effect or even a specific one is beyond the scope of
this module.

CheckFortranFunctionExists
--------------------------

macro which checks if the Fortran function exists

CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)

::

 FUNCTION - the name of the Fortran function
 VARIABLE - variable to store the result
            Will be created as an internal cache variable.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_LIBRARIES = list of libraries to link

CheckFortranSourceCompiles
--------------------------

Check if given Fortran source compiles and links into an executable::

 CHECK_Fortran_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])

The arguments are:

``<code>``
  Source code to try to compile.  It must define a PROGRAM entry point.
``<var>``
  Variable to store whether the source code compiled.
  Will be created as an internal cache variable.
``<fail-regex>``
  Fail if test output matches this regex.

The following variables may be set before calling this macro to modify
the way the check is run::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckFunctionExists
-------------------

Check if a C function can be linked

CHECK_FUNCTION_EXISTS(<function> <variable>)

Check that the <function> is provided by libraries on the system and
store the result in a <variable>.  This does not verify that any
system header file declares the function, only that it can be found at
link time (consider using CheckSymbolExists).
<variable> will be created as an internal cache variable.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckIncludeFileCXX
-------------------

Provides a macro to check if a header file can be included in ``CXX``.

.. command:: CHECK_INCLUDE_FILE_CXX

  ::

   CHECK_INCLUDE_FILE_CXX(<include> <variable> [<flags>])

 Check if the given ``<include>`` file may be included in a ``CXX``
 source file and store the result in an internal cache entry named
 ``<variable>``.  The optional third argument may be used to add
 compilation flags to the check (or use ``CMAKE_REQUIRED_FLAGS`` below).

The following variables may be set before calling this macro to modify
the way the check is run:

``CMAKE_REQUIRED_FLAGS``
  string of compile command line flags
``CMAKE_REQUIRED_DEFINITIONS``
  list of macros to define (-DFOO=bar)
``CMAKE_REQUIRED_INCLUDES``
  list of include directories
``CMAKE_REQUIRED_QUIET``
  execute quietly without messages

See modules ``CheckIncludeFile`` and ``CheckIncludeFiles``
to check for one or more ``C`` headers.

CheckIncludeFile
----------------

Provides a macro to check if a header file can be included in ``C``.

.. command:: CHECK_INCLUDE_FILE

  ::

   CHECK_INCLUDE_FILE(<include> <variable> [<flags>])

 Check if the given ``<include>`` file may be included in a ``C``
 source file and store the result in an internal cache entry named
 ``<variable>``.  The optional third argument may be used to add
 compilation flags to the check (or use ``CMAKE_REQUIRED_FLAGS`` below).

The following variables may be set before calling this macro to modify
the way the check is run:

``CMAKE_REQUIRED_FLAGS``
  string of compile command line flags
``CMAKE_REQUIRED_DEFINITIONS``
  list of macros to define (-DFOO=bar)
``CMAKE_REQUIRED_INCLUDES``
  list of include directories
``CMAKE_REQUIRED_QUIET``
  execute quietly without messages

See the ``CheckIncludeFiles`` module to check for multiple headers
at once.  See the ``CheckIncludeFileCXX`` module to check for headers
using the ``CXX`` language.

CheckIncludeFiles
-----------------

Provides a macro to check if a list of one or more header files can
be included together in ``C``.

.. command:: CHECK_INCLUDE_FILES

  ::

   CHECK_INCLUDE_FILES("<includes>" <variable>)

 Check if the given ``<includes>`` list may be included together
 in a ``C`` source file and store the result in an internal cache
 entry named ``<variable>``.  Specify the ``<includes>`` argument
 as a :ref:`;-list <CMake Language Lists>` of header file names.

The following variables may be set before calling this macro to modify
the way the check is run:

``CMAKE_REQUIRED_FLAGS``
  string of compile command line flags
``CMAKE_REQUIRED_DEFINITIONS``
  list of macros to define (-DFOO=bar)
``CMAKE_REQUIRED_INCLUDES``
  list of include directories
``CMAKE_REQUIRED_QUIET``
  execute quietly without messages

See modules ``CheckIncludeFile`` and ``CheckIncludeFileCXX``
to check for a single header file in ``C`` or ``CXX`` languages.

CheckLanguage
-------------

Check if a language can be enabled

Usage:

::

 check_language(<lang>)

where <lang> is a language that may be passed to enable_language()
such as "Fortran".  If CMAKE_<lang>_COMPILER is already defined the
check does nothing.  Otherwise it tries enabling the language in a
test project.  The result is cached in CMAKE_<lang>_COMPILER as the
compiler that was found, or NOTFOUND if the language cannot be
enabled.

Example:

::

 check_language(Fortran)
 if(CMAKE_Fortran_COMPILER)
   enable_language(Fortran)
 else()
   message(STATUS "No Fortran support")
 endif()

CheckLibraryExists
------------------

Check if the function exists.

CHECK_LIBRARY_EXISTS (LIBRARY FUNCTION LOCATION VARIABLE)

::

 LIBRARY  - the name of the library you are looking for
 FUNCTION - the name of the function
 LOCATION - location where the library should be found
 VARIABLE - variable to store the result
            Will be created as an internal cache variable.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckPrototypeDefinition
------------------------

Check if the protoype we expect is correct.

check_prototype_definition(FUNCTION PROTOTYPE RETURN HEADER VARIABLE)

::

 FUNCTION - The name of the function (used to check if prototype exists)
 PROTOTYPE- The prototype to check.
 RETURN - The return value of the function.
 HEADER - The header files required.
 VARIABLE - The variable to store the result.
            Will be created as an internal cache variable.

Example:

::

 check_prototype_definition(getpwent_r
  "struct passwd *getpwent_r(struct passwd *src, char *buf, int buflen)"
  "NULL"
  "unistd.h;pwd.h"
  SOLARIS_GETPWENT_R)

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckStructHasMember
--------------------

Check if the given struct or class has the specified member variable

::

 CHECK_STRUCT_HAS_MEMBER(<struct> <member> <header> <variable>
                         [LANGUAGE <language>])

::

 <struct> - the name of the struct or class you are interested in
 <member> - the member which existence you want to check
 <header> - the header(s) where the prototype should be declared
 <variable> - variable to store the result
 <language> - the compiler to use (C or CXX)

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

Example: CHECK_STRUCT_HAS_MEMBER("struct timeval" tv_sec sys/select.h
HAVE_TIMEVAL_TV_SEC LANGUAGE C)

CheckSymbolExists
-----------------

Check if a symbol exists as a function, variable, or macro

CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)

Check that the <symbol> is available after including given header
<files> and store the result in a <variable>.  Specify the list of
files in one argument as a semicolon-separated list.
<variable> will be created as an internal cache variable.

If the header files define the symbol as a macro it is considered
available and assumed to work.  If the header files declare the symbol
as a function or variable then the symbol must also be available for
linking.  If the symbol is a type or enum value it will not be
recognized (consider using CheckTypeSize or CheckCSourceCompiles).  If
the check needs to be done in C++, consider using
CHECK_CXX_SYMBOL_EXISTS(), which does the same as
CHECK_SYMBOL_EXISTS(), but in C++.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CheckTypeSize
-------------

Check sizeof a type

::

 CHECK_TYPE_SIZE(TYPE VARIABLE [BUILTIN_TYPES_ONLY]
                               [LANGUAGE <language>])

Check if the type exists and determine its size.  On return,
"HAVE_${VARIABLE}" holds the existence of the type, and "${VARIABLE}"
holds one of the following:

::

 <size> = type has non-zero size <size>
 "0"    = type has arch-dependent size (see below)
 ""     = type does not exist

Both ``HAVE_${VARIABLE}`` and ``${VARIABLE}`` will be created as internal
cache variables.

Furthermore, the variable "${VARIABLE}_CODE" holds C preprocessor code
to define the macro "${VARIABLE}" to the size of the type, or leave
the macro undefined if the type does not exist.

The variable "${VARIABLE}" may be "0" when CMAKE_OSX_ARCHITECTURES has
multiple architectures for building OS X universal binaries.  This
indicates that the type size varies across architectures.  In this
case "${VARIABLE}_CODE" contains C preprocessor tests mapping from
each architecture macro to the corresponding type size.  The list of
architecture macros is stored in "${VARIABLE}_KEYS", and the value for
each key is stored in "${VARIABLE}-${KEY}".

If the BUILTIN_TYPES_ONLY option is not given, the macro checks for
headers <sys/types.h>, <stdint.h>, and <stddef.h>, and saves results
in HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H.  The type size
check automatically includes the available headers, thus supporting
checks of types defined in the headers.

If LANGUAGE is set, the specified compiler will be used to perform the
check. Acceptable values are C and CXX

Despite the name of the macro you may use it to check the size of more
complex expressions, too.  To check e.g.  for the size of a struct
member you can do something like this:

::

 check_type_size("((struct something*)0)->member" SIZEOF_MEMBER)

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_INCLUDES = list of include directories
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages
 CMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include

CheckVariableExists
-------------------

Check if the variable exists.

::

 CHECK_VARIABLE_EXISTS(VAR VARIABLE)

::

 VAR      - the name of the variable
 VARIABLE - variable to store the result
            Will be created as an internal cache variable.

This macro is only for C variables.

The following variables may be set before calling this macro to modify
the way the check is run:

::

 CMAKE_REQUIRED_FLAGS = string of compile command line flags
 CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
 CMAKE_REQUIRED_LIBRARIES = list of libraries to link
 CMAKE_REQUIRED_QUIET = execute quietly without messages

CMakeAddFortranSubdirectory
---------------------------

Use MinGW gfortran from VS if a fortran compiler is not found.

The 'add_fortran_subdirectory' function adds a subdirectory to a
project that contains a fortran only sub-project.  The module will
check the current compiler and see if it can support fortran.  If no
fortran compiler is found and the compiler is MSVC, then this module
will find the MinGW gfortran.  It will then use an external project to
build with the MinGW tools.  It will also create imported targets for
the libraries created.  This will only work if the fortran code is
built into a dll, so BUILD_SHARED_LIBS is turned on in the project.
In addition the CMAKE_GNUtoMS option is set to on, so that the MS .lib
files are created.  Usage is as follows:

::

 cmake_add_fortran_subdirectory(
  <subdir>                # name of subdirectory
  PROJECT <project_name>  # project name in subdir top CMakeLists.txt
  ARCHIVE_DIR <dir>       # dir where project places .lib files
  RUNTIME_DIR <dir>       # dir where project places .dll files
  LIBRARIES <lib>...      # names of library targets to import
  LINK_LIBRARIES          # link interface libraries for LIBRARIES
   [LINK_LIBS <lib> <dep>...]...
  CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake
  NO_EXTERNAL_INSTALL     # skip installation of external project
  )

Relative paths in ARCHIVE_DIR and RUNTIME_DIR are interpreted with
respect to the build directory corresponding to the source directory
in which the function is invoked.

Limitations:

NO_EXTERNAL_INSTALL is required for forward compatibility with a
future version that supports installation of the external project
binaries during "make install".

CMakeBackwardCompatibilityCXX
-----------------------------

define a bunch of backwards compatibility variables

::

 CMAKE_ANSI_CXXFLAGS - flag for ansi c++
 CMAKE_HAS_ANSI_STRING_STREAM - has <strstream>
 include(TestForANSIStreamHeaders)
 include(CheckIncludeFileCXX)
 include(TestForSTDNamespace)
 include(TestForANSIForScope)

CMakeDependentOption
--------------------

Macro to provide an option dependent on other options.

This macro presents an option to the user only if a set of other
conditions are true.  When the option is not presented a default value
is used, but any value set by the user is preserved for when the
option is presented again.  Example invocation:

::

 CMAKE_DEPENDENT_OPTION(USE_FOO "Use Foo" ON
                        "USE_BAR;NOT USE_ZOT" OFF)

If USE_BAR is true and USE_ZOT is false, this provides an option
called USE_FOO that defaults to ON.  Otherwise, it sets USE_FOO to
OFF.  If the status of USE_BAR or USE_ZOT ever changes, any value for
the USE_FOO option is saved so that when the option is re-enabled it
retains its old value.

CMakeDetermineVSServicePack
---------------------------

Deprecated.  Do not use.

The functionality of this module has been superseded by the
``CMAKE_<LANG>_COMPILER_VERSION`` variable that contains
the compiler version number.

Determine the Visual Studio service pack of the 'cl' in use.

Usage::

 if(MSVC)
   include(CMakeDetermineVSServicePack)
   DetermineVSServicePack( my_service_pack )
   if( my_service_pack )
     message(STATUS "Detected: ${my_service_pack}")
   endif()
 endif()

Function DetermineVSServicePack sets the given variable to one of the
following values or an empty string if unknown::

 vc80, vc80sp1
 vc90, vc90sp1
 vc100, vc100sp1
 vc110, vc110sp1, vc110sp2, vc110sp3, vc110sp4

CMakeExpandImportedTargets
--------------------------

Deprecated.  Do not use.

This module was once needed to expand imported targets to the underlying
libraries they reference on disk for use with the ``try_compile()``
and ``try_run()`` commands.  These commands now support imported
libraries in their ``LINK_LIBRARIES`` options (since CMake 2.8.11
for ``try_compile()`` and since CMake 3.2 for ``try_run()``).

This module does not support the policy ``CMP0022`` ``NEW``
behavior or use of the ``INTERFACE_LINK_LIBRARIES`` property
because ``generator expressions``
cannot be evaluated during configuration.

::

 CMAKE_EXPAND_IMPORTED_TARGETS(<var> LIBRARIES lib1 lib2...libN
                               [CONFIGURATION <config>])

CMAKE_EXPAND_IMPORTED_TARGETS() takes a list of libraries and replaces
all imported targets contained in this list with their actual file
paths of the referenced libraries on disk, including the libraries
from their link interfaces.  If a CONFIGURATION is given, it uses the
respective configuration of the imported targets if it exists.  If no
CONFIGURATION is given, it uses the first configuration from
${CMAKE_CONFIGURATION_TYPES} if set, otherwise ${CMAKE_BUILD_TYPE}.

::

 cmake_expand_imported_targets(expandedLibs
   LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
   CONFIGURATION "${CMAKE_TRY_COMPILE_CONFIGURATION}" )

CMakeFindDependencyMacro
-------------------------

::

 find_dependency(<dep> [<version> [EXACT]])

``find_dependency()`` wraps a ``find_package()`` call for a package
dependency. It is designed to be used in a <package>Config.cmake file, and it
forwards the correct parameters for EXACT, QUIET and REQUIRED which were
passed to the original ``find_package()`` call.  It also sets an
informative diagnostic message if the dependency could not be found.


CMakeFindFrameworks
-------------------

helper module to find OSX frameworks

CMakeFindPackageMode
--------------------



This file is executed by cmake when invoked with --find-package.  It
expects that the following variables are set using -D:

``NAME``
  name of the package
``COMPILER_ID``
  the CMake compiler ID for which the result is,
  i.e. GNU/Intel/Clang/MSVC, etc.
``LANGUAGE``
  language for which the result will be used,
  i.e. C/CXX/Fortan/ASM
``MODE``
  ``EXIST``
    only check for existence of the given package
  ``COMPILE``
    print the flags needed for compiling an object file which uses
    the given package
  ``LINK``
    print the flags needed for linking when using the given package
``QUIET``
  if TRUE, don't print anything

CMakeForceCompiler
------------------

Deprecated.  Do not use.

The macros provided by this module were once intended for use by
cross-compiling toolchain files when CMake was not able to automatically
detect the compiler identification.  Since the introduction of this module,
CMake's compiler identification capabilities have improved and can now be
taught to recognize any compiler.  Furthermore, the suite of information
CMake detects from a compiler is now too extensive to be provided by
toolchain files using these macros.

One common use case for this module was to skip CMake's checks for a
working compiler when using a cross-compiler that cannot link binaries
without special flags or custom linker scripts.  This case is now supported
by setting the ``CMAKE_TRY_COMPILE_TARGET_TYPE`` variable in the
toolchain file instead.

-------------------------------------------------------------------------

Macro CMAKE_FORCE_C_COMPILER has the following signature:

::

 CMAKE_FORCE_C_COMPILER(<compiler> <compiler-id>)

It sets CMAKE_C_COMPILER to the given compiler and the cmake internal
variable CMAKE_C_COMPILER_ID to the given compiler-id.  It also
bypasses the check for working compiler and basic compiler information
tests.

Macro CMAKE_FORCE_CXX_COMPILER has the following signature:

::

 CMAKE_FORCE_CXX_COMPILER(<compiler> <compiler-id>)

It sets CMAKE_CXX_COMPILER to the given compiler and the cmake
internal variable CMAKE_CXX_COMPILER_ID to the given compiler-id.  It
also bypasses the check for working compiler and basic compiler
information tests.

Macro CMAKE_FORCE_Fortran_COMPILER has the following signature:

::

 CMAKE_FORCE_Fortran_COMPILER(<compiler> <compiler-id>)

It sets CMAKE_Fortran_COMPILER to the given compiler and the cmake
internal variable CMAKE_Fortran_COMPILER_ID to the given compiler-id.
It also bypasses the check for working compiler and basic compiler
information tests.

So a simple toolchain file could look like this:

::

 include (CMakeForceCompiler)
 set(CMAKE_SYSTEM_NAME Generic)
 CMAKE_FORCE_C_COMPILER   (chc12 MetrowerksHicross)
 CMAKE_FORCE_CXX_COMPILER (chc12 MetrowerksHicross)

CMakeGraphVizOptions
--------------------

The builtin graphviz support of CMake.

Variables specific to the graphviz support
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CMake
can generate graphviz files, showing the dependencies between the
targets in a project and also external libraries which are linked
against.  When CMake is run with the --graphviz=foo option, it will
produce

* a foo.dot file showing all dependencies in the project
* a foo.dot.<target> file for each target, file showing on which other targets the respective target depends
* a foo.dot.<target>.dependers file, showing which other targets depend on the respective target

This can result in huge graphs.  Using the file
CMakeGraphVizOptions.cmake the look and content of the generated
graphs can be influenced.  This file is searched first in
${CMAKE_BINARY_DIR} and then in ${CMAKE_SOURCE_DIR}.  If found, it is
read and the variables set in it are used to adjust options for the
generated graphviz files.

.. variable:: GRAPHVIZ_GRAPH_TYPE

 The graph type

 * Mandatory : NO
 * Default   : "digraph"

.. variable:: GRAPHVIZ_GRAPH_NAME

 The graph name.

 * Mandatory : NO
 * Default   : "GG"

.. variable:: GRAPHVIZ_GRAPH_HEADER

 The header written at the top of the graphviz file.

 * Mandatory : NO
 * Default   : "node [n  fontsize = "12"];"

.. variable:: GRAPHVIZ_NODE_PREFIX

 The prefix for each node in the graphviz file.

 * Mandatory : NO
 * Default   : "node"

.. variable:: GRAPHVIZ_EXECUTABLES

 Set this to FALSE to exclude executables from the generated graphs.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_STATIC_LIBS

 Set this to FALSE to exclude static libraries from the generated graphs.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_SHARED_LIBS

 Set this to FALSE to exclude shared libraries from the generated graphs.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_MODULE_LIBS

 Set this to FALSE to exclude module libraries from the generated graphs.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_EXTERNAL_LIBS

 Set this to FALSE to exclude external libraries from the generated graphs.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_IGNORE_TARGETS

 A list of regular expressions for ignoring targets.

 * Mandatory : NO
 * Default   : empty

.. variable:: GRAPHVIZ_GENERATE_PER_TARGET

 Set this to FALSE to exclude per target graphs ``foo.dot.<target>``.

 * Mandatory : NO
 * Default   : TRUE

.. variable:: GRAPHVIZ_GENERATE_DEPENDERS

 Set this to FALSE to exclude depender graphs ``foo.dot.<target>.dependers``.

 * Mandatory : NO
 * Default   : TRUE

CMakePackageConfigHelpers
-------------------------

Helpers functions for creating config files that can be included by other
projects to find and use a package.

Adds the ``configure_package_config_file()`` and
``write_basic_package_version_file()`` commands.

Generating a Package Configuration File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. command:: configure_package_config_file

 Create a config file for a project::

 configure_package_config_file(<input> <output>
   INSTALL_DESTINATION <path>
   [PATH_VARS <var1> <var2> ... <varN>]
   [NO_SET_AND_CHECK_MACRO]
   [NO_CHECK_REQUIRED_COMPONENTS_MACRO]
   [INSTALL_PREFIX <path>]
   )

``configure_package_config_file()`` should be used instead of the plain
``configure_file()`` command when creating the ``<Name>Config.cmake``
or ``<Name>-config.cmake`` file for installing a project or library.  It helps
making the resulting package relocatable by avoiding hardcoded paths in the
installed ``Config.cmake`` file.

In a ``FooConfig.cmake`` file there may be code like this to make the install
destinations know to the using project:

 set(FOO_INCLUDE_DIR   "@CMAKE_INSTALL_FULL_INCLUDEDIR@" )
 set(FOO_DATA_DIR   "@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@" )
 set(FOO_ICONS_DIR   "@CMAKE_INSTALL_PREFIX@/share/icons" )
 ...logic to determine installedPrefix from the own location...
 set(FOO_CONFIG_DIR  "${installedPrefix}/@CONFIG_INSTALL_DIR@" )

All 4 options shown above are not sufficient, since the first 3 hardcode the
absolute directory locations, and the 4th case works only if the logic to
determine the ``installedPrefix`` is correct, and if ``CONFIG_INSTALL_DIR``
contains a relative path, which in general cannot be guaranteed.  This has the
effect that the resulting ``FooConfig.cmake`` file would work poorly under
Windows and OSX, where users are used to choose the install location of a
binary package at install time, independent from how
``CMAKE_INSTALL_PREFIX`` was set at build/cmake time.

Using ``configure_package_config_file`` helps.  If used correctly, it makes
the resulting ``FooConfig.cmake`` file relocatable.  Usage:

1. write a ``FooConfig.cmake.in`` file as you are used to
2. insert a line containing only the string ``@PACKAGE_INIT@``
3. instead of ``set(FOO_DIR "@SOME_INSTALL_DIR@")``, use
   ``set(FOO_DIR "@PACKAGE_SOME_INSTALL_DIR@")`` (this must be after the
   ``@PACKAGE_INIT@`` line)
4. instead of using the normal ``configure_file()``, use
   ``configure_package_config_file()``



The ``<input>`` and ``<output>`` arguments are the input and output file, the
same way as in ``configure_file()``.

The ``<path>`` given to ``INSTALL_DESTINATION`` must be the destination where
the ``FooConfig.cmake`` file will be installed to.  This path can either be
absolute, or relative to the ``INSTALL_PREFIX`` path.

The variables ``<var1>`` to ``<varN>`` given as ``PATH_VARS`` are the
variables which contain install destinations.  For each of them the macro will
create a helper variable ``PACKAGE_<var...>``.  These helper variables must be
used in the ``FooConfig.cmake.in`` file for setting the installed location.
They are calculated by ``configure_package_config_file`` so that they are
always relative to the installed location of the package.  This works both for
relative and also for absolute locations.  For absolute locations it works
only if the absolute location is a subdirectory of ``INSTALL_PREFIX``.

If the ``INSTALL_PREFIX`` argument is passed, this is used as base path to
calculate all the relative paths.  The ``<path>`` argument must be an absolute
path.  If this argument is not passed, the ``CMAKE_INSTALL_PREFIX``
variable will be used instead.  The default value is good when generating a
FooConfig.cmake file to use your package from the install tree.  When
generating a FooConfig.cmake file to use your package from the build tree this
option should be used.

By default ``configure_package_config_file`` also generates two helper macros,
``set_and_check()`` and ``check_required_components()`` into the
``FooConfig.cmake`` file.

``set_and_check()`` should be used instead of the normal ``set()`` command for
setting directories and file locations.  Additionally to setting the variable
it also checks that the referenced file or directory actually exists and fails
with a ``FATAL_ERROR`` otherwise.  This makes sure that the created
``FooConfig.cmake`` file does not contain wrong references.
When using the ``NO_SET_AND_CHECK_MACRO``, this macro is not generated
into the ``FooConfig.cmake`` file.

``check_required_components(<package_name>)`` should be called at the end of
the ``FooConfig.cmake`` file if the package supports components.  This macro
checks whether all requested, non-optional components have been found, and if
this is not the case, sets the ``Foo_FOUND`` variable to ``FALSE``, so that
the package is considered to be not found.  It does that by testing the
``Foo_<Component>_FOUND`` variables for all requested required components.
When using the ``NO_CHECK_REQUIRED_COMPONENTS_MACRO`` option, this macro is
not generated into the ``FooConfig.cmake`` file.

For an example see below the documentation for
``write_basic_package_version_file()``.

Generating a Package Version File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. command:: write_basic_package_version_file

 Create a version file for a project::

 write_basic_package_version_file(<filename>
   [VERSION <major.minor.patch>]
   COMPATIBILITY <AnyNewerVersion|SameMajorVersion|ExactVersion> )

Writes a file for use as ``<package>ConfigVersion.cmake`` file to
``<filename>``.  See the documentation of ``find_package()`` for
details on this.

``<filename>`` is the output filename, it should be in the build tree.
``<major.minor.patch>`` is the version number of the project to be installed.

If no ``VERSION`` is given, the ``PROJECT_VERSION`` variable is used.
If this hasn't been set, it errors out.

The ``COMPATIBILITY`` mode ``AnyNewerVersion`` means that the installed
package version will be considered compatible if it is newer or exactly the
same as the requested version.  This mode should be used for packages which
are fully backward compatible, also across major versions.
If ``SameMajorVersion`` is used instead, then the behaviour differs from
``AnyNewerVersion`` in that the major version number must be the same as
requested, e.g.  version 2.0 will not be considered compatible if 1.0 is
requested.  This mode should be used for packages which guarantee backward
compatibility within the same major version.
If ``ExactVersion`` is used, then the package is only considered compatible if
the requested version matches exactly its own version number (not considering
the tweak version).  For example, version 1.2.3 of a package is only
considered compatible to requested version 1.2.3.  This mode is for packages
without compatibility guarantees.
If your project has more elaborated version matching rules, you will need to
write your own custom ``ConfigVersion.cmake`` file instead of using this
macro.

Internally, this macro executes ``configure_file()`` to create the
resulting version file.  Depending on the ``COMPATIBLITY``, either the file
``BasicConfigVersion-SameMajorVersion.cmake.in`` or
``BasicConfigVersion-AnyNewerVersion.cmake.in`` is used.  Please note that
these two files are internal to CMake and you should not call
``configure_file()`` on them yourself, but they can be used as starting
point to create more sophisticted custom ``ConfigVersion.cmake`` files.

Example Generating Package Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Example using both ``configure_package_config_file()`` and
``write_basic_package_version_file()``:

``CMakeLists.txt``:

 set(INCLUDE_INSTALL_DIR include/ ... CACHE )
 set(LIB_INSTALL_DIR lib/ ... CACHE )
 set(SYSCONFIG_INSTALL_DIR etc/foo/ ... CACHE )
 ...
 include(CMakePackageConfigHelpers)
 configure_package_config_file(FooConfig.cmake.in
   ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake
   INSTALL_DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake
   PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)
 write_basic_package_version_file(
   ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake
   VERSION 1.2.3
   COMPATIBILITY SameMajorVersion )
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake
               ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake
         DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake )

``FooConfig.cmake.in``:

 set(FOO_VERSION x.y.z)
 ...
 @PACKAGE_INIT@
 ...
 set_and_check(FOO_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
 set_and_check(FOO_SYSCONFIG_DIR "@PACKAGE_SYSCONFIG_INSTALL_DIR@")

 check_required_components(Foo)

CMakeParseArguments
-------------------

This module once implemented the ``cmake_parse_arguments()`` command
that is now implemented natively by CMake.  It is now an empty placeholder
for compatibility with projects that include it to get the command from
CMake 3.4 and lower.

CMakePrintHelpers
-----------------

Convenience macros for printing properties and variables, useful e.g. for debugging.

::

 CMAKE_PRINT_PROPERTIES([TARGETS target1 ..  targetN]
                        [SOURCES source1 .. sourceN]
                        [DIRECTORIES dir1 .. dirN]
                        [TESTS test1 .. testN]
                        [CACHE_ENTRIES entry1 .. entryN]
                        PROPERTIES prop1 .. propN )

This macro prints the values of the properties of the given targets,
source files, directories, tests or cache entries.  Exactly one of the
scope keywords must be used.  Example::

 cmake_print_properties(TARGETS foo bar PROPERTIES
                        LOCATION INTERFACE_INCLUDE_DIRS)

This will print the LOCATION and INTERFACE_INCLUDE_DIRS properties for
both targets foo and bar.



CMAKE_PRINT_VARIABLES(var1 var2 ..  varN)

This macro will print the name of each variable followed by its value.
Example::

 cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION DOES_NOT_EXIST)

Gives::

 -- CMAKE_C_COMPILER="/usr/bin/gcc" ; CMAKE_MAJOR_VERSION="2" ; DOES_NOT_EXIST=""

CMakePrintSystemInformation
---------------------------

print system information

This file can be used for diagnostic purposes just include it in a
project to see various internal CMake variables.

CMakePushCheckState
-------------------



This module defines three macros: CMAKE_PUSH_CHECK_STATE()
CMAKE_POP_CHECK_STATE() and CMAKE_RESET_CHECK_STATE() These macros can
be used to save, restore and reset (i.e., clear contents) the state of
the variables CMAKE_REQUIRED_FLAGS, CMAKE_REQUIRED_DEFINITIONS,
CMAKE_REQUIRED_LIBRARIES, CMAKE_REQUIRED_INCLUDES and CMAKE_EXTRA_INCLUDE_FILES
used by the various Check-files coming with CMake, like e.g.
check_function_exists() etc.  The variable contents are pushed on a
stack, pushing multiple times is supported.  This is useful e.g.  when
executing such tests in a Find-module, where they have to be set, but
after the Find-module has been executed they should have the same
value as they had before.

CMAKE_PUSH_CHECK_STATE() macro receives optional argument RESET.
Whether it's specified, CMAKE_PUSH_CHECK_STATE() will set all
CMAKE_REQUIRED_* variables to empty values, same as
CMAKE_RESET_CHECK_STATE() call will do.

Usage:

::

 cmake_push_check_state(RESET)
 set(CMAKE_REQUIRED_DEFINITIONS -DSOME_MORE_DEF)
 check_function_exists(...)
 cmake_reset_check_state()
 set(CMAKE_REQUIRED_DEFINITIONS -DANOTHER_DEF)
 check_function_exists(...)
 cmake_pop_check_state()

CMakeVerifyManifest
-------------------



CMakeVerifyManifest.cmake

This script is used to verify that embedded manifests and side by side
manifests for a project match.  To run this script, cd to a directory
and run the script with cmake -P.  On the command line you can pass in
versions that are OK even if not found in the .manifest files.  For
example, cmake -Dallow_versions=8.0.50608.0
-PCmakeVerifyManifest.cmake could be used to allow an embedded manifest
of 8.0.50608.0 to be used in a project even if that version was not
found in the .manifest file.

CPackBundle
-----------

CPack Bundle generator (Mac OS X) specific options

Variables specific to CPack Bundle generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Installers built on Mac OS X using the Bundle generator use the
aforementioned DragNDrop (CPACK_DMG_xxx) variables, plus the following
Bundle-specific parameters (CPACK_BUNDLE_xxx).

.. variable:: CPACK_BUNDLE_NAME

 The name of the generated bundle. This appears in the OSX finder as the
 bundle name. Required.

.. variable:: CPACK_BUNDLE_PLIST

 Path to an OSX plist file that will be used for the generated bundle. This
 assumes that the caller has generated or specified their own Info.plist
 file. Required.

.. variable:: CPACK_BUNDLE_ICON

 Path to an OSX icon file that will be used as the icon for the generated
 bundle. This is the icon that appears in the OSX finder for the bundle, and
 in the OSX dock when the bundle is opened.  Required.

.. variable:: CPACK_BUNDLE_STARTUP_COMMAND

 Path to a startup script. This is a path to an executable or script that
 will be run whenever an end-user double-clicks the generated bundle in the
 OSX Finder. Optional.

.. variable:: CPACK_BUNDLE_APPLE_CERT_APP

 The name of your Apple supplied code signing certificate for the application.
 The name usually takes the form "Developer ID Application: [Name]" or
 "3rd Party Mac Developer Application: [Name]". If this variable is not set
 the application will not be signed.

.. variable:: CPACK_BUNDLE_APPLE_ENTITLEMENTS

 The name of the plist file that contains your apple entitlements for sandboxing
 your application. This file is required for submission to the Mac App Store.

.. variable:: CPACK_BUNDLE_APPLE_CODESIGN_FILES

 A list of additional files that you wish to be signed. You do not need to
 list the main application folder, or the main executable. You should
 list any frameworks and plugins that are included in your app bundle.

.. variable:: CPACK_BUNDLE_APPLE_CODESIGN_PARAMETER

 Additional parameter that will passed to codesign.
 Default value: "--deep -f"

.. variable:: CPACK_COMMAND_CODESIGN

 Path to the codesign(1) command used to sign applications with an
 Apple cert. This variable can be used to override the automatically
 detected command (or specify its location if the auto-detection fails
 to find it.)

CPackComponent
--------------

Build binary and source package installers

Variables concerning CPack Components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The CPackComponent module is the module which handles the component
part of CPack.  See CPack module for general information about CPack.

For certain kinds of binary installers (including the graphical
installers on Mac OS X and Windows), CPack generates installers that
allow users to select individual application components to install.
The contents of each of the components are identified by the COMPONENT
argument of CMake's INSTALL command.  These components can be
annotated with user-friendly names and descriptions, inter-component
dependencies, etc., and grouped in various ways to customize the
resulting installer.  See the cpack_add_* commands, described below,
for more information about component-specific installations.

Component-specific installation allows users to select specific sets
of components to install during the install process.  Installation
components are identified by the COMPONENT argument of CMake's INSTALL
commands, and should be further described by the following CPack
commands:

.. variable:: CPACK_COMPONENTS_ALL

 The list of component to install.

 The default value of this variable is computed by CPack and contains all
 components defined by the project.  The user may set it to only include the
 specified components.

.. variable:: CPACK_<GENNAME>_COMPONENT_INSTALL

 Enable/Disable component install for CPack generator <GENNAME>.

 Each CPack Generator (RPM, DEB, ARCHIVE, NSIS, DMG, etc...) has a legacy
 default behavior.  e.g.  RPM builds monolithic whereas NSIS builds
 component.  One can change the default behavior by setting this variable to
 0/1 or OFF/ON.

.. variable:: CPACK_COMPONENTS_GROUPING

 Specify how components are grouped for multi-package component-aware CPack
 generators.

 Some generators like RPM or ARCHIVE family (TGZ, ZIP, ...) generates
 several packages files when asked for component packaging.  They group
 the component differently depending on the value of this variable:

 * ONE_PER_GROUP (default): creates one package file per component group
 * ALL_COMPONENTS_IN_ONE : creates a single package with all (requested) component
 * IGNORE : creates one package per component, i.e. IGNORE component group

 One can specify different grouping for different CPack generator by
 using a CPACK_PROJECT_CONFIG_FILE.

.. variable:: CPACK_COMPONENT_<compName>_DISPLAY_NAME

 The name to be displayed for a component.

.. variable:: CPACK_COMPONENT_<compName>_DESCRIPTION

 The description of a component.

.. variable:: CPACK_COMPONENT_<compName>_GROUP

 The group of a component.

.. variable:: CPACK_COMPONENT_<compName>_DEPENDS

 The dependencies (list of components) on which this component depends.

.. variable:: CPACK_COMPONENT_<compName>_REQUIRED

 True is this component is required.

.. command:: cpack_add_component

Describes a CPack installation
component named by the COMPONENT argument to a CMake INSTALL command.

::

 cpack_add_component(compname
                     [DISPLAY_NAME name]
                     [DESCRIPTION description]
                     [HIDDEN | REQUIRED | DISABLED ]
                     [GROUP group]
                     [DEPENDS comp1 comp2 ... ]
                     [INSTALL_TYPES type1 type2 ... ]
                     [DOWNLOADED]
                     [ARCHIVE_FILE filename])

The cmake_add_component command describes an installation component,
which the user can opt to install or remove as part of the graphical
installation process.  compname is the name of the component, as
provided to the COMPONENT argument of one or more CMake INSTALL
commands.

DISPLAY_NAME is the displayed name of the component, used in graphical
installers to display the component name.  This value can be any
string.

DESCRIPTION is an extended description of the component, used in
graphical installers to give the user additional information about the
component.  Descriptions can span multiple lines using ``\n`` as the
line separator.  Typically, these descriptions should be no more than
a few lines long.

HIDDEN indicates that this component will be hidden in the graphical
installer, so that the user cannot directly change whether it is
installed or not.

REQUIRED indicates that this component is required, and therefore will
always be installed.  It will be visible in the graphical installer,
but it cannot be unselected.  (Typically, required components are
shown greyed out).

DISABLED indicates that this component should be disabled (unselected)
by default.  The user is free to select this component for
installation, unless it is also HIDDEN.

DEPENDS lists the components on which this component depends.  If this
component is selected, then each of the components listed must also be
selected.  The dependency information is encoded within the installer
itself, so that users cannot install inconsistent sets of components.

GROUP names the component group of which this component is a part.  If
not provided, the component will be a standalone component, not part
of any component group.  Component groups are described with the
cpack_add_component_group command, detailed below.

INSTALL_TYPES lists the installation types of which this component is
a part.  When one of these installations types is selected, this
component will automatically be selected.  Installation types are
described with the cpack_add_install_type command, detailed below.

DOWNLOADED indicates that this component should be downloaded
on-the-fly by the installer, rather than packaged in with the
installer itself.  For more information, see the
cpack_configure_downloads command.

ARCHIVE_FILE provides a name for the archive file created by CPack to
be used for downloaded components.  If not supplied, CPack will create
a file with some name based on CPACK_PACKAGE_FILE_NAME and the name of
the component.  See cpack_configure_downloads for more information.

.. command:: cpack_add_component_group

Describes a group of related CPack installation components.

::

 cpack_add_component_group(groupname
                          [DISPLAY_NAME name]
                          [DESCRIPTION description]
                          [PARENT_GROUP parent]
                          [EXPANDED]
                          [BOLD_TITLE])

The cpack_add_component_group describes a group of installation
components, which will be placed together within the listing of
options.  Typically, component groups allow the user to
select/deselect all of the components within a single group via a
single group-level option.  Use component groups to reduce the
complexity of installers with many options.  groupname is an arbitrary
name used to identify the group in the GROUP argument of the
cpack_add_component command, which is used to place a component in a
group.  The name of the group must not conflict with the name of any
component.

DISPLAY_NAME is the displayed name of the component group, used in
graphical installers to display the component group name.  This value
can be any string.

DESCRIPTION is an extended description of the component group, used in
graphical installers to give the user additional information about the
components within that group.  Descriptions can span multiple lines
using ``\n`` as the line separator.  Typically, these descriptions
should be no more than a few lines long.

PARENT_GROUP, if supplied, names the parent group of this group.
Parent groups are used to establish a hierarchy of groups, providing
an arbitrary hierarchy of groups.

EXPANDED indicates that, by default, the group should show up as
"expanded", so that the user immediately sees all of the components
within the group.  Otherwise, the group will initially show up as a
single entry.

BOLD_TITLE indicates that the group title should appear in bold, to
call the user's attention to the group.

.. command:: cpack_add_install_type

Add a new installation type containing
a set of predefined component selections to the graphical installer.

::

 cpack_add_install_type(typename
                        [DISPLAY_NAME name])

The cpack_add_install_type command identifies a set of preselected
components that represents a common use case for an application.  For
example, a "Developer" install type might include an application along
with its header and library files, while an "End user" install type
might just include the application's executable.  Each component
identifies itself with one or more install types via the INSTALL_TYPES
argument to cpack_add_component.

DISPLAY_NAME is the displayed name of the install type, which will
typically show up in a drop-down box within a graphical installer.
This value can be any string.

.. command:: cpack_configure_downloads

Configure CPack to download
selected components on-the-fly as part of the installation process.

::

 cpack_configure_downloads(site
                           [UPLOAD_DIRECTORY dirname]
                           [ALL]
                           [ADD_REMOVE|NO_ADD_REMOVE])

The cpack_configure_downloads command configures installation-time
downloads of selected components.  For each downloadable component,
CPack will create an archive containing the contents of that
component, which should be uploaded to the given site.  When the user
selects that component for installation, the installer will download
and extract the component in place.  This feature is useful for
creating small installers that only download the requested components,
saving bandwidth.  Additionally, the installers are small enough that
they will be installed as part of the normal installation process, and
the "Change" button in Windows Add/Remove Programs control panel will
allow one to add or remove parts of the application after the original
installation.  On Windows, the downloaded-components functionality
requires the ZipDLL plug-in for NSIS, available at:

::

 http://nsis.sourceforge.net/ZipDLL_plug-in

On Mac OS X, installers that download components on-the-fly can only
be built and installed on system using Mac OS X 10.5 or later.

The site argument is a URL where the archives for downloadable
components will reside, e.g.,
https://cmake.org/files/2.6.1/installer/ All of the archives
produced by CPack should be uploaded to that location.

UPLOAD_DIRECTORY is the local directory where CPack will create the
various archives for each of the components.  The contents of this
directory should be uploaded to a location accessible by the URL given
in the site argument.  If omitted, CPack will use the directory
CPackUploads inside the CMake binary directory to store the generated
archives.

The ALL flag indicates that all components be downloaded.  Otherwise,
only those components explicitly marked as DOWNLOADED or that have a
specified ARCHIVE_FILE will be downloaded.  Additionally, the ALL
option implies ADD_REMOVE (unless NO_ADD_REMOVE is specified).

ADD_REMOVE indicates that CPack should install a copy of the installer
that can be called from Windows' Add/Remove Programs dialog (via the
"Modify" button) to change the set of installed components.
NO_ADD_REMOVE turns off this behavior.  This option is ignored on Mac
OS X.

CPackCygwin
-----------

Cygwin CPack generator (Cygwin).

Variables specific to CPack Cygwin generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The
following variable is specific to installers build on and/or for
Cygwin:

.. variable:: CPACK_CYGWIN_PATCH_NUMBER

 The Cygwin patch number.  FIXME: This documentation is incomplete.

.. variable:: CPACK_CYGWIN_PATCH_FILE

 The Cygwin patch file.  FIXME: This documentation is incomplete.

.. variable:: CPACK_CYGWIN_BUILD_SCRIPT

 The Cygwin build script.  FIXME: This documentation is incomplete.

CPackDeb
--------

The built in (binary) CPack Deb generator (Unix only)

Variables specific to CPack Debian (DEB) generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CPackDeb may be used to create Deb package using ``CPack``.
CPackDeb is a ``CPack`` generator thus it uses the ``CPACK_XXX``
variables used by ``CPack``.

CPackDeb generator should work on any Linux host but it will produce
better deb package when Debian specific tools ``dpkg-xxx`` are usable on
the build system.

CPackDeb has specific features which are controlled by the specifics
:code:`CPACK_DEBIAN_XXX` variables.

:code:`CPACK_DEBIAN_<COMPONENT>_XXXX` variables may be used in order to have
**component** specific values.  Note however that ``<COMPONENT>`` refers to
the **grouping name** written in upper case. It may be either a component name
or a component GROUP name.

Here are some CPackDeb wiki resources that are here for historic reasons and
are no longer maintained but may still prove useful:

 - https://cmake.org/Wiki/CMake:CPackConfiguration
 - https://cmake.org/Wiki/CMake:CPackPackageGenerators#DEB_.28UNIX_only.29

List of CPackRPM specific variables:

.. variable:: CPACK_DEB_PACKAGE_COMPONENT

 Enable component packaging for CPackRPM

 * Mandatory : NO
 * Default   : OFF

 If enabled (ON) multiple packages are generated. By default a single package
 containing files of all components is generated.

.. variable:: CPACK_DEBIAN_PACKAGE_NAME
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_NAME

 Set Package control field (variable is automatically transformed to lower
 case).

 * Mandatory : YES
 * Default   :

   - ``CPACK_PACKAGE_NAME`` for non-component based
     installations
   - ``CPACK_DEBIAN_PACKAGE_NAME`` suffixed with -<COMPONENT>
     for component-based installations.

 See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source

.. variable:: CPACK_DEBIAN_FILE_NAME
              CPACK_DEBIAN_<COMPONENT>_FILE_NAME

 Package file name.

 * Mandatory : YES
 * Default   : ``<CPACK_PACKAGE_FILE_NAME>[-<component>].deb``

 This may be set to ``DEB-DEFAULT`` to allow CPackDeb to generate package file
 name by itself in deb format::

   <PackageName>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb

 Alternatively provided package file name must end with ``.deb`` suffix.

 .. note::

   Preferred setting of this variable is ``DEB-DEFAULT`` but for backward
   compatibility with CPackDeb in CMake prior to version 3.6 this feature
   is disabled by default.

 .. note::

   By using non default filenames duplicate names may occur. Duplicate files
   get overwritten and it is up to the packager to set the variables in a
   manner that will prevent such errors.

.. variable:: CPACK_DEBIAN_PACKAGE_VERSION

 The Debian package version

 * Mandatory : YES
 * Default   : ``CPACK_PACKAGE_VERSION``

.. variable:: CPACK_DEBIAN_PACKAGE_RELEASE

 The Debian package release - Debian revision number.

 * Mandatory : YES
 * Default   : 1

 This is the numbering of the DEB package itself, i.e. the version of the
 packaging and not the version of the content (see
 ``CPACK_DEBIAN_PACKAGE_VERSION``). One may change the default value
 if the previous packaging was buggy and/or you want to put here a fancy Linux
 distro specific numbering.

.. variable:: CPACK_DEBIAN_PACKAGE_ARCHITECTURE
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE

 The Debian package architecture

 * Mandatory : YES
 * Default   : Output of :code:`dpkg --print-architecture` (or :code:`i386`
   if :code:`dpkg` is not found)

.. variable:: CPACK_DEBIAN_PACKAGE_DEPENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS

 Sets the Debian dependencies of this package.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_DEPENDS`` for component-based
     installations.

 .. note::

   If :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` or
   more specifically :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS`
   is set for this component, the discovered dependencies will be appended
   to :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` instead of
   :variable:`CPACK_DEBIAN_PACKAGE_DEPENDS`. If
   :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` is an empty string,
   only the automatically discovered dependencies will be set for this
   component.

 Example::

   set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libc6 (< 2.4)")

.. variable:: CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS

 Sets inter component dependencies if listed with
 ``CPACK_COMPONENT_<compName>_DEPENDS`` variables.

 * Mandatory : NO
 * Default   : -

.. variable:: CPACK_DEBIAN_PACKAGE_MAINTAINER

 The Debian package maintainer

 * Mandatory : YES
 * Default   : :code:`CPACK_PACKAGE_CONTACT`

.. variable:: CPACK_DEBIAN_PACKAGE_DESCRIPTION
              CPACK_COMPONENT_<COMPONENT>_DESCRIPTION

 The Debian package description

 * Mandatory : YES
 * Default   :

   - ``CPACK_DEBIAN_PACKAGE_DESCRIPTION`` if set or
   - ``CPACK_PACKAGE_DESCRIPTION_SUMMARY``


.. variable:: CPACK_DEBIAN_PACKAGE_SECTION
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION

 Set Section control field e.g. admin, devel, doc, ...

 * Mandatory : YES
 * Default   : "devel"

 See https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections

.. variable:: CPACK_DEBIAN_COMPRESSION_TYPE

 The compression used for creating the Debian package.

 * Mandatory : YES
 * Default   : "gzip"

 Possible values are:

 - lzma
 - xz
 - bzip2
 - gzip

.. variable:: CPACK_DEBIAN_PACKAGE_PRIORITY
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY

 Set Priority control field e.g. required, important, standard, optional,
 extra

 * Mandatory : YES
 * Default   : "optional"

 See https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities

.. variable:: CPACK_DEBIAN_PACKAGE_HOMEPAGE

 The URL of the web site for this package, preferably (when applicable) the
 site from which the original source can be obtained and any additional
 upstream documentation or information may be found.

 * Mandatory : NO
 * Default   : -

 .. note::

 The content of this field is a simple URL without any surrounding
 characters such as <>.

.. variable:: CPACK_DEBIAN_PACKAGE_SHLIBDEPS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS

 May be set to ON in order to use :code:`dpkg-shlibdeps` to generate
 better package dependency list.

 * Mandatory : NO
 * Default   :

   - ``CPACK_DEBIAN_PACKAGE_SHLIBDEPS`` if set or
   - OFF

 .. note::

 You may need set :variable:`CMAKE_INSTALL_RPATH` to an appropriate value
 if you use this feature, because if you don't :code:`dpkg-shlibdeps`
 may fail to find your own shared libs.
 See https://cmake.org/Wiki/CMake_RPATH_handling.

.. variable:: CPACK_DEBIAN_PACKAGE_DEBUG

 May be set when invoking cpack in order to trace debug information
 during CPackDeb run.

 * Mandatory : NO
 * Default   : -

.. variable:: CPACK_DEBIAN_PACKAGE_PREDEPENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS

 Sets the `Pre-Depends` field of the Debian package.
 Like ``Depends``, except that it
 also forces :code:`dpkg` to complete installation of the packages named
 before even starting the installation of the package which declares the
 pre-dependency.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_PREDEPENDS`` for component-based
     installations.

 See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_ENHANCES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES

 Sets the `Enhances` field of the Debian package.
 Similar to ``Suggests`` but works
 in the opposite direction: declares that a package can enhance the
 functionality of another package.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_ENHANCES`` for component-based
     installations.

 See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_BREAKS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS

 Sets the `Breaks` field of the Debian package.
 When a binary package (P) declares that it breaks other packages (B),
 :code:`dpkg` will not allow the package (P) which declares `Breaks` be
 **unpacked** unless the packages that will be broken (B) are deconfigured
 first.
 As long as the package (P) is configured, the previously deconfigured
 packages (B) cannot be reconfigured again.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_BREAKS`` for component-based
     installations.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks

.. variable:: CPACK_DEBIAN_PACKAGE_CONFLICTS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS

 Sets the `Conflicts` field of the Debian package.
 When one binary package declares a conflict with another using a `Conflicts`
 field, :code:`dpkg` will not allow them to be unpacked on the system at
 the same time.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_CONFLICTS`` for component-based
     installations.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts

 .. note::

 This is a stronger restriction than
 :variable:`Breaks <CPACK_DEBIAN_PACKAGE_BREAKS>`, which prevents the
 broken package from being configured while the breaking package is in
 the "Unpacked" state but allows both packages to be unpacked at the same
 time.

.. variable:: CPACK_DEBIAN_PACKAGE_PROVIDES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES

 Sets the `Provides` field of the Debian package.
 A virtual package is one which appears in the `Provides` control field of
 another package.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_PROVIDES`` for component-based
     installations.

 See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual

.. variable:: CPACK_DEBIAN_PACKAGE_REPLACES
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES

 Sets the `Replaces` field of the Debian package.
 Packages can declare in their control file that they should overwrite
 files in certain other packages, or completely replace other packages.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_REPLACES`` for component-based
     installations.

 See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_RECOMMENDS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS

 Sets the `Recommends` field of the Debian package.
 Allows packages to declare a strong, but not absolute, dependency on other
 packages.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_RECOMMENDS`` for component-based
     installations.

 See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_SUGGESTS
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS

 Sets the `Suggests` field of the Debian package.
 Allows packages to declare a suggested package install grouping.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_SUGGESTS`` for component-based
     installations.

 See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps

.. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS

 * Mandatory : NO
 * Default   : OFF

 Allows to generate shlibs control file automatically. Compatibility is defined by
 ``CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY`` variable value.

 .. note::

 Libraries are only considered if they have both library name and version
 set. This can be done by setting SOVERSION property with
 :command:`set_target_properties` command.

.. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY

 Compatibility policy for auto-generated shlibs control file.

 * Mandatory : NO
 * Default   : "="

 Defines compatibility policy for auto-generated shlibs control file.
 Possible values: "=", ">="

 See https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-shlibdeps

.. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_EXTRA

 This variable allow advanced user to add custom script to the
 control.tar.gz.
 Typical usage is for conffiles, postinst, postrm, prerm.

 * Mandatory : NO
 * Default   : -

 Usage::

  set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
      "${CMAKE_CURRENT_SOURCE_DIR/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm")

 .. note::

   The original permissions of the files will be used in the final
   package unless the variable
   :variable:`CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION` is set.
   In particular, the scripts should have the proper executable
   flag prior to the generation of the package.

.. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_STRICT_PERMISSION

 This variable indicates if the Debian policy on control files should be
 strictly followed.

 * Mandatory : NO
 * Default   : FALSE

 Usage::

  set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)

 .. note::

   This overrides the permissions on the original files, following the rules
   set by Debian policy
   https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners

.. variable:: CPACK_DEBIAN_PACKAGE_SOURCE
              CPACK_DEBIAN_<COMPONENT>_PACKAGE_SOURCE

 Sets the ``Source`` field of the binary Debian package.
 When the binary package name is not the same as the source package name
 (in particular when several components/binaries are generated from one
 source) the source from which the binary has been generated should be
 indicated with the field ``Source``.

 * Mandatory : NO
 * Default   :

   - An empty string for non-component based installations
   - ``CPACK_DEBIAN_PACKAGE_SOURCE`` for component-based
     installations.

 See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source

 .. note::

 This value is not interpreted. It is possible to pass an optional
 revision number of the referenced source package as well.

CPackDMG
--------

DragNDrop CPack generator (Mac OS X).

Variables specific to CPack DragNDrop generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the DragNDrop installers built
on Mac OS X:

.. variable:: CPACK_DMG_VOLUME_NAME

 The volume name of the generated disk image. Defaults to
 CPACK_PACKAGE_FILE_NAME.

.. variable:: CPACK_DMG_FORMAT

 The disk image format. Common values are UDRO (UDIF read-only), UDZO (UDIF
 zlib-compressed) or UDBZ (UDIF bzip2-compressed). Refer to hdiutil(1) for
 more information on other available formats. Defaults to UDZO.

.. variable:: CPACK_DMG_DS_STORE

 Path to a custom DS_Store file. This .DS_Store file e.g. can be used to
 specify the Finder window position/geometry and layout (such as hidden
 toolbars, placement of the icons etc.). This file has to be generated by
 the Finder (either manually or through AppleScript) using a normal folder
 from which the .DS_Store file can then be extracted.

.. variable:: CPACK_DMG_DS_STORE_SETUP_SCRIPT

 Path to a custom AppleScript file.  This AppleScript is used to generate
 a .DS_Store file which specifies the Finder window position/geometry and
 layout (such as hidden toolbars, placement of the icons etc.).
 By specifying a custom AppleScript there is no need to use
 CPACK_DMG_DS_STORE, as the .DS_Store that is generated by the AppleScript
 will be packaged.

.. variable:: CPACK_DMG_BACKGROUND_IMAGE

 Path to an image file to be used as the background.  This file will be
 copied to .background/background.<ext>, where ext is the original image file
 extension.  The background image is installed into the image before
 CPACK_DMG_DS_STORE_SETUP_SCRIPT is executed or CPACK_DMG_DS_STORE is
 installed.  By default no background image is set.

.. variable:: CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK

 Default behaviour is to include a symlink to ``/Applications`` in the DMG.
 Set this option to ``ON`` to avoid adding the symlink.

.. variable:: CPACK_DMG_SLA_DIR

  Directory where license and menu files for different languages are stored.
  Setting this causes CPack to look for a ``<language>.menu.txt`` and
  ``<language>.license.txt`` file for every language defined in
  ``CPACK_DMG_SLA_LANGUAGES``. If both this variable and
  ``CPACK_RESOURCE_FILE_LICENSE`` are set, CPack will only look for the menu
  files and use the same license file for all languages.

.. variable:: CPACK_DMG_SLA_LANGUAGES

  Languages for which a license agreement is provided when mounting the
  generated DMG. A menu file consists of 9 lines of text. The first line is
  is the name of the language itself, uppercase, in English (e.g. German).
  The other lines are translations of the following strings:

  - Agree
  - Disagree
  - Print
  - Save...
  - You agree to the terms of the License Agreement when you click the
    "Agree" button.
  - Software License Agreement
  - This text cannot be saved. The disk may be full or locked, or the file
    may be locked.
  - Unable to print. Make sure you have selected a printer.

  For every language in this list, CPack will try to find files
  ``<language>.menu.txt`` and ``<language>.license.txt`` in the directory
  specified by the ``CPACK_DMG_SLA_DIR`` variable.

.. variable:: CPACK_COMMAND_HDIUTIL

 Path to the hdiutil(1) command used to operate on disk image files on Mac
 OS X. This variable can be used to override the automatically detected
 command (or specify its location if the auto-detection fails to find it.)

.. variable:: CPACK_COMMAND_SETFILE

 Path to the SetFile(1) command used to set extended attributes on files and
 directories on Mac OS X. This variable can be used to override the
 automatically detected command (or specify its location if the
 auto-detection fails to find it.)

.. variable:: CPACK_COMMAND_REZ

 Path to the Rez(1) command used to compile resources on Mac OS X. This
 variable can be used to override the automatically detected command (or
 specify its location if the auto-detection fails to find it.)

CPackIFW
--------

This module looks for the location of the command line utilities supplied
with the Qt Installer Framework (QtIFW_).

The module also defines several commands to control the behavior of the
CPack ``IFW`` generator.


Overview
^^^^^^^^

CPack ``IFW`` generator helps you to create online and offline
binary cross-platform installers with a graphical user interface.

CPack IFW generator prepares project installation and generates configuration
and meta information for QtIFW_ tools.

The QtIFW_ provides a set of tools and utilities to create
installers for the supported desktop Qt platforms: Linux, Microsoft Windows,
and Mac OS X.

You should also install QtIFW_ to use CPack ``IFW`` generator.
If you don't use a default path for the installation, please set
the used path in the variable ``QTIFWDIR``.

Variables
^^^^^^^^^

You can use the following variables to change behavior of CPack ``IFW``
generator.

Debug
""""""

.. variable:: CPACK_IFW_VERBOSE

 Set to ``ON`` to enable addition debug output.
 By default is ``OFF``.

Package
"""""""

.. variable:: CPACK_IFW_PACKAGE_TITLE

 Name of the installer as displayed on the title bar.
 By default used ``CPACK_PACKAGE_DESCRIPTION_SUMMARY``.

.. variable:: CPACK_IFW_PACKAGE_PUBLISHER

 Publisher of the software (as shown in the Windows Control Panel).
 By default used ``CPACK_PACKAGE_VENDOR``.

.. variable:: CPACK_IFW_PRODUCT_URL

 URL to a page that contains product information on your web site.

.. variable:: CPACK_IFW_PACKAGE_ICON

 Filename for a custom installer icon. The actual file is '.icns' (Mac OS X),
 '.ico' (Windows). No functionality on Unix.

.. variable:: CPACK_IFW_PACKAGE_WINDOW_ICON

 Filename for a custom window icon in PNG format for the Installer
 application.

.. variable:: CPACK_IFW_PACKAGE_LOGO

 Filename for a logo is used as QWizard::LogoPixmap.

.. variable:: CPACK_IFW_PACKAGE_START_MENU_DIRECTORY

 Name of the default program group for the product in the Windows Start menu.

 By default used ``CPACK_IFW_PACKAGE_NAME``.

.. variable:: CPACK_IFW_TARGET_DIRECTORY

 Default target directory for installation.
 By default used
 "@ApplicationsDir@/``CPACK_PACKAGE_INSTALL_DIRECTORY``"

 You can use predefined variables.

.. variable:: CPACK_IFW_ADMIN_TARGET_DIRECTORY

 Default target directory for installation with administrator rights.

 You can use predefined variables.

.. variable:: CPACK_IFW_PACKAGE_GROUP

 The group, which will be used to configure the root package

.. variable:: CPACK_IFW_PACKAGE_NAME

 The root package name, which will be used if configuration group is not
 specified

.. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME

 Filename of the generated maintenance tool.
 The platform-specific executable file extension is appended.

 By default used QtIFW_ defaults (``maintenancetool``).

.. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE

 Filename for the configuration of the generated maintenance tool.

 By default used QtIFW_ defaults (``maintenancetool.ini``).

.. variable:: CPACK_IFW_PACKAGE_ALLOW_NON_ASCII_CHARACTERS

 Set to ``ON`` if the installation path can contain non-ASCII characters.

 Is ``ON`` for QtIFW_ less 2.0 tools.

.. variable:: CPACK_IFW_PACKAGE_ALLOW_SPACE_IN_PATH

 Set to ``OFF`` if the installation path cannot contain space characters.

 Is ``ON`` for QtIFW_ less 2.0 tools.

.. variable:: CPACK_IFW_PACKAGE_CONTROL_SCRIPT

 Filename for a custom installer control script.

.. variable:: CPACK_IFW_REPOSITORIES_ALL

 The list of remote repositories.

 The default value of this variable is computed by CPack and contains
 all repositories added with command ``cpack_ifw_add_repository()``
 or updated with command ``cpack_ifw_update_repository()``.

.. variable:: CPACK_IFW_DOWNLOAD_ALL

 If this is ``ON`` all components will be downloaded.
 By default is ``OFF`` or used value
 from ``CPACK_DOWNLOAD_ALL`` if set

Components
""""""""""

.. variable:: CPACK_IFW_RESOLVE_DUPLICATE_NAMES

 Resolve duplicate names when installing components with groups.

.. variable:: CPACK_IFW_PACKAGES_DIRECTORIES

 Additional prepared packages dirs that will be used to resolve
 dependent components.

Tools
""""""""

.. variable:: CPACK_IFW_FRAMEWORK_VERSION

 The version of used QtIFW_ tools.

.. variable:: CPACK_IFW_BINARYCREATOR_EXECUTABLE

 The path to "binarycreator" command line client.

 This variable is cached and can be configured user if need.

.. variable:: CPACK_IFW_REPOGEN_EXECUTABLE

 The path to "repogen" command line client.

 This variable is cached and can be configured user if need.

Commands
^^^^^^^^^

The module defines the following commands:

--------------------------------------------------------------------------

.. command:: cpack_ifw_configure_component

Sets the arguments specific to the CPack IFW generator.

::

 cpack_ifw_configure_component(<compname> [COMMON] [ESSENTIAL]
                     [NAME <name>]
                     [VERSION <version>]
                     [SCRIPT <script>]
                     [PRIORITY <priority>]
                     [DEPENDS <com_id> ...]
                     [LICENSES <display_name> <file_path> ...])

This command should be called after ``cpack_add_component()`` command.

``COMMON`` if set, then the component will be packaged and installed as part
of a group to which it belongs.

``ESSENTIAL`` if set, then the package manager stays disabled until that
component is updated.

``NAME`` is used to create domain-like identification for this component.
By default used origin component name.

``VERSION`` is version of component.
By default used ``CPACK_PACKAGE_VERSION``.

``SCRIPT`` is a relative or absolute path to operations script
for this component.

``PRIORITY`` is priority of the component in the tree.

``DEPENDS`` list of dependency component identifiers in QtIFW_ style.

``LICENSES`` pair of <display_name> and <file_path> of license text for this
component. You can specify more then one license.

--------------------------------------------------------------------------

.. command:: cpack_ifw_configure_component_group

Sets the arguments specific to the CPack IFW generator.

::

 cpack_ifw_configure_component_group(<groupname>
                     [NAME <name>]
                     [VERSION <version>]
                     [SCRIPT <script>]
                     [PRIORITY <priority>]
                     [LICENSES <display_name> <file_path> ...])

This command should be called after ``cpack_add_component_group()``
command.

``NAME`` is used to create domain-like identification for this component
group.
By default used origin component group name.

``VERSION`` is version of component group.
By default used ``CPACK_PACKAGE_VERSION``.

``SCRIPT`` is a relative or absolute path to operations script
for this component group.

``PRIORITY`` is priority of the component group in the tree.

``LICENSES`` pair of <display_name> and <file_path> of license text for this
component group. You can specify more then one license.

--------------------------------------------------------------------------

.. command:: cpack_ifw_add_repository

Add QtIFW_ specific remote repository to binary installer.

::

 cpack_ifw_add_repository(<reponame> [DISABLED]
                     URL <url>
                     [USERNAME <username>]
                     [PASSWORD <password>]
                     [DISPLAY_NAME <display_name>])

This command will also add the <reponame> repository
to a variable ``CPACK_IFW_REPOSITORIES_ALL``.

``DISABLED`` if set, then the repository will be disabled by default.

``URL`` is points to a list of available components.

``USERNAME`` is used as user on a protected repository.

``PASSWORD`` is password to use on a protected repository.

``DISPLAY_NAME`` is string to display instead of the URL.


--------------------------------------------------------------------------

.. command:: cpack_ifw_update_repository

Update QtIFW_ specific repository from remote repository.

::

 cpack_ifw_update_repository(<reponame>
                     [[ADD|REMOVE] URL <url>]|
                      [REPLACE OLD_URL <old_url> NEW_URL <new_url>]]
                     [USERNAME <username>]
                     [PASSWORD <password>]
                     [DISPLAY_NAME <display_name>])

This command will also add the <reponame> repository
to a variable ``CPACK_IFW_REPOSITORIES_ALL``.

``URL`` is points to a list of available components.

``OLD_URL`` is points to a list that will replaced.

``NEW_URL`` is points to a list that will replace to.

``USERNAME`` is used as user on a protected repository.

``PASSWORD`` is password to use on a protected repository.

``DISPLAY_NAME`` is string to display instead of the URL.

Example usage
^^^^^^^^^^^^^

 set(CPACK_PACKAGE_NAME "MyPackage")
 set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MyPackage Installation Example")
 set(CPACK_PACKAGE_VERSION "1.0.0") # Version of installer

 include(CPack)
 include(CPackIFW)

 cpack_add_component(myapp
     DISPLAY_NAME "MyApp"
     DESCRIPTION "My Application")
 cpack_ifw_configure_component(myapp
     VERSION "1.2.3" # Version of component
     SCRIPT "operations.qs")
 cpack_add_component(mybigplugin
     DISPLAY_NAME "MyBigPlugin"
     DESCRIPTION "My Big Downloadable Plugin"
     DOWNLOADED)
 cpack_ifw_add_repository(myrepo
     URL "http://example.com/ifw/repo/myapp"
     DISPLAY_NAME "My Application Repository")

Online installer
^^^^^^^^^^^^^^^^

By default CPack IFW generator makes offline installer. This means that all
components will be packaged into a binary file.

To make a component downloaded, you must set the ``DOWNLOADED`` option in
``cpack_add_component()``.

Then you would use the command ``cpack_configure_downloads()``.
If you set ``ALL`` option all components will be downloaded.

You also can use command ``cpack_ifw_add_repository()`` and
variable ``CPACK_IFW_DOWNLOAD_ALL`` for more specific configuration.

CPack IFW generator creates "repository" dir in current binary dir. You
would copy content of this dir to specified ``site`` (``url``).

See Also
^^^^^^^^

Qt Installer Framework Manual:

 Index page
  http://doc.qt.io/qtinstallerframework/index.html

 Component Scripting
  http://doc.qt.io/qtinstallerframework/scripting.html

 Predefined Variables
  http://doc.qt.io/qtinstallerframework/scripting.html#predefined-variables

 Promoting Updates
  http://doc.qt.io/qtinstallerframework/ifw-updates.html

Download Qt Installer Framework for you platform from Qt site:
 http://download.qt.io/official_releases/qt-installer-framework


CPackNSIS
---------

CPack NSIS generator specific options

Variables specific to CPack NSIS generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the graphical installers built
on Windows using the Nullsoft Installation System.

.. variable:: CPACK_NSIS_INSTALL_ROOT

 The default installation directory presented to the end user by the NSIS
 installer is under this root dir. The full directory presented to the end
 user is: ${CPACK_NSIS_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}

.. variable:: CPACK_NSIS_MUI_ICON

 An icon filename.  The name of a ``*.ico`` file used as the main icon for the
 generated install program.

.. variable:: CPACK_NSIS_MUI_UNIICON

 An icon filename.  The name of a ``*.ico`` file used as the main icon for the
 generated uninstall program.

.. variable:: CPACK_NSIS_INSTALLER_MUI_ICON_CODE

 undocumented.

.. variable:: CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP

 The filename of a bitmap to use as the NSIS MUI_WELCOMEFINISHPAGE_BITMAP.

.. variable:: CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP

 The filename of a bitmap to use as the NSIS MUI_UNWELCOMEFINISHPAGE_BITMAP.

.. variable:: CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS

 Extra NSIS commands that will be added to the beginning of the install
 Section, before your install tree is available on the target system.

.. variable:: CPACK_NSIS_EXTRA_INSTALL_COMMANDS

 Extra NSIS commands that will be added to the end of the install Section,
 after your install tree is available on the target system.

.. variable:: CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS

 Extra NSIS commands that will be added to the uninstall Section, before
 your install tree is removed from the target system.

.. variable:: CPACK_NSIS_COMPRESSOR

 The arguments that will be passed to the NSIS SetCompressor command.

.. variable:: CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL

 Ask about uninstalling previous versions first.  If this is set to "ON",
 then an installer will look for previous installed versions and if one is
 found, ask the user whether to uninstall it before proceeding with the
 install.

.. variable:: CPACK_NSIS_MODIFY_PATH

 Modify PATH toggle.  If this is set to "ON", then an extra page will appear
 in the installer that will allow the user to choose whether the program
 directory should be added to the system PATH variable.

.. variable:: CPACK_NSIS_DISPLAY_NAME

 The display name string that appears in the Windows Add/Remove Program
 control panel

.. variable:: CPACK_NSIS_PACKAGE_NAME

 The title displayed at the top of the installer.

.. variable:: CPACK_NSIS_INSTALLED_ICON_NAME

 A path to the executable that contains the installer icon.

.. variable:: CPACK_NSIS_HELP_LINK

 URL to a web site providing assistance in installing your application.

.. variable:: CPACK_NSIS_URL_INFO_ABOUT

 URL to a web site providing more information about your application.

.. variable:: CPACK_NSIS_CONTACT

 Contact information for questions and comments about the installation
 process.

.. variable:: CPACK_NSIS_CREATE_ICONS_EXTRA

 Additional NSIS commands for creating start menu shortcuts.

.. variable:: CPACK_NSIS_DELETE_ICONS_EXTRA

 Additional NSIS commands to uninstall start menu shortcuts.

.. variable:: CPACK_NSIS_EXECUTABLES_DIRECTORY

 Creating NSIS start menu links assumes that they are in 'bin' unless this
 variable is set.  For example, you would set this to 'exec' if your
 executables are in an exec directory.

.. variable:: CPACK_NSIS_MUI_FINISHPAGE_RUN

 Specify an executable to add an option to run on the finish page of the
 NSIS installer.

.. variable:: CPACK_NSIS_MENU_LINKS

 Specify links in [application] menu.  This should contain a list of pair
 "link" "link name". The link may be an URL or a path relative to
 installation prefix.  Like::

 set(CPACK_NSIS_MENU_LINKS
     "doc/cmake-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html"
     "CMake Help" "https://cmake.org" "CMake Web Site")

CPackPackageMaker
-----------------

PackageMaker CPack generator (Mac OS X).

Variables specific to CPack PackageMaker generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variable is specific to installers built on Mac
OS X using PackageMaker:

.. variable:: CPACK_OSX_PACKAGE_VERSION

 The version of Mac OS X that the resulting PackageMaker archive should be
 compatible with. Different versions of Mac OS X support different
 features. For example, CPack can only build component-based installers for
 Mac OS X 10.4 or newer, and can only build installers that download
 component son-the-fly for Mac OS X 10.5 or newer. If left blank, this value
 will be set to the minimum version of Mac OS X that supports the requested
 features. Set this variable to some value (e.g., 10.4) only if you want to
 guarantee that your installer will work on that version of Mac OS X, and
 don't mind missing extra features available in the installer shipping with
 later versions of Mac OS X.

CPackRPM
--------

The built in (binary) CPack RPM generator (Unix only)

Variables specific to CPack RPM generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CPackRPM may be used to create RPM packages using ``CPack``.
CPackRPM is a ``CPack`` generator thus it uses the ``CPACK_XXX``
variables used by ``CPack``.

CPackRPM has specific features which are controlled by the specifics
:code:`CPACK_RPM_XXX` variables.

:code:`CPACK_RPM_<COMPONENT>_XXXX` variables may be used in order to have
**component** specific values.  Note however that ``<COMPONENT>`` refers to the
**grouping name** written in upper case. It may be either a component name or
a component GROUP name. Usually those variables correspond to RPM spec file
entities. One may find information about spec files here
http://www.rpm.org/wiki/Docs

.. note::

 `<COMPONENT>` part of variables is preferred to be in upper case (for e.g. if
 component is named `foo` then use `CPACK_RPM_FOO_XXXX` variable name format)
 as is with other `CPACK_<COMPONENT>_XXXX` variables.
 For the purposes of back compatibility (CMake/CPack version 3.5 and lower)
 support for same cased component (e.g. `fOo` would be used as
 `CPACK_RPM_fOo_XXXX`) is still supported for variables defined in older
 versions of CMake/CPack but is not guaranteed for variables that
 will be added in the future. For the sake of back compatibility same cased
 component variables also override upper cased versions where both are
 present.

Here are some CPackRPM wiki resources that are here for historic reasons and
are no longer maintained but may still prove useful:

 - https://cmake.org/Wiki/CMake:CPackConfiguration
 - https://cmake.org/Wiki/CMake:CPackPackageGenerators#RPM_.28Unix_Only.29

List of CPackRPM specific variables:

.. variable:: CPACK_RPM_PACKAGE_COMPONENT

 Enable component packaging for CPackRPM

 * Mandatory : NO
 * Default   : OFF

 If enabled (ON) multiple packages are generated. By default a single package
 containing files of all components is generated.

.. variable:: CPACK_RPM_PACKAGE_SUMMARY
              CPACK_RPM_<component>_PACKAGE_SUMMARY

 The RPM package summary.

 * Mandatory : YES
 * Default   : ``CPACK_PACKAGE_DESCRIPTION_SUMMARY``

.. variable:: CPACK_RPM_PACKAGE_NAME
              CPACK_RPM_<component>_PACKAGE_NAME

 The RPM package name.

 * Mandatory : YES
 * Default   : ``CPACK_PACKAGE_NAME``

.. variable:: CPACK_RPM_FILE_NAME
              CPACK_RPM_<component>_FILE_NAME

 Package file name.

 * Mandatory : YES
 * Default   : ``<CPACK_PACKAGE_FILE_NAME>[-<component>].rpm`` with spaces
               replaced by '-'

 This may be set to ``RPM-DEFAULT`` to allow rpmbuild tool to generate package
 file name by itself.
 Alternatively provided package file name must end with ``.rpm`` suffix.

 .. note::

 By using user provided spec file, rpm macro extensions such as for
 generating debuginfo packages or by simply using multiple components more
 than one rpm file may be generated, either from a single spec file or from
 multiple spec files (each component execution produces it's own spec file).
 In such cases duplicate file names may occur as a result of this variable
 setting or spec file content structure. Duplicate files get overwritten
 and it is up to the packager to set the variables in a manner that will
 prevent such errors.

.. variable:: CPACK_RPM_PACKAGE_VERSION

 The RPM package version.

 * Mandatory : YES
 * Default   : ``CPACK_PACKAGE_VERSION``

.. variable:: CPACK_RPM_PACKAGE_ARCHITECTURE
              CPACK_RPM_<component>_PACKAGE_ARCHITECTURE

 The RPM package architecture.

 * Mandatory : YES
 * Default   : Native architecture output by ``uname -m``

 This may be set to ``noarch`` if you know you are building a noarch package.

.. variable:: CPACK_RPM_PACKAGE_RELEASE

 The RPM package release.

 * Mandatory : YES
 * Default   : 1

 This is the numbering of the RPM package itself, i.e. the version of the
 packaging and not the version of the content (see
 ``CPACK_RPM_PACKAGE_VERSION``). One may change the default value if
 the previous packaging was buggy and/or you want to put here a fancy Linux
 distro specific numbering.

.. note::

 This is the string that goes into the RPM ``Release:`` field. Some distros
 (e.g. Fedora, CentOS) require ``1%{?dist}`` format and not just a number.
 ``%{?dist}`` part can be added by setting ``CPACK_RPM_PACKAGE_RELEASE_DIST``.

.. variable:: CPACK_RPM_PACKAGE_RELEASE_DIST

 The dist tag that is added  RPM ``Release:`` field.

 * Mandatory : NO
 * Default   : OFF

 This is the reported ``%{dist}`` tag from the current distribution or empty
 ``%{dist}`` if RPM macro is not set. If this variable is set then RPM
 ``Release:`` field value is set to ``${CPACK_RPM_PACKAGE_RELEASE}%{?dist}``.

.. variable:: CPACK_RPM_PACKAGE_LICENSE

 The RPM package license policy.

 * Mandatory : YES
 * Default   : "unknown"

.. variable:: CPACK_RPM_PACKAGE_GROUP
              CPACK_RPM_<component>_PACKAGE_GROUP

 The RPM package group.

 * Mandatory : YES
 * Default   : "unknown"

.. variable:: CPACK_RPM_PACKAGE_VENDOR

 The RPM package vendor.

 * Mandatory : YES
 * Default   : CPACK_PACKAGE_VENDOR if set or "unknown"

.. variable:: CPACK_RPM_PACKAGE_URL
              CPACK_RPM_<component>_PACKAGE_URL

 The projects URL.

 * Mandatory : NO
 * Default   : -

.. variable:: CPACK_RPM_PACKAGE_DESCRIPTION
              CPACK_RPM_<component>_PACKAGE_DESCRIPTION

 RPM package description.

 * Mandatory : YES
 * Default : ``CPACK_COMPONENT_<compName>_DESCRIPTION`` (component
   based installers only) if set, ``CPACK_PACKAGE_DESCRIPTION_FILE``
   if set or "no package description available"

.. variable:: CPACK_RPM_COMPRESSION_TYPE

 RPM compression type.

 * Mandatory : NO
 * Default   : -

 May be used to override RPM compression type to be used to build the
 RPM. For example some Linux distribution now default to lzma or xz
 compression whereas older cannot use such RPM. Using this one can enforce
 compression type to be used.

 Possible values are:

 - lzma
 - xz
 - bzip2
 - gzip

.. variable:: CPACK_RPM_PACKAGE_AUTOREQ
              CPACK_RPM_<component>_PACKAGE_AUTOREQ

 RPM spec autoreq field.

 * Mandatory : NO
 * Default   : -

 May be used to enable (1, yes) or disable (0, no) automatic shared libraries
 dependency detection. Dependencies are added to requires list.

 .. note::

 By default automatic dependency detection is enabled by rpm generator.

.. variable:: CPACK_RPM_PACKAGE_AUTOPROV
              CPACK_RPM_<component>_PACKAGE_AUTOPROV

 RPM spec autoprov field.

 * Mandatory : NO
 * Default   : -

 May be used to enable (1, yes) or disable (0, no) automatic listing of shared
 libraries that are provided by the package. Shared libraries are added to
 provides list.

 .. note::

 By default automatic provides detection is enabled by rpm generator.

.. variable:: CPACK_RPM_PACKAGE_AUTOREQPROV
              CPACK_RPM_<component>_PACKAGE_AUTOREQPROV

 RPM spec autoreqprov field.

 * Mandatory : NO
 * Default   : -

 Variable enables/disables autoreq and autoprov at the same time.
 See ``CPACK_RPM_PACKAGE_AUTOREQ`` and ``CPACK_RPM_PACKAGE_AUTOPROV``
 for more details.

 .. note::

 By default automatic detection feature is enabled by rpm.

.. variable:: CPACK_RPM_PACKAGE_REQUIRES
              CPACK_RPM_<component>_PACKAGE_REQUIRES

 RPM spec requires field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM dependencies (requires). Note that you must enclose
 the complete requires string between quotes, for example::

  set(CPACK_RPM_PACKAGE_REQUIRES "python >= 2.5.0, cmake >= 2.8")

 The required package list of an RPM file could be printed with::

  rpm -qp --requires file.rpm

.. variable:: CPACK_RPM_PACKAGE_CONFLICTS
              CPACK_RPM_<component>_PACKAGE_CONFLICTS

 RPM spec conflicts field.

 * Mandatory : NO
 * Default   : -

 May be used to set negative RPM dependencies (conflicts). Note that you must
 enclose the complete requires string between quotes, for example::

  set(CPACK_RPM_PACKAGE_CONFLICTS "libxml2")

 The conflicting package list of an RPM file could be printed with::

  rpm -qp --conflicts file.rpm

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_PRE
              CPACK_RPM_<component>_PACKAGE_REQUIRES_PRE

 RPM spec requires(pre) field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM preinstall dependencies (requires(pre)). Note that
 you must enclose the complete requires string between quotes, for example::

 set(CPACK_RPM_PACKAGE_REQUIRES_PRE "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_POST
              CPACK_RPM_<component>_PACKAGE_REQUIRES_POST

 RPM spec requires(post) field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM postinstall dependencies (requires(post)). Note that
 you must enclose the complete requires string between quotes, for example::

 set(CPACK_RPM_PACKAGE_REQUIRES_POST "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_POSTUN
              CPACK_RPM_<component>_PACKAGE_REQUIRES_POSTUN

 RPM spec requires(postun) field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM postuninstall dependencies (requires(postun)). Note
 that you must enclose the complete requires string between quotes, for
 example::

 set(CPACK_RPM_PACKAGE_REQUIRES_POSTUN "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_REQUIRES_PREUN
              CPACK_RPM_<component>_PACKAGE_REQUIRES_PREUN

 RPM spec requires(preun) field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM preuninstall dependencies (requires(preun)). Note that
 you must enclose the complete requires string between quotes, for example::

 set(CPACK_RPM_PACKAGE_REQUIRES_PREUN "shadow-utils, initscripts")

.. variable:: CPACK_RPM_PACKAGE_SUGGESTS
              CPACK_RPM_<component>_PACKAGE_SUGGESTS

 RPM spec suggest field.

 * Mandatory : NO
 * Default   : -

 May be used to set weak RPM dependencies (suggests). Note that you must
 enclose the complete requires string between quotes.

.. variable:: CPACK_RPM_PACKAGE_PROVIDES
              CPACK_RPM_<component>_PACKAGE_PROVIDES

 RPM spec provides field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM dependencies (provides). The provided package list
 of an RPM file could be printed with::

 rpm -qp --provides file.rpm

.. variable:: CPACK_RPM_PACKAGE_OBSOLETES
              CPACK_RPM_<component>_PACKAGE_OBSOLETES

 RPM spec obsoletes field.

 * Mandatory : NO
 * Default   : -

 May be used to set RPM packages that are obsoleted by this one.

.. variable:: CPACK_RPM_PACKAGE_RELOCATABLE

 build a relocatable RPM.

 * Mandatory : NO
 * Default   : CPACK_PACKAGE_RELOCATABLE

 If this variable is set to TRUE or ON CPackRPM will try
 to build a relocatable RPM package. A relocatable RPM may
 be installed using::

  rpm --prefix or --relocate

 in order to install it at an alternate place see rpm(8). Note that
 currently this may fail if :variable:`CPACK_SET_DESTDIR` is set to ``ON``. If
 :variable:`CPACK_SET_DESTDIR` is set then you will get a warning message but
 if there is file installed with absolute path you'll get unexpected behavior.

.. variable:: CPACK_RPM_SPEC_INSTALL_POST

 Deprecated - use ``CPACK_RPM_POST_INSTALL_SCRIPT_FILE`` instead.

 * Mandatory : NO
 * Default   : -
 * Deprecated: YES

 This way of specifying post-install script is deprecated, use
 ``CPACK_RPM_POST_INSTALL_SCRIPT_FILE``.
 May be used to set an RPM post-install command inside the spec file.
 For example setting it to ``/bin/true`` may be used to prevent
 rpmbuild to strip binaries.

.. variable:: CPACK_RPM_SPEC_MORE_DEFINE

 RPM extended spec definitions lines.

 * Mandatory : NO
 * Default   : -

 May be used to add any ``%define`` lines to the generated spec file.

.. variable:: CPACK_RPM_PACKAGE_DEBUG

 Toggle CPackRPM debug output.

 * Mandatory : NO
 * Default   : -

 May be set when invoking cpack in order to trace debug information
 during CPack RPM run. For example you may launch CPack like this::

 cpack -D CPACK_RPM_PACKAGE_DEBUG=1 -G RPM

.. variable:: CPACK_RPM_USER_BINARY_SPECFILE
              CPACK_RPM_<componentName>_USER_BINARY_SPECFILE

 A user provided spec file.

 * Mandatory : NO
 * Default   : -

 May be set by the user in order to specify a USER binary spec file
 to be used by CPackRPM instead of generating the file.
 The specified file will be processed by configure_file( @ONLY).

.. variable:: CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE

 Spec file template.

 * Mandatory : NO
 * Default   : -

 If set CPack will generate a template for USER specified binary
 spec file and stop with an error. For example launch CPack like this::

  cpack -D CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE=1 -G RPM

 The user may then use this file in order to hand-craft is own
 binary spec file which may be used with
 :variable:`CPACK_RPM_USER_BINARY_SPECFILE`.

.. variable:: CPACK_RPM_PRE_INSTALL_SCRIPT_FILE
              CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE

 Path to file containing pre (un)install script.

 * Mandatory : NO
 * Default   : -

 May be used to embed a pre (un)installation script in the spec file.
 The referred script file (or both) will be read and directly
 put after the ``%pre`` or ``%preun`` section
 If ``CPACK_RPM_PACKAGE_COMPONENT`` is set to ON the (un)install
 script for each component can be overridden with
 ``CPACK_RPM_<COMPONENT>_PRE_INSTALL_SCRIPT_FILE`` and
 ``CPACK_RPM_<COMPONENT>_PRE_UNINSTALL_SCRIPT_FILE``.
 One may verify which scriptlet has been included with::

 rpm -qp --scripts  package.rpm

.. variable:: CPACK_RPM_POST_INSTALL_SCRIPT_FILE
              CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE

 Path to file containing post (un)install script.

 * Mandatory : NO
 * Default   : -

 May be used to embed a post (un)installation script in the spec file.
 The referred script file (or both) will be read and directly
 put after the ``%post`` or ``%postun`` section.
 If ``CPACK_RPM_PACKAGE_COMPONENT`` is set to ON the (un)install
 script for each component can be overridden with
 ``CPACK_RPM_<COMPONENT>_POST_INSTALL_SCRIPT_FILE`` and
 ``CPACK_RPM_<COMPONENT>_POST_UNINSTALL_SCRIPT_FILE``.
 One may verify which scriptlet has been included with::

 rpm -qp --scripts  package.rpm

.. variable:: CPACK_RPM_USER_FILELIST
              CPACK_RPM_<COMPONENT>_USER_FILELIST

 * Mandatory : NO
 * Default   : -

 May be used to explicitly specify ``%(<directive>)`` file line
 in the spec file. Like ``%config(noreplace)`` or any other directive
 that be found in the ``%files`` section. Since CPackRPM is generating
 the list of files (and directories) the user specified files of
 the ``CPACK_RPM_<COMPONENT>_USER_FILELIST`` list will be removed from
 the generated list.

.. variable:: CPACK_RPM_CHANGELOG_FILE

 RPM changelog file.

 * Mandatory : NO
 * Default   : -

 May be used to embed a changelog in the spec file.
 The referred file will be read and directly put after the ``%changelog``
 section.

.. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST

 list of path to be excluded.

 * Mandatory : NO
 * Default   : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include

 May be used to exclude path (directories or files) from the auto-generated
 list of paths discovered by CPack RPM. The defaut value contains a
 reasonable set of values if the variable is not defined by the user. If the
 variable is defined by the user then CPackRPM will NOT any of the default
 path. If you want to add some path to the default list then you can use
 ``CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION`` variable.

.. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION

 additional list of path to be excluded.

 * Mandatory : NO
 * Default   : -

 May be used to add more exclude path (directories or files) from the initial
 default list of excluded paths. See
 ``CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST``.

.. variable:: CPACK_RPM_RELOCATION_PATHS

 Packages relocation paths list.

 * Mandatory : NO
 * Default   : -

 May be used to specify more than one relocation path per relocatable RPM.
 Variable contains a list of relocation paths that if relative are prefixed
 by the value of ``CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX`` or by the
 value of ``CPACK_PACKAGING_INSTALL_PREFIX`` if the component version
 is not provided.
 Variable is not component based as its content can be used to set a different
 path prefix for e.g. binary dir and documentation dir at the same time.
 Only prefixes that are required by a certain component are added to that
 component - component must contain at least one file/directory/symbolic link
 with ``CPACK_RPM_RELOCATION_PATHS`` prefix for a certain relocation
 path to be added. Package will not contain any relocation paths if there are
 no files/directories/symbolic links on any of the provided prefix locations.
 Packages that either do not contain any relocation paths or contain
 files/directories/symbolic links that are outside relocation paths print
 out an ``AUTHOR_WARNING`` that RPM will be partially relocatable.

.. variable:: CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX

 Per component relocation path install prefix.

 * Mandatory : NO
 * Default   : CPACK_PACKAGING_INSTALL_PREFIX

 May be used to set per component ``CPACK_PACKAGING_INSTALL_PREFIX``
 for relocatable RPM packages.

.. variable:: CPACK_RPM_NO_INSTALL_PREFIX_RELOCATION
              CPACK_RPM_NO_<COMPONENT>_INSTALL_PREFIX_RELOCATION

 Removal of default install prefix from relocation paths list.

 * Mandatory : NO
 * Default   : CPACK_PACKAGING_INSTALL_PREFIX or CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX
               are treated as one of relocation paths

 May be used to remove CPACK_PACKAGING_INSTALL_PREFIX and CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX
 from relocatable RPM prefix paths.

.. variable:: CPACK_RPM_ADDITIONAL_MAN_DIRS

 * Mandatory : NO
 * Default   : -

 May be used to set additional man dirs that could potentially be compressed
 by brp-compress RPM macro. Variable content must be a list of regular
 expressions that point to directories containing man files or to man files
 directly. Note that in order to compress man pages a path must also be
 present in brp-compress RPM script and that brp-compress script must be
 added to RPM configuration by the operating system.

 Regular expressions that are added by default were taken from brp-compress
 RPM macro:

 - /usr/man/man.*
 - /usr/man/.*/man.*
 - /usr/info.*
 - /usr/share/man/man.*
 - /usr/share/man/.*/man.*
 - /usr/share/info.*
 - /usr/kerberos/man.*
 - /usr/X11R6/man/man.*
 - /usr/lib/perl5/man/man.*
 - /usr/share/doc/.*/man/man.*
 - /usr/lib/.*/man/man.*

.. variable:: CPACK_RPM_DEFAULT_USER
              CPACK_RPM_<compName>_DEFAULT_USER

 default user ownership of RPM content

 * Mandatory : NO
 * Default   : root

 Value should be user name and not UID.
 Note that <compName> must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_GROUP
              CPACK_RPM_<compName>_DEFAULT_GROUP

 default group ownership of RPM content

 * Mandatory : NO
 * Default   : root

 Value should be group name and not GID.
 Note that <compName> must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_FILE_PERMISSIONS
              CPACK_RPM_<compName>_DEFAULT_FILE_PERMISSIONS

 default permissions used for packaged files

 * Mandatory : NO
 * Default   : - (system default)

 Accepted values are lists with ``PERMISSIONS``. Valid permissions
 are:

 - OWNER_READ
 - OWNER_WRITE
 - OWNER_EXECUTE
 - GROUP_READ
 - GROUP_WRITE
 - GROUP_EXECUTE
 - WORLD_READ
 - WORLD_WRITE
 - WORLD_EXECUTE

 Note that <compName> must be in upper-case.

.. variable:: CPACK_RPM_DEFAULT_DIR_PERMISSIONS
              CPACK_RPM_<compName>_DEFAULT_DIR_PERMISSIONS

 default permissions used for packaged directories

 * Mandatory : NO
 * Default   : - (system default)

 Accepted values are lists with PERMISSIONS. Valid permissions
 are the same as for ``CPACK_RPM_DEFAULT_FILE_PERMISSIONS``.
 Note that <compName> must be in upper-case.

Packaging of Symbolic Links
^^^^^^^^^^^^^^^^^^^^^^^^^^^

CPackRPM supports packaging of symbolic links::

 execute_process(COMMAND ${CMAKE_COMMAND}
   -E create_symlink <relative_path_location> <symlink_name>)
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/<symlink_name>
   DESTINATION <symlink_location> COMPONENT libraries)

Symbolic links will be optimized (paths will be shortened if possible)
before being added to the package or if multiple relocation paths are
detected, a post install symlink relocation script will be generated.

Symbolic links may point to locations that are not packaged by the same
package (either a different component or even not packaged at all) but
those locations will be treated as if they were a part of the package
while determining if symlink should be either created or present in a
post install script - depending on relocation paths.

Symbolic links that point to locations outside packaging path produce a
warning and are treated as non relocatable permanent symbolic links.

Currently there are a few limitations though:

* For component based packaging component interdependency is not checked
  when processing symbolic links. Symbolic links pointing to content of
  a different component are treated the same way as if pointing to location
  that will not be packaged.

* Symbolic links pointing to a location through one or more intermediate
  symbolic links will not be handled differently - if the intermediate
  symbolic link(s) is also on a relocatable path, relocating it during
  package installation may cause initial symbolic link to point to an
  invalid location.

CPack
-----

Build binary and source package installers.

Variables common to all CPack generators
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The
CPack module generates binary and source installers in a variety of
formats using the cpack program.  Inclusion of the CPack module adds
two new targets to the resulting makefiles, package and
package_source, which build the binary and source installers,
respectively.  The generated binary installers contain everything
installed via CMake's INSTALL command (and the deprecated
INSTALL_FILES, INSTALL_PROGRAMS, and INSTALL_TARGETS commands).

For certain kinds of binary installers (including the graphical
installers on Mac OS X and Windows), CPack generates installers that
allow users to select individual application components to install.
See CPackComponent module for that.

The CPACK_GENERATOR variable has different meanings in different
contexts.  In your CMakeLists.txt file, CPACK_GENERATOR is a *list of
generators*: when run with no other arguments, CPack will iterate over
that list and produce one package for each generator.  In a
CPACK_PROJECT_CONFIG_FILE, though, CPACK_GENERATOR is a *string naming
a single generator*.  If you need per-cpack- generator logic to
control *other* cpack settings, then you need a
CPACK_PROJECT_CONFIG_FILE.

The CMake source tree itself contains a CPACK_PROJECT_CONFIG_FILE.
See the top level file CMakeCPackOptions.cmake.in for an example.

If set, the CPACK_PROJECT_CONFIG_FILE is included automatically on a
per-generator basis.  It only need contain overrides.

Here's how it works:

* cpack runs
* it includes CPackConfig.cmake
* it iterates over the generators listed in that file's
  CPACK_GENERATOR list variable (unless told to use just a
  specific one via -G on the command line...)
* foreach generator, it then

  - sets CPACK_GENERATOR to the one currently being iterated
  - includes the CPACK_PROJECT_CONFIG_FILE
  - produces the package for that generator

This is the key: For each generator listed in CPACK_GENERATOR in
CPackConfig.cmake, cpack will *reset* CPACK_GENERATOR internally to
*the one currently being used* and then include the
CPACK_PROJECT_CONFIG_FILE.

Before including this CPack module in your CMakeLists.txt file, there
are a variety of variables that can be set to customize the resulting
installers.  The most commonly-used variables are:

.. variable:: CPACK_PACKAGE_NAME

 The name of the package (or application). If not specified, defaults to
 the project name.

.. variable:: CPACK_PACKAGE_VENDOR

 The name of the package vendor. (e.g., "Kitware").

.. variable:: CPACK_PACKAGE_DIRECTORY

 The directory in which CPack is doing its packaging. If it is not set
 then this will default (internally) to the build dir. This variable may
 be defined in CPack config file or from the cpack command line option
 "-B". If set the command line option override the value found in the
 config file.

.. variable:: CPACK_PACKAGE_VERSION_MAJOR

 Package major Version

.. variable:: CPACK_PACKAGE_VERSION_MINOR

 Package minor Version

.. variable:: CPACK_PACKAGE_VERSION_PATCH

 Package patch Version

.. variable:: CPACK_PACKAGE_DESCRIPTION_FILE

 A text file used to describe the project. Used, for example, the
 introduction screen of a CPack-generated Windows installer to describe
 the project.

.. variable:: CPACK_PACKAGE_DESCRIPTION_SUMMARY

 Short description of the project (only a few words).

.. variable:: CPACK_PACKAGE_FILE_NAME

 The name of the package file to generate, not including the
 extension. For example, cmake-2.6.1-Linux-i686.  The default value is::

 ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}.

.. variable:: CPACK_PACKAGE_INSTALL_DIRECTORY

 Installation directory on the target system. This may be used by some
 CPack generators like NSIS to create an installation directory e.g.,
 "CMake 2.5" below the installation prefix. All installed element will be
 put inside this directory.

.. variable:: CPACK_PACKAGE_ICON

 A branding image that will be displayed inside the installer (used by GUI
 installers).

.. variable:: CPACK_PROJECT_CONFIG_FILE

 CPack-time project CPack configuration file. This file included at cpack
 time, once per generator after CPack has set CPACK_GENERATOR to the
 actual generator being used. It allows per-generator setting of CPACK_*
 variables at cpack time.

.. variable:: CPACK_RESOURCE_FILE_LICENSE

 License to be embedded in the installer. It will typically be displayed
 to the user by the produced installer (often with an explicit "Accept"
 button, for graphical installers) prior to installation. This license
 file is NOT added to installed file but is used by some CPack generators
 like NSIS. If you want to install a license file (may be the same as this
 one) along with your project you must add an appropriate CMake INSTALL
 command in your CMakeLists.txt.

.. variable:: CPACK_RESOURCE_FILE_README

 ReadMe file to be embedded in the installer. It typically describes in
 some detail the purpose of the project during the installation. Not all
 CPack generators uses this file.

.. variable:: CPACK_RESOURCE_FILE_WELCOME

 Welcome file to be embedded in the installer. It welcomes users to this
 installer.  Typically used in the graphical installers on Windows and Mac
 OS X.

.. variable:: CPACK_MONOLITHIC_INSTALL

 Disables the component-based installation mechanism. When set the
 component specification is ignored and all installed items are put in a
 single "MONOLITHIC" package.  Some CPack generators do monolithic
 packaging by default and may be asked to do component packaging by
 setting CPACK_<GENNAME>_COMPONENT_INSTALL to 1/TRUE.

.. variable:: CPACK_GENERATOR

 List of CPack generators to use. If not specified, CPack will create a
 set of options CPACK_BINARY_<GENNAME> (e.g., CPACK_BINARY_NSIS) allowing
 the user to enable/disable individual generators. This variable may be
 used on the command line as well as in::

 cpack -D CPACK_GENERATOR="ZIP;TGZ" /path/to/build/tree

.. variable:: CPACK_OUTPUT_CONFIG_FILE

 The name of the CPack binary configuration file. This file is the CPack
 configuration generated by the CPack module for binary
 installers. Defaults to CPackConfig.cmake.

.. variable:: CPACK_PACKAGE_EXECUTABLES

 Lists each of the executables and associated text label to be used to
 create Start Menu shortcuts. For example, setting this to the list
 ccmake;CMake will create a shortcut named "CMake" that will execute the
 installed executable ccmake. Not all CPack generators use it (at least
 NSIS, WIX and OSXX11 do).

.. variable:: CPACK_STRIP_FILES

 List of files to be stripped. Starting with CMake 2.6.0 CPACK_STRIP_FILES
 will be a boolean variable which enables stripping of all files (a list
 of files evaluates to TRUE in CMake, so this change is compatible).

.. variable:: CPACK_VERBATIM_VARIABLES

 If set to TRUE, values of variables prefixed with CPACK_ will be escaped
 before being written to the configuration files, so that the cpack program
 receives them exactly as they were specified. If not, characters like quotes
 and backslashes can cause parsing errors or alter the value received by the
 cpack program. Defaults to FALSE for backwards compatibility.

 * Mandatory : NO
 * Default   : FALSE

The following CPack variables are specific to source packages, and
will not affect binary packages:

.. variable:: CPACK_SOURCE_PACKAGE_FILE_NAME

 The name of the source package. For example cmake-2.6.1.

.. variable:: CPACK_SOURCE_STRIP_FILES

 List of files in the source tree that will be stripped. Starting with
 CMake 2.6.0 CPACK_SOURCE_STRIP_FILES will be a boolean variable which
 enables stripping of all files (a list of files evaluates to TRUE in
 CMake, so this change is compatible).

.. variable:: CPACK_SOURCE_GENERATOR

 List of generators used for the source packages. As with CPACK_GENERATOR,
 if this is not specified then CPack will create a set of options (e.g.,
 CPACK_SOURCE_ZIP) allowing users to select which packages will be
 generated.

.. variable:: CPACK_SOURCE_OUTPUT_CONFIG_FILE

 The name of the CPack source configuration file. This file is the CPack
 configuration generated by the CPack module for source
 installers. Defaults to CPackSourceConfig.cmake.

.. variable:: CPACK_SOURCE_IGNORE_FILES

 Pattern of files in the source tree that won't be packaged when building
 a source package. This is a list of regular expression patterns (that
 must be properly escaped), e.g.,
 /CVS/;/\\.svn/;\\.swp$;\\.#;/#;.*~;cscope.*

The following variables are for advanced uses of CPack:

.. variable:: CPACK_CMAKE_GENERATOR

 What CMake generator should be used if the project is CMake
 project. Defaults to the value of CMAKE_GENERATOR few users will want to
 change this setting.

.. variable:: CPACK_INSTALL_CMAKE_PROJECTS

 List of four values that specify what project to install. The four values
 are: Build directory, Project Name, Project Component, Directory. If
 omitted, CPack will build an installer that installs everything.

.. variable:: CPACK_SYSTEM_NAME

 System name, defaults to the value of ${CMAKE_SYSTEM_NAME}.

.. variable:: CPACK_PACKAGE_VERSION

 Package full version, used internally. By default, this is built from
 CPACK_PACKAGE_VERSION_MAJOR, CPACK_PACKAGE_VERSION_MINOR, and
 CPACK_PACKAGE_VERSION_PATCH.

.. variable:: CPACK_TOPLEVEL_TAG

 Directory for the installed files.

.. variable:: CPACK_INSTALL_COMMANDS

 Extra commands to install components.

.. variable:: CPACK_INSTALLED_DIRECTORIES

 Extra directories to install.

.. variable:: CPACK_PACKAGE_INSTALL_REGISTRY_KEY

 Registry key used when installing this project. This is only used by
 installer for Windows.  The default value is based on the installation
 directory.

.. variable:: CPACK_CREATE_DESKTOP_LINKS

 List of desktop links to create.
 Each desktop link requires a corresponding start menu shortcut
 as created by ``CPACK_PACKAGE_EXECUTABLES``.

.. variable:: CPACK_BINARY_<GENNAME>

 CPack generated options for binary generators. The CPack.cmake module
 generates (when CPACK_GENERATOR is not set) a set of CMake options (see
 CMake option command) which may then be used to select the CPack
 generator(s) to be used when launching the package target.

 Provide options to choose generators we might check here if the required
 tools for the generates exist and set the defaults according to the results

CPackWIX
--------

CPack WiX generator specific options

Variables specific to CPack WiX generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following variables are specific to the installers built on
Windows using WiX.

.. variable:: CPACK_WIX_UPGRADE_GUID

 Upgrade GUID (``Product/@UpgradeCode``)

 Will be automatically generated unless explicitly provided.

 It should be explicitly set to a constant generated globally unique
 identifier (GUID) to allow your installers to replace existing
 installations that use the same GUID.

 You may for example explicitly set this variable in your
 CMakeLists.txt to the value that has been generated per default.  You
 should not use GUIDs that you did not generate yourself or which may
 belong to other projects.

 A GUID shall have the following fixed length syntax::

  XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

 (each X represents an uppercase hexadecimal digit)

.. variable:: CPACK_WIX_PRODUCT_GUID

 Product GUID (``Product/@Id``)

 Will be automatically generated unless explicitly provided.

 If explicitly provided this will set the Product Id of your installer.

 The installer will abort if it detects a pre-existing installation that
 uses the same GUID.

 The GUID shall use the syntax described for CPACK_WIX_UPGRADE_GUID.

.. variable:: CPACK_WIX_LICENSE_RTF

 RTF License File

 If CPACK_RESOURCE_FILE_LICENSE has an .rtf extension it is used as-is.

 If CPACK_RESOURCE_FILE_LICENSE has an .txt extension it is implicitly
 converted to RTF by the WiX Generator.
 The expected encoding of the .txt file is UTF-8.

 With CPACK_WIX_LICENSE_RTF you can override the license file used by the
 WiX Generator in case CPACK_RESOURCE_FILE_LICENSE is in an unsupported
 format or the .txt -> .rtf conversion does not work as expected.

.. variable:: CPACK_WIX_PRODUCT_ICON

 The Icon shown next to the program name in Add/Remove programs.

 If set, this icon is used in place of the default icon.

.. variable:: CPACK_WIX_UI_REF

 This variable allows you to override the Id of the ``<UIRef>`` element
 in the WiX template.

 The default is ``WixUI_InstallDir`` in case no CPack components have
 been defined and ``WixUI_FeatureTree`` otherwise.

.. variable:: CPACK_WIX_UI_BANNER

 The bitmap will appear at the top of all installer pages other than the
 welcome and completion dialogs.

 If set, this image will replace the default banner image.

 This image must be 493 by 58 pixels.

.. variable:: CPACK_WIX_UI_DIALOG

 Background bitmap used on the welcome and completion dialogs.

 If this variable is set, the installer will replace the default dialog
 image.

 This image must be 493 by 312 pixels.

.. variable:: CPACK_WIX_PROGRAM_MENU_FOLDER

 Start menu folder name for launcher.

 If this variable is not set, it will be initialized with CPACK_PACKAGE_NAME

.. variable:: CPACK_WIX_CULTURES

 Language(s) of the installer

 Languages are compiled into the WixUI extension library.  To use them,
 simply provide the name of the culture.  If you specify more than one
 culture identifier in a comma or semicolon delimited list, the first one
 that is found will be used.  You can find a list of supported languages at:
 http://wix.sourceforge.net/manual-wix3/WixUI_localization.htm

.. variable:: CPACK_WIX_TEMPLATE

 Template file for WiX generation

 If this variable is set, the specified template will be used to generate
 the WiX wxs file.  This should be used if further customization of the
 output is required.

 If this variable is not set, the default MSI template included with CMake
 will be used.

.. variable:: CPACK_WIX_PATCH_FILE

 Optional list of XML files with fragments to be inserted into
 generated WiX sources

 This optional variable can be used to specify an XML file that the
 WiX generator will use to inject fragments into its generated
 source files.

 Patch files understood by the CPack WiX generator
 roughly follow this RELAX NG compact schema:

 .. code-block:: none

    start = CPackWiXPatch

    CPackWiXPatch = element CPackWiXPatch { CPackWiXFragment* }

    CPackWiXFragment = element CPackWiXFragment
    {
        attribute Id { string },
        fragmentContent*
    }

    fragmentContent = element * - CPackWiXFragment
    {
        (attribute * { text } | text | fragmentContent)*
    }

 Currently fragments can be injected into most
 Component, File and Directory elements.

 The following additional special Ids can be used:

 * ``#PRODUCT`` for the ``<Product>`` element.
 * ``#PRODUCTFEATURE`` for the root ``<Feature>`` element.

 The following example illustrates how this works.

 Given that the WiX generator creates the following XML element:

 .. code-block:: xml

    <Component Id="CM_CP_applications.bin.my_libapp.exe" Guid="*"/>

 The following XML patch file may be used to inject an Environment element
 into it:

 .. code-block:: xml

    <CPackWiXPatch>
      <CPackWiXFragment Id="CM_CP_applications.bin.my_libapp.exe">
        <Environment Id="MyEnvironment" Action="set"
          Name="MyVariableName" Value="MyVariableValue"/>
      </CPackWiXFragment>
    </CPackWiXPatch>

.. variable:: CPACK_WIX_EXTRA_SOURCES

 Extra WiX source files

 This variable provides an optional list of extra WiX source files (.wxs)
 that should be compiled and linked.  The full path to source files is
 required.

.. variable:: CPACK_WIX_EXTRA_OBJECTS

 Extra WiX object files or libraries

 This variable provides an optional list of extra WiX object (.wixobj)
 and/or WiX library (.wixlib) files.  The full path to objects and libraries
 is required.

.. variable:: CPACK_WIX_EXTENSIONS

 This variable provides a list of additional extensions for the WiX
 tools light and candle.

.. variable:: CPACK_WIX_<TOOL>_EXTENSIONS

 This is the tool specific version of CPACK_WIX_EXTENSIONS.
 ``<TOOL>`` can be either LIGHT or CANDLE.

.. variable:: CPACK_WIX_<TOOL>_EXTRA_FLAGS

 This list variable allows you to pass additional
 flags to the WiX tool ``<TOOL>``.

 Use it at your own risk.
 Future versions of CPack may generate flags which may be in conflict
 with your own flags.

 ``<TOOL>`` can be either LIGHT or CANDLE.

.. variable:: CPACK_WIX_CMAKE_PACKAGE_REGISTRY

 If this variable is set the generated installer will create
 an entry in the windows registry key
 ``HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\<package>``
 The value for ``<package>`` is provided by this variable.

 Assuming you also install a CMake configuration file this will
 allow other CMake projects to find your package with
 the ``find_package()`` command.

.. variable:: CPACK_WIX_PROPERTY_<PROPERTY>

 This variable can be used to provide a value for
 the Windows Installer property ``<PROPERTY>``

 The following list contains some example properties that can be used to
 customize information under
 "Programs and Features" (also known as "Add or Remove Programs")

 * ARPCOMMENTS - Comments
 * ARPHELPLINK - Help and support information URL
 * ARPURLINFOABOUT - General information URL
 * ARPURLUPDATEINFO - Update information URL
 * ARPHELPTELEPHONE - Help and support telephone number
 * ARPSIZE - Size (in kilobytes) of the application

CTest
-----

Configure a project for testing with CTest/CDash

Include this module in the top CMakeLists.txt file of a project to
enable testing with CTest and dashboard submissions to CDash::

 project(MyProject)
 ...
 include(CTest)

The module automatically creates a ``BUILD_TESTING`` option that selects
whether to enable testing support (``ON`` by default).  After including
the module, use code like::

 if(BUILD_TESTING)
   # ... CMake code to create tests ...
 endif()

to creating tests when testing is enabled.

To enable submissions to a CDash server, create a ``CTestConfig.cmake``
file at the top of the project with content such as::

 set(CTEST_PROJECT_NAME "MyProject")
 set(CTEST_NIGHTLY_START_TIME "01:00:00 UTC")
 set(CTEST_DROP_METHOD "http")
 set(CTEST_DROP_SITE "my.cdash.org")
 set(CTEST_DROP_LOCATION "/submit.php?project=MyProject")
 set(CTEST_DROP_SITE_CDASH TRUE)

(the CDash server can provide the file to a project administrator who
configures ``MyProject``).  Settings in the config file are shared by
both this ``CTest`` module and the ``ctest(1)`` command-line
:ref:`Dashboard Client` mode (``ctest -S``).

While building a project for submission to CDash, CTest scans the
build output for errors and warnings and reports them with surrounding
context from the build log.  This generic approach works for all build
tools, but does not give details about the command invocation that
produced a given problem.  One may get more detailed reports by setting
the ``CTEST_USE_LAUNCHERS`` variable::

 set(CTEST_USE_LAUNCHERS 1)

in the ``CTestConfig.cmake`` file.

CTestCoverageCollectGCOV
------------------------

This module provides the ``ctest_coverage_collect_gcov`` function.

This function runs gcov on all .gcda files found in the binary tree
and packages the resulting .gcov files into a tar file.
This tarball also contains the following:

* *data.json* defines the source and build directories for use by CDash.
* *Labels.json* indicates any ``LABELS`` that have been set on the
  source files.
* The *uncovered* directory holds any uncovered files found by
  ``CTEST_EXTRA_COVERAGE_GLOB``.

After generating this tar file, it can be sent to CDash for display with the
``ctest_submit(CDASH_UPLOAD)`` command.

.. command:: cdash_coverage_collect_gcov

  ::

   ctest_coverage_collect_gcov(TARBALL <tarfile>
     [SOURCE <source_dir>][BUILD <build_dir>]
     [GCOV_COMMAND <gcov_command>]
     [GCOV_OPTIONS <options>...]
     )

 Run gcov and package a tar file for CDash.  The options are:

 ``TARBALL <tarfile>``
   Specify the location of the ``.tar`` file to be created for later
   upload to CDash.  Relative paths will be interpreted with respect
   to the top-level build directory.

 ``SOURCE <source_dir>``
   Specify the top-level source directory for the build.
   Default is the value of :variable:`CTEST_SOURCE_DIRECTORY`.

 ``BUILD <build_dir>``
   Specify the top-level build directory for the build.
   Default is the value of :variable:`CTEST_BINARY_DIRECTORY`.

 ``GCOV_COMMAND <gcov_command>``
   Specify the full path to the ``gcov`` command on the machine.
   Default is the value of :variable:`CTEST_COVERAGE_COMMAND`.

 ``GCOV_OPTIONS <options>...``
   Specify options to be passed to gcov.  The ``gcov`` command
   is run as ``gcov <options>... -o <gcov-dir> <file>.gcda``.
   If not specified, the default option is just ``-b``.

 ``GLOB``
   Recursively search for .gcda files in build_dir rather than
   determining search locations by reading TargetDirectories.txt.

 ``DELETE``
   Delete coverage files after they've been packaged into the .tar.

 ``QUIET``
   Suppress non-error messages that otherwise would have been
   printed out by this function.

CTestScriptMode
---------------



This file is read by ctest in script mode (-S)

CTestUseLaunchers
-----------------

Set the RULE_LAUNCH_* global properties when CTEST_USE_LAUNCHERS is on.

CTestUseLaunchers is automatically included when you include(CTest).
However, it is split out into its own module file so projects can use
the CTEST_USE_LAUNCHERS functionality independently.

To use launchers, set CTEST_USE_LAUNCHERS to ON in a ctest -S
dashboard script, and then also set it in the cache of the configured
project.  Both cmake and ctest need to know the value of it for the
launchers to work properly.  CMake needs to know in order to generate
proper build rules, and ctest, in order to produce the proper error
and warning analysis.

For convenience, you may set the ENV variable
CTEST_USE_LAUNCHERS_DEFAULT in your ctest -S script, too.  Then, as
long as your CMakeLists uses include(CTest) or
include(CTestUseLaunchers), it will use the value of the ENV variable
to initialize a CTEST_USE_LAUNCHERS cache variable.  This cache
variable initialization only occurs if CTEST_USE_LAUNCHERS is not
already defined.

Dart
----

Configure a project for testing with CTest or old Dart Tcl Client

This file is the backwards-compatibility version of the CTest module.
It supports using the old Dart 1 Tcl client for driving dashboard
submissions as well as testing with CTest.  This module should be
included in the CMakeLists.txt file at the top of a project.  Typical
usage:

::

 include(Dart)
 if(BUILD_TESTING)
   # ... testing related CMake code ...
 endif()

The BUILD_TESTING option is created by the Dart module to determine
whether testing support should be enabled.  The default is ON.

DeployQt4
---------

Functions to help assemble a standalone Qt4 executable.

A collection of CMake utility functions useful for deploying Qt4
executables.

The following functions are provided by this module:

::

 write_qt4_conf
 resolve_qt4_paths
 fixup_qt4_executable
 install_qt4_plugin_path
 install_qt4_plugin
 install_qt4_executable

Requires CMake 2.6 or greater because it uses function and
PARENT_SCOPE.  Also depends on BundleUtilities.cmake.

::

 WRITE_QT4_CONF(<qt_conf_dir> <qt_conf_contents>)

Writes a qt.conf file with the <qt_conf_contents> into <qt_conf_dir>.

::

 RESOLVE_QT4_PATHS(<paths_var> [<executable_path>])

Loop through <paths_var> list and if any don't exist resolve them
relative to the <executable_path> (if supplied) or the
CMAKE_INSTALL_PREFIX.

::

 FIXUP_QT4_EXECUTABLE(<executable>
   [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf>])

Copies Qt plugins, writes a Qt configuration file (if needed) and
fixes up a Qt4 executable using BundleUtilities so it is standalone
and can be drag-and-drop copied to another machine as long as all of
the system libraries are compatible.

<executable> should point to the executable to be fixed-up.

<qtplugins> should contain a list of the names or paths of any Qt
plugins to be installed.

<libs> will be passed to BundleUtilities and should be a list of any
already installed plugins, libraries or executables to also be
fixed-up.

<dirs> will be passed to BundleUtilities and should contain and
directories to be searched to find library dependencies.

<plugins_dir> allows an custom plugins directory to be used.

<request_qt_conf> will force a qt.conf file to be written even if not
needed.

::

 INSTALL_QT4_PLUGIN_PATH(plugin executable copy installed_plugin_path_var
                         <plugins_dir> <component> <configurations>)

Install (or copy) a resolved <plugin> to the default plugins directory
(or <plugins_dir>) relative to <executable> and store the result in
<installed_plugin_path_var>.

If <copy> is set to TRUE then the plugins will be copied rather than
installed.  This is to allow this module to be used at CMake time
rather than install time.

If <component> is set then anything installed will use this COMPONENT.

::

 INSTALL_QT4_PLUGIN(plugin executable copy installed_plugin_path_var
                    <plugins_dir> <component>)

Install (or copy) an unresolved <plugin> to the default plugins
directory (or <plugins_dir>) relative to <executable> and store the
result in <installed_plugin_path_var>.  See documentation of
INSTALL_QT4_PLUGIN_PATH.

::

 INSTALL_QT4_EXECUTABLE(<executable>
   [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf> <component>])

Installs Qt plugins, writes a Qt configuration file (if needed) and
fixes up a Qt4 executable using BundleUtilities so it is standalone
and can be drag-and-drop copied to another machine as long as all of
the system libraries are compatible.  The executable will be fixed-up
at install time.  <component> is the COMPONENT used for bundle fixup
and plugin installation.  See documentation of FIXUP_QT4_BUNDLE.

Documentation
-------------

DocumentationVTK.cmake

This file provides support for the VTK documentation framework.  It
relies on several tools (Doxygen, Perl, etc).

ExternalData
------------

Manage data files stored outside source tree

Introduction
^^^^^^^^^^^^

Use this module to unambiguously reference data files stored outside
the source tree and fetch them at build time from arbitrary local and
remote content-addressed locations.  Functions provided by this module
recognize arguments with the syntax ``DATA{<name>}`` as references to
external data, replace them with full paths to local copies of those
data, and create build rules to fetch and update the local copies.

For example:

 include(ExternalData)
 set(ExternalData_URL_TEMPLATES "file:///local/%(algo)/%(hash)"
                                "file:////host/share/%(algo)/%(hash)"
                                "http://data.org/%(algo)/%(hash)")
 ExternalData_Add_Test(MyData
   NAME MyTest
   COMMAND MyExe DATA{MyInput.png}
   )
 ExternalData_Add_Target(MyData)

When test ``MyTest`` runs the ``DATA{MyInput.png}`` argument will be
replaced by the full path to a real instance of the data file
``MyInput.png`` on disk.  If the source tree contains a content link
such as ``MyInput.png.md5`` then the ``MyData`` target creates a real
``MyInput.png`` in the build tree.

Module Functions
^^^^^^^^^^^^^^^^

.. command:: ExternalData_Expand_Arguments

  The ``ExternalData_Expand_Arguments`` function evaluates ``DATA{}``
  references in its arguments and constructs a new list of arguments::

   ExternalData_Expand_Arguments(
     <target>   # Name of data management target
     <outVar>   # Output variable
     [args...]  # Input arguments, DATA{} allowed
     )

 It replaces each ``DATA{}`` reference in an argument with the full path of
 a real data file on disk that will exist after the ``<target>`` builds.

.. command:: ExternalData_Add_Test

  The ``ExternalData_Add_Test`` function wraps around the CMake
  ``add_test()`` command but supports ``DATA{}`` references in
  its arguments::

   ExternalData_Add_Test(
     <target>   # Name of data management target
     ...        # Arguments of add_test(), DATA{} allowed
     )

 It passes its arguments through ``ExternalData_Expand_Arguments`` and then
 invokes the :command:`add_test` command using the results.

.. command:: ExternalData_Add_Target

  The ``ExternalData_Add_Target`` function creates a custom target to
  manage local instances of data files stored externally::

   ExternalData_Add_Target(
     <target>   # Name of data management target
     )

 It creates custom commands in the target as necessary to make data
 files available for each ``DATA{}`` reference previously evaluated by
 other functions provided by this module.
 Data files may be fetched from one of the URL templates specified in
 the ``ExternalData_URL_TEMPLATES`` variable, or may be found locally
 in one of the paths specified in the ``ExternalData_OBJECT_STORES``
 variable.

Module Variables
^^^^^^^^^^^^^^^^

The following variables configure behavior.  They should be set before
calling any of the functions provided by this module.

.. variable:: ExternalData_BINARY_ROOT

  The ``ExternalData_BINARY_ROOT`` variable may be set to the directory to
  hold the real data files named by expanded ``DATA{}`` references.  The
  default is ``CMAKE_BINARY_DIR``.  The directory layout will mirror that of
  content links under ``ExternalData_SOURCE_ROOT``.

.. variable:: ExternalData_CUSTOM_SCRIPT_<key>

  Specify a full path to a ``.cmake`` custom fetch script identified by
  ``<key>`` in entries of the ``ExternalData_URL_TEMPLATES`` list.
  See `Custom Fetch Scripts`_.

.. variable:: ExternalData_LINK_CONTENT

  The ``ExternalData_LINK_CONTENT`` variable may be set to the name of a
  supported hash algorithm to enable automatic conversion of real data
  files referenced by the ``DATA{}`` syntax into content links.  For each
  such ``<file>`` a content link named ``<file><ext>`` is created.  The
  original file is renamed to the form ``.ExternalData_<algo>_<hash>`` to
  stage it for future transmission to one of the locations in the list
  of URL templates (by means outside the scope of this module).  The
  data fetch rule created for the content link will use the staged
  object if it cannot be found using any URL template.

.. variable:: ExternalData_NO_SYMLINKS

  The real data files named by expanded ``DATA{}`` references may be made
  available under ``ExternalData_BINARY_ROOT`` using symbolic links on
  some platforms.  The ``ExternalData_NO_SYMLINKS`` variable may be set
  to disable use of symbolic links and enable use of copies instead.

.. variable:: ExternalData_OBJECT_STORES

  The ``ExternalData_OBJECT_STORES`` variable may be set to a list of local
  directories that store objects using the layout ``<dir>/%(algo)/%(hash)``.
  These directories will be searched first for a needed object.  If the
  object is not available in any store then it will be fetched remotely
  using the URL templates and added to the first local store listed.  If
  no stores are specified the default is a location inside the build
  tree.

.. variable:: ExternalData_SERIES_PARSE
              ExternalData_SERIES_PARSE_PREFIX
              ExternalData_SERIES_PARSE_NUMBER
              ExternalData_SERIES_PARSE_SUFFIX
              ExternalData_SERIES_MATCH

  See `Referencing File Series`_.

.. variable:: ExternalData_SOURCE_ROOT

  The ``ExternalData_SOURCE_ROOT`` variable may be set to the highest source
  directory containing any path named by a ``DATA{}`` reference.  The
  default is ``CMAKE_SOURCE_DIR``.  ``ExternalData_SOURCE_ROOT`` and
  ``CMAKE_SOURCE_DIR`` must refer to directories within a single source
  distribution (e.g.  they come together in one tarball).

.. variable:: ExternalData_TIMEOUT_ABSOLUTE

  The ``ExternalData_TIMEOUT_ABSOLUTE`` variable sets the download
  absolute timeout, in seconds, with a default of ``300`` seconds.
  Set to ``0`` to disable enforcement.

.. variable:: ExternalData_TIMEOUT_INACTIVITY

  The ``ExternalData_TIMEOUT_INACTIVITY`` variable sets the download
  inactivity timeout, in seconds, with a default of ``60`` seconds.
  Set to ``0`` to disable enforcement.

.. variable:: ExternalData_URL_ALGO_<algo>_<key>

  Specify a custom URL component to be substituted for URL template
  placeholders of the form ``%(algo:<key>)``, where ``<key>`` is a
  valid C identifier, when fetching an object referenced via hash
  algorithm ``<algo>``.  If not defined, the default URL component
  is just ``<algo>`` for any ``<key>``.

.. variable:: ExternalData_URL_TEMPLATES

  The ``ExternalData_URL_TEMPLATES`` may be set to provide a list of
  of URL templates using the placeholders ``%(algo)`` and ``%(hash)``
  in each template.  Data fetch rules try each URL template in order
  by substituting the hash algorithm name for ``%(algo)`` and the hash
  value for ``%(hash)``.  Alternatively one may use ``%(algo:<key>)``
  with ``ExternalData_URL_ALGO_<algo>_<key>`` variables to gain more
  flexibility in remote URLs.

Referencing Files
^^^^^^^^^^^^^^^^^

Referencing Single Files
""""""""""""""""""""""""

The ``DATA{}`` syntax is literal and the ``<name>`` is a full or relative path
within the source tree.  The source tree must contain either a real
data file at ``<name>`` or a "content link" at ``<name><ext>`` containing a
hash of the real file using a hash algorithm corresponding to ``<ext>``.
For example, the argument ``DATA{img.png}`` may be satisfied by either a
real ``img.png`` file in the current source directory or a ``img.png.md5``
file containing its MD5 sum.

Referencing File Series
"""""""""""""""""""""""

The ``DATA{}`` syntax can be told to fetch a file series using the form
``DATA{<name>,:}``, where the ``:`` is literal.  If the source tree
contains a group of files or content links named like a series then a
reference to one member adds rules to fetch all of them.  Although all
members of a series are fetched, only the file originally named by the
``DATA{}`` argument is substituted for it.  The default configuration
recognizes file series names ending with ``#.ext``, ``_#.ext``, ``.#.ext``,
or ``-#.ext`` where ``#`` is a sequence of decimal digits and ``.ext`` is
any single extension.  Configure it with a regex that parses ``<number>``
and ``<suffix>`` parts from the end of ``<name>``::

 ExternalData_SERIES_PARSE = regex of the form (<number>)(<suffix>)$

For more complicated cases set::

 ExternalData_SERIES_PARSE = regex with at least two () groups
 ExternalData_SERIES_PARSE_PREFIX = <prefix> regex group number, if any
 ExternalData_SERIES_PARSE_NUMBER = <number> regex group number
 ExternalData_SERIES_PARSE_SUFFIX = <suffix> regex group number

Configure series number matching with a regex that matches the
``<number>`` part of series members named ``<prefix><number><suffix>``::

 ExternalData_SERIES_MATCH = regex matching <number> in all series members

Note that the ``<suffix>`` of a series does not include a hash-algorithm
extension.

Referencing Associated Files
""""""""""""""""""""""""""""

The ``DATA{}`` syntax can alternatively match files associated with the
named file and contained in the same directory.  Associated files may
be specified by options using the syntax
``DATA{<name>,<opt1>,<opt2>,...}``.  Each option may specify one file by
name or specify a regular expression to match file names using the
syntax ``REGEX:<regex>``.  For example, the arguments::

 DATA{MyData/MyInput.mhd,MyInput.img}                   # File pair
 DATA{MyData/MyFrames00.png,REGEX:MyFrames[0-9]+\\.png} # Series

will pass ``MyInput.mha`` and ``MyFrames00.png`` on the command line but
ensure that the associated files are present next to them.

Referencing Directories
"""""""""""""""""""""""

The ``DATA{}`` syntax may reference a directory using a trailing slash and
a list of associated files.  The form ``DATA{<name>/,<opt1>,<opt2>,...}``
adds rules to fetch any files in the directory that match one of the
associated file options.  For example, the argument
``DATA{MyDataDir/,REGEX:.*}`` will pass the full path to a ``MyDataDir``
directory on the command line and ensure that the directory contains
files corresponding to every file or content link in the ``MyDataDir``
source directory.  In order to match associated files in subdirectories,
specify a ``RECURSE:`` option, e.g. ``DATA{MyDataDir/,RECURSE:,REGEX:.*}``.

Hash Algorithms
^^^^^^^^^^^^^^^

The following hash algorithms are supported::

 %(algo)     <ext>     Description
 -------     -----     -----------
 MD5         .md5      Message-Digest Algorithm 5, RFC 1321
 SHA1        .sha1     US Secure Hash Algorithm 1, RFC 3174
 SHA224      .sha224   US Secure Hash Algorithms, RFC 4634
 SHA256      .sha256   US Secure Hash Algorithms, RFC 4634
 SHA384      .sha384   US Secure Hash Algorithms, RFC 4634
 SHA512      .sha512   US Secure Hash Algorithms, RFC 4634

Note that the hashes are used only for unique data identification and
download verification.

Custom Fetch Scripts
^^^^^^^^^^^^^^^^^^^^

When a data file must be fetched from one of the URL templates
specified in the ``ExternalData_URL_TEMPLATES`` variable, it is
normally downloaded using the ``file(DOWNLOAD)`` command.
One may specify usage of a custom fetch script by using a URL
template of the form ``ExternalDataCustomScript://<key>/<loc>``.
The ``<key>`` must be a C identifier, and the ``<loc>`` must
contain the ``%(algo)`` and ``%(hash)`` placeholders.
A variable corresponding to the key, ``ExternalData_CUSTOM_SCRIPT_<key>``,
must be set to the full path to a ``.cmake`` script file.  The script
will be included to perform the actual fetch, and provided with
the following variables:

.. variable:: ExternalData_CUSTOM_LOCATION

  When a custom fetch script is loaded, this variable is set to the
  location part of the URL, which will contain the substituted hash
  algorithm name and content hash value.

.. variable:: ExternalData_CUSTOM_FILE

  When a custom fetch script is loaded, this variable is set to the
  full path to a file in which the script must store the fetched
  content.  The name of the file is unspecified and should not be
  interpreted in any way.

The custom fetch script is expected to store fetched content in the
file or set a variable:

.. variable:: ExternalData_CUSTOM_ERROR

  When a custom fetch script fails to fetch the requested content,
  it must set this variable to a short one-line message describing
  the reason for failure.


ExternalProject
---------------

Create custom targets to build projects in external trees

.. command:: ExternalProject_Add

  The ``ExternalProject_Add`` function creates a custom target to drive
  download, update/patch, configure, build, install and test steps of an
  external project::

  ExternalProject_Add(<name> [<option>...])

 General options are:

 ``DEPENDS <projects>...``
   Targets on which the project depends
 ``PREFIX <dir>``
   Root dir for entire project
 ``LIST_SEPARATOR <sep>``
   Sep to be replaced by ; in cmd lines
 ``TMP_DIR <dir>``
   Directory to store temporary files
 ``STAMP_DIR <dir>``
   Directory to store step timestamps
 ``EXCLUDE_FROM_ALL 1``
   The "all" target does not depend on this

 Download step options are:

 ``DOWNLOAD_NAME <fname>``
   File name to store (if not end of URL)
 ``DOWNLOAD_DIR <dir>``
   Directory to store downloaded files
 ``DOWNLOAD_COMMAND <cmd>...``
   Command to download source tree
 ``DOWNLOAD_NO_PROGRESS 1``
   Disable download progress reports
 ``CVS_REPOSITORY <cvsroot>``
   CVSROOT of CVS repository
 ``CVS_MODULE <mod>``
   Module to checkout from CVS repo
 ``CVS_TAG <tag>``
   Tag to checkout from CVS repo
 ``SVN_REPOSITORY <url>``
   URL of Subversion repo
 ``SVN_REVISION -r<rev>``
   Revision to checkout from Subversion repo
 ``SVN_USERNAME <username>``
   Username for Subversion checkout and update
 ``SVN_PASSWORD <password>``
   Password for Subversion checkout and update
 ``SVN_TRUST_CERT 1``
   Trust the Subversion server site certificate
 ``GIT_REPOSITORY <url>``
   URL of git repo
 ``GIT_TAG <tag>``
   Git branch name, commit id or tag
 ``GIT_REMOTE_NAME <name>``
   The optional name of the remote, default to ``origin``
 ``GIT_SUBMODULES <module>...``
   Git submodules that shall be updated, all if empty
 ``GIT_SHALLOW 1``
   Tell Git to clone with ``--depth 1``.   Use when ``GIT_TAG`` is not
   specified or when it names a branch in order to download only the
   tip of the branch without the rest of its history.
 ``HG_REPOSITORY <url>``
   URL of mercurial repo
 ``HG_TAG <tag>``
   Mercurial branch name, commit id or tag
 ``URL /.../src.tgz``
   Full path or URL of source
 ``URL_HASH ALGO=value``
   Hash of file at URL
 ``URL_MD5 md5``
   Equivalent to URL_HASH MD5=md5
 ``TLS_VERIFY <bool>``
   Should certificate for https be checked
 ``TLS_CAINFO <file>``
   Path to a certificate authority file
 ``TIMEOUT <seconds>``
   Time allowed for file download operations
 ``DOWNLOAD_NO_EXTRACT 1``
   Just download the file and do not extract it; the full path to the
   downloaded file is available as ``<DOWNLOADED_FILE>``.

 Update/Patch step options are:

 ``UPDATE_COMMAND <cmd>...``
   Source work-tree update command
 ``UPDATE_DISCONNECTED 1``
   Never update automatically from the remote repository
 ``PATCH_COMMAND <cmd>...``
   Command to patch downloaded source

 Configure step options are:

 ``SOURCE_DIR <dir>``
   Source dir to be used for build
 ``CONFIGURE_COMMAND <cmd>...``
   Build tree configuration command
 ``CMAKE_COMMAND /.../cmake``
   Specify alternative cmake executable
 ``CMAKE_GENERATOR <gen>``
   Specify generator for native build
 ``CMAKE_GENERATOR_PLATFORM <platform>``
   Generator-specific platform name
 ``CMAKE_GENERATOR_TOOLSET <toolset>``
   Generator-specific toolset name
 ``CMAKE_ARGS <arg>...``
   Arguments to CMake command line.
   These arguments are passed to CMake command line, and can contain
   arguments other than cache values, see also
   :manual:`CMake Options <cmake(1)>`. Arguments in the form
   ``-Dvar:string=on`` are always passed to the command line, and
   therefore cannot be changed by the user.
   Arguments may use
   :manual:`generator expressions <cmake-generator-expressions(7)>`.
 ``CMAKE_CACHE_ARGS <arg>...``
   Initial cache arguments, of the form ``-Dvar:string=on``.
   These arguments are written in a pre-load a script that populates
   CMake cache, see also :manual:`cmake -C <cmake(1)>`. This allows one to
   overcome command line length limits.
   These arguments are :command:`set` using the ``FORCE`` argument,
   and therefore cannot be changed by the user.
   Arguments may use
   :manual:`generator expressions <cmake-generator-expressions(7)>`.
 ``CMAKE_CACHE_DEFAULT_ARGS <arg>...``
   Initial default cache arguments, of the form ``-Dvar:string=on``.
   These arguments are written in a pre-load a script that populates
   CMake cache, see also :manual:`cmake -C <cmake(1)>`. This allows one to
   overcome command line length limits.
   These arguments can be used as default value that will be set if no
   previous value is found in the cache, and that the user can change
   later.
   Arguments may use
   :manual:`generator expressions <cmake-generator-expressions(7)>`.

 Build step options are:

 ``BINARY_DIR <dir>``
   Specify build dir location
 ``BUILD_COMMAND <cmd>...``
   Command to drive the native build
 ``BUILD_IN_SOURCE 1``
   Use source dir for build dir
 ``BUILD_ALWAYS 1``
   No stamp file, build step always runs
 ``BUILD_BYPRODUCTS <file>...``
   Files that will be generated by the build command but may or may
   not have their modification time updated by subsequent builds.

 Install step options are:

 ``INSTALL_DIR <dir>``
   Installation prefix
 ``INSTALL_COMMAND <cmd>...``
   Command to drive install after build

 Test step options are:

 ``TEST_BEFORE_INSTALL 1``
   Add test step executed before install step
 ``TEST_AFTER_INSTALL 1``
   Add test step executed after install step
 ``TEST_EXCLUDE_FROM_MAIN 1``
   Main target does not depend on the test step
 ``TEST_COMMAND <cmd>...``
   Command to drive test

 Output logging options are:

 ``LOG_DOWNLOAD 1``
   Wrap download in script to log output
 ``LOG_UPDATE 1``
   Wrap update in script to log output
 ``LOG_CONFIGURE 1``
   Wrap configure in script to log output
 ``LOG_BUILD 1``
   Wrap build in script to log output
 ``LOG_TEST 1``
   Wrap test in script to log output
 ``LOG_INSTALL 1``
   Wrap install in script to log output

 Steps can be given direct access to the terminal if possible.  With
 the :generator:`Ninja` generator, this places the steps in the
 ``console`` :prop_gbl:`pool <JOB_POOLS>`.  Options are:

 ``USES_TERMINAL_DOWNLOAD 1``
   Give download terminal access.
 ``USES_TERMINAL_UPDATE 1``
   Give update terminal access.
 ``USES_TERMINAL_CONFIGURE 1``
   Give configure terminal access.
 ``USES_TERMINAL_BUILD 1``
   Give build terminal access.
 ``USES_TERMINAL_TEST 1``
   Give test terminal access.
 ``USES_TERMINAL_INSTALL 1``
   Give install terminal access.

 Other options are:

 ``STEP_TARGETS <step-target>...``
   Generate custom targets for these steps
 ``INDEPENDENT_STEP_TARGETS <step-target>...``
   Generate custom targets for these steps that do not depend on other
   external projects even if a dependency is set

 The ``*_DIR`` options specify directories for the project, with default
 directories computed as follows.  If the ``PREFIX`` option is given to
 ``ExternalProject_Add()`` or the ``EP_PREFIX`` directory property is set,
 then an external project is built and installed under the specified prefix::

  TMP_DIR      = <prefix>/tmp
  STAMP_DIR    = <prefix>/src/<name>-stamp
  DOWNLOAD_DIR = <prefix>/src
  SOURCE_DIR   = <prefix>/src/<name>
  BINARY_DIR   = <prefix>/src/<name>-build
  INSTALL_DIR  = <prefix>

 Otherwise, if the ``EP_BASE`` directory property is set then components
 of an external project are stored under the specified base::

  TMP_DIR      = <base>/tmp/<name>
  STAMP_DIR    = <base>/Stamp/<name>
  DOWNLOAD_DIR = <base>/Download/<name>
  SOURCE_DIR   = <base>/Source/<name>
  BINARY_DIR   = <base>/Build/<name>
  INSTALL_DIR  = <base>/Install/<name>

 If no ``PREFIX``, ``EP_PREFIX``, or ``EP_BASE`` is specified then the
 default is to set ``PREFIX`` to ``<name>-prefix``.  Relative paths are
 interpreted with respect to the build directory corresponding to the
 source directory in which ``ExternalProject_Add`` is invoked.

 If ``SOURCE_DIR`` is explicitly set to an existing directory the project
 will be built from it.  Otherwise a download step must be specified
 using one of the ``DOWNLOAD_COMMAND``, ``CVS_*``, ``SVN_*``, or ``URL``
 options.  The ``URL`` option may refer locally to a directory or source
 tarball, or refer to a remote tarball (e.g. ``http://.../src.tgz``).

 If ``UPDATE_DISCONNECTED`` is set, the update step is not executed
 automatically when building the main target. The update step can still
 be added as a step target and called manually. This is useful if you
 want to allow one to build the project when you are disconnected from the
 network (you might still need the network for the download step).
 This is disabled by default.
 The directory property ``EP_UPDATE_DISCONNECTED`` can be used to change
 the default value for all the external projects in the current
 directory and its subdirectories.

.. command:: ExternalProject_Add_Step

  The ``ExternalProject_Add_Step`` function adds a custom step to an
  external project::

  ExternalProject_Add_Step(<name> <step> [<option>...])

 Options are:

 ``COMMAND <cmd>...``
   Command line invoked by this step
 ``COMMENT "<text>..."``
   Text printed when step executes
 ``DEPENDEES <step>...``
   Steps on which this step depends
 ``DEPENDERS <step>...``
   Steps that depend on this step
 ``DEPENDS <file>...``
   Files on which this step depends
 ``BYPRODUCTS <file>...``
   Files that will be generated by this step but may or may not
   have their modification time updated by subsequent builds.
 ``ALWAYS 1``
   No stamp file, step always runs
 ``EXCLUDE_FROM_MAIN 1``
   Main target does not depend on this step
 ``WORKING_DIRECTORY <dir>``
   Working directory for command
 ``LOG 1``
   Wrap step in script to log output
 ``USES_TERMINAL 1``
   Give the step direct access to the terminal if possible.

 The command line, comment, working directory, and byproducts of every
 standard and custom step are processed to replace tokens ``<SOURCE_DIR>``,
 ``<BINARY_DIR>``, ``<INSTALL_DIR>``, and ``<TMP_DIR>`` with
 corresponding property values.

Any builtin step that specifies a ``<step>_COMMAND cmd...`` or custom
step that specifies a ``COMMAND cmd...`` may specify additional command
lines using the form ``COMMAND cmd...``.  At build time the commands
will be executed in order and aborted if any one fails.  For example::

 ... BUILD_COMMAND make COMMAND echo done ...

specifies to run ``make`` and then ``echo done`` during the build step.
Whether the current working directory is preserved between commands is
not defined.  Behavior of shell operators like ``&&`` is not defined.

Arguments to ``<step>_COMMAND`` or ``COMMAND`` options may use
``generator expressions``.

.. command:: ExternalProject_Get_Property

  The ``ExternalProject_Get_Property`` function retrieves external project
  target properties::

   ExternalProject_Get_Property(<name> [prop1 [prop2 [...]]])

 It stores property values in variables of the same name.  Property
 names correspond to the keyword argument names of
 ``ExternalProject_Add``.

.. command:: ExternalProject_Add_StepTargets

  The ``ExternalProject_Add_StepTargets`` function generates custom
  targets for the steps listed::

 ExternalProject_Add_StepTargets(<name> [NO_DEPENDS] [step1 [step2 [...]]])

If ``NO_DEPENDS`` is set, the target will not depend on the
dependencies of the complete project. This is usually safe to use for
the download, update, and patch steps that do not require that all the
dependencies are updated and built.  Using ``NO_DEPENDS`` for other
of the default steps might break parallel builds, so you should avoid,
it.  For custom steps, you should consider whether or not the custom
commands requires that the dependencies are configured, built and
installed.

If ``STEP_TARGETS`` or ``INDEPENDENT_STEP_TARGETS`` is set then
``ExternalProject_Add_StepTargets`` is automatically called at the end
of matching calls to ``ExternalProject_Add_Step``.  Pass
``STEP_TARGETS`` or ``INDEPENDENT_STEP_TARGETS`` explicitly to
individual ``ExternalProject_Add`` calls, or implicitly to all
``ExternalProject_Add`` calls by setting the directory properties
``EP_STEP_TARGETS`` and ``EP_INDEPENDENT_STEP_TARGETS``.  The
``INDEPENDENT`` version of the argument and of the property will call
``ExternalProject_Add_StepTargets`` with the ``NO_DEPENDS`` argument.

If ``STEP_TARGETS`` and ``INDEPENDENT_STEP_TARGETS`` are not set,
clients may still manually call ``ExternalProject_Add_StepTargets``
after calling ``ExternalProject_Add`` or ``ExternalProject_Add_Step``.

This functionality is provided to make it easy to drive the steps
independently of each other by specifying targets on build command
lines.  For example, you may be submitting to a sub-project based
dashboard, where you want to drive the configure portion of the build,
then submit to the dashboard, followed by the build portion, followed
by tests.  If you invoke a custom target that depends on a step
halfway through the step dependency chain, then all the previous steps
will also run to ensure everything is up to date.

For example, to drive configure, build and test steps independently
for each ``ExternalProject_Add`` call in your project, write the following
line prior to any ``ExternalProject_Add`` calls in your ``CMakeLists.txt``
file::

 set_property(DIRECTORY PROPERTY EP_STEP_TARGETS configure build test)

.. command:: ExternalProject_Add_StepDependencies

  The ``ExternalProject_Add_StepDependencies`` function add some
  dependencies for some external project step::

   ExternalProject_Add_StepDependencies(<name> <step> [target1 [target2 [...]]])

 This function takes care to set both target and file level
 dependencies, and will ensure that parallel builds will not break.
 It should be used instead of :command:`add_dependencies()` when adding
 a dependency for some of the step targets generated by
 ``ExternalProject``.

FeatureSummary
--------------

Macros for generating a summary of enabled/disabled features



This module provides the macros feature_summary(),
set_package_properties() and add_feature_info().  For compatibility it
also still provides set_package_info(), set_feature_info(),
print_enabled_features() and print_disabled_features().

These macros can be used to generate a summary of enabled and disabled
packages and/or feature for a build tree:

::

 -- The following OPTIONAL packages have been found:
 LibXml2 (required version >= 2.4), XML processing lib, <http://xmlsoft.org>
    * Enables HTML-import in MyWordProcessor
    * Enables odt-export in MyWordProcessor
 PNG , A PNG image library. , <http://www.libpng.org/pub/png/>
    * Enables saving screenshots
 -- The following OPTIONAL packages have not been found:
 Lua51 , The Lua scripting language. , <http://www.lua.org>
    * Enables macros in MyWordProcessor
 Foo , Foo provides cool stuff.

::

 FEATURE_SUMMARY( [FILENAME <file>]
                  [APPEND]
                  [VAR <variable_name>]
                  [INCLUDE_QUIET_PACKAGES]
                  [FATAL_ON_MISSING_REQUIRED_PACKAGES]
                  [DESCRIPTION "Found packages:"]
                  WHAT (ALL | PACKAGES_FOUND | PACKAGES_NOT_FOUND
                       | ENABLED_FEATURES | DISABLED_FEATURES)
                )

The FEATURE_SUMMARY() macro can be used to print information about
enabled or disabled packages or features of a project.  By default,
only the names of the features/packages will be printed and their
required version when one was specified.  Use SET_PACKAGE_PROPERTIES()
to add more useful information, like e.g.  a download URL for the
respective package or their purpose in the project.

The WHAT option is the only mandatory option.  Here you specify what
information will be printed:

``ALL``
 print everything
``ENABLED_FEATURES``
 the list of all features which are enabled
``DISABLED_FEATURES``
 the list of all features which are disabled
``PACKAGES_FOUND``
 the list of all packages which have been found
``PACKAGES_NOT_FOUND``
 the list of all packages which have not been found
``OPTIONAL_PACKAGES_FOUND``
 only those packages which have been found which have the type OPTIONAL
``OPTIONAL_PACKAGES_NOT_FOUND``
 only those packages which have not been found which have the type OPTIONAL
``RECOMMENDED_PACKAGES_FOUND``
 only those packages which have been found which have the type RECOMMENDED
``RECOMMENDED_PACKAGES_NOT_FOUND``
 only those packages which have not been found which have the type RECOMMENDED
``REQUIRED_PACKAGES_FOUND``
 only those packages which have been found which have the type REQUIRED
``REQUIRED_PACKAGES_NOT_FOUND``
 only those packages which have not been found which have the type REQUIRED
``RUNTIME_PACKAGES_FOUND``
 only those packages which have been found which have the type RUNTIME
``RUNTIME_PACKAGES_NOT_FOUND``
 only those packages which have not been found which have the type RUNTIME

With the exception of the ``ALL`` value, these values can be combined
in order to customize the output. For example:

::

 feature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)

If a FILENAME is given, the information is printed into this file.  If
APPEND is used, it is appended to this file, otherwise the file is
overwritten if it already existed.  If the VAR option is used, the
information is "printed" into the specified variable.  If FILENAME is
not used, the information is printed to the terminal.  Using the
DESCRIPTION option a description or headline can be set which will be
printed above the actual content.  If INCLUDE_QUIET_PACKAGES is given,
packages which have been searched with find_package(...  QUIET) will
also be listed.  By default they are skipped.  If
FATAL_ON_MISSING_REQUIRED_PACKAGES is given, CMake will abort if a
package which is marked as REQUIRED has not been found.

Example 1, append everything to a file:

::

 feature_summary(WHAT ALL
                 FILENAME ${CMAKE_BINARY_DIR}/all.log APPEND)

Example 2, print the enabled features into the variable
enabledFeaturesText, including QUIET packages:

::

 feature_summary(WHAT ENABLED_FEATURES
                 INCLUDE_QUIET_PACKAGES
                 DESCRIPTION "Enabled Features:"
                 VAR enabledFeaturesText)
 message(STATUS "${enabledFeaturesText}")

::

 SET_PACKAGE_PROPERTIES(<name> PROPERTIES
                        [ URL <url> ]
                        [ DESCRIPTION <description> ]
                        [ TYPE (RUNTIME|OPTIONAL|RECOMMENDED|REQUIRED) ]
                        [ PURPOSE <purpose> ]
                       )

Use this macro to set up information about the named package, which
can then be displayed via FEATURE_SUMMARY().  This can be done either
directly in the Find-module or in the project which uses the module
after the find_package() call.  The features for which information can
be set are added automatically by the find_package() command.

URL: this should be the homepage of the package, or something similar.
Ideally this is set already directly in the Find-module.

DESCRIPTION: A short description what that package is, at most one
sentence.  Ideally this is set already directly in the Find-module.

TYPE: What type of dependency has the using project on that package.
Default is OPTIONAL.  In this case it is a package which can be used
by the project when available at buildtime, but it also work without.
RECOMMENDED is similar to OPTIONAL, i.e.  the project will build if
the package is not present, but the functionality of the resulting
binaries will be severly limited.  If a REQUIRED package is not
available at buildtime, the project may not even build.  This can be
combined with the FATAL_ON_MISSING_REQUIRED_PACKAGES argument for
feature_summary().  Last, a RUNTIME package is a package which is
actually not used at all during the build, but which is required for
actually running the resulting binaries.  So if such a package is
missing, the project can still be built, but it may not work later on.
If set_package_properties() is called multiple times for the same
package with different TYPEs, the TYPE is only changed to higher TYPEs
( RUNTIME < OPTIONAL < RECOMMENDED < REQUIRED ), lower TYPEs are
ignored.  The TYPE property is project-specific, so it cannot be set
by the Find-module, but must be set in the project.

PURPOSE: This describes which features this package enables in the
project, i.e.  it tells the user what functionality he gets in the
resulting binaries.  If set_package_properties() is called multiple
times for a package, all PURPOSE properties are appended to a list of
purposes of the package in the project.  As the TYPE property, also
the PURPOSE property is project-specific, so it cannot be set by the
Find-module, but must be set in the project.



Example for setting the info for a package:

::

 find_package(LibXml2)
 set_package_properties(LibXml2 PROPERTIES
                        DESCRIPTION "A XML processing library."
                        URL "http://xmlsoft.org/")

::

 set_package_properties(LibXml2 PROPERTIES
                        TYPE RECOMMENDED
                        PURPOSE "Enables HTML-import in MyWordProcessor")
 ...
 set_package_properties(LibXml2 PROPERTIES
                        TYPE OPTIONAL
                        PURPOSE "Enables odt-export in MyWordProcessor")

::

 find_package(DBUS)
 set_package_properties(DBUS PROPERTIES
   TYPE RUNTIME
   PURPOSE "Necessary to disable the screensaver during a presentation" )

::

 ADD_FEATURE_INFO(<name> <enabled> <description>)

Use this macro to add information about a feature with the given
<name>.  <enabled> contains whether this feature is enabled or not,
<description> is a text describing the feature.  The information can
be displayed using feature_summary() for ENABLED_FEATURES and
DISABLED_FEATURES respectively.

Example for setting the info for a feature:

::

 option(WITH_FOO "Help for foo" ON)
 add_feature_info(Foo WITH_FOO "The Foo feature provides very cool stuff.")

The following macros are provided for compatibility with previous
CMake versions:

::

 SET_PACKAGE_INFO(<name> <description> [<url> [<purpose>] ] )

Use this macro to set up information about the named package, which
can then be displayed via FEATURE_SUMMARY().  This can be done either
directly in the Find-module or in the project which uses the module
after the find_package() call.  The features for which information can
be set are added automatically by the find_package() command.

::

 PRINT_ENABLED_FEATURES()

Does the same as FEATURE_SUMMARY(WHAT ENABLED_FEATURES DESCRIPTION
"Enabled features:")

::

 PRINT_DISABLED_FEATURES()

Does the same as FEATURE_SUMMARY(WHAT DISABLED_FEATURES DESCRIPTION
"Disabled features:")

::

 SET_FEATURE_INFO(<name> <description> [<url>] )

Does the same as SET_PACKAGE_INFO(<name> <description> <url> )

FindALSA
--------

Find alsa

Find the alsa libraries (asound)

::

 This module defines the following variables:
    ALSA_FOUND       - True if ALSA_INCLUDE_DIR & ALSA_LIBRARY are found
    ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found
    ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found

::

 ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.
 ALSA_LIBRARY     - the asound library
 ALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)

FindArmadillo
-------------

Find Armadillo

Find the Armadillo C++ library

Using Armadillo:

::

 find_package(Armadillo REQUIRED)
 include_directories(${ARMADILLO_INCLUDE_DIRS})
 add_executable(foo foo.cc)
 target_link_libraries(foo ${ARMADILLO_LIBRARIES})

This module sets the following variables:

::

 ARMADILLO_FOUND - set to true if the library is found
 ARMADILLO_INCLUDE_DIRS - list of required include directories
 ARMADILLO_LIBRARIES - list of libraries to be linked
 ARMADILLO_VERSION_MAJOR - major version number
 ARMADILLO_VERSION_MINOR - minor version number
 ARMADILLO_VERSION_PATCH - patch version number
 ARMADILLO_VERSION_STRING - version number as a string (ex: "1.0.4")
 ARMADILLO_VERSION_NAME - name of the version (ex: "Antipodean Antileech")

FindASPELL
----------

Try to find ASPELL

Once done this will define

::

 ASPELL_FOUND - system has ASPELL
 ASPELL_EXECUTABLE - the ASPELL executable
 ASPELL_INCLUDE_DIR - the ASPELL include directory
 ASPELL_LIBRARIES - The libraries needed to use ASPELL
 ASPELL_DEFINITIONS - Compiler switches required for using ASPELL

FindAVIFile
-----------

Locate AVIFILE library and include paths

AVIFILE (http://avifile.sourceforge.net/)is a set of libraries for
i386 machines to use various AVI codecs.  Support is limited beyond
Linux.  Windows provides native AVI support, and so doesn't need this
library.  This module defines

::

 AVIFILE_INCLUDE_DIR, where to find avifile.h , etc.
 AVIFILE_LIBRARIES, the libraries to link against
 AVIFILE_DEFINITIONS, definitions to use when compiling
 AVIFILE_FOUND, If false, don't try to use AVIFILE

FindBISON
---------

Find ``bison`` executable and provide a macro to generate custom build rules.

The module defines the following variables:

``BISON_EXECUTABLE``
  path to the ``bison`` program

``BISON_VERSION``
  version of ``bison``

``BISON_FOUND``
  true if the program was found

The minimum required version of ``bison`` can be specified using the
standard CMake syntax, e.g.  ``find_package(BISON 2.1.3)``.

If ``bison`` is found, the module defines the macro::

 BISON_TARGET(<Name> <YaccInput> <CodeOutput>
              [COMPILE_FLAGS <flags>]
              [DEFINES_FILE <file>]
              [VERBOSE <file>]
              )

which will create a custom rule to generate a parser.  ``<YaccInput>`` is
the path to a yacc file.  ``<CodeOutput>`` is the name of the source file
generated by bison.  A header file is also be generated, and contains
the token list.

The options are:

``COMPILE_FLAGS <flags>``
  Specify flags to be added to the ``bison`` command line.

``DEFINES_FILE <file>``
  Specify a non-default header ``<file>`` to be generated by ``bison``.

``VERBOSE <file>``
  Tell ``bison`` to write verbose descriptions of the grammar and
  parser to the given ``<file>``.

The macro defines the following variables:

``BISON_<Name>_DEFINED``
  true is the macro ran successfully

``BISON_<Name>_INPUT``
  The input source file, an alias for <YaccInput>

``BISON_<Name>_OUTPUT_SOURCE``
  The source file generated by bison

``BISON_<Name>_OUTPUT_HEADER``
  The header file generated by bison

``BISON_<Name>_OUTPUTS``
  The sources files generated by bison

``BISON_<Name>_COMPILE_FLAGS``
  Options used in the ``bison`` command line

Example usage:

 find_package(BISON)
 BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp
              DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser.h)
 add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})

FindBLAS
--------

Find BLAS library

This module finds an installed fortran library that implements the
BLAS linear-algebra interface (see http://www.netlib.org/blas/).  The
list of libraries searched for is taken from the autoconf macro file,
acx_blas.m4 (distributed at
http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).

This module sets the following variables:

::

 BLAS_FOUND - set to true if a library implementing the BLAS interface
   is found
 BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l
   and -L).
 BLAS_LIBRARIES - uncached list of libraries (using full path name) to
   link against to use BLAS
 BLAS95_LIBRARIES - uncached list of libraries (using full path name)
   to link against to use BLAS95 interface
 BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface
   is found
 BLA_STATIC  if set on this determines what kind of linkage we do (static)
 BLA_VENDOR  if set checks only the specified vendor, if not set checks
    all the possibilities
 BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK

######### ## List of vendors (BLA_VENDOR) valid in this module #
Goto,OpenBLAS,ATLAS PhiPACK,CXML,DXML,SunPerf,SCSL,SGIMATH,IBMESSL,
Intel10_32 (intel mkl v10 32 bit),Intel10_64lp (intel mkl v10 64 bit,
lp thread model, lp64 model), # Intel10_64lp_seq (intel mkl v10 64
bit,sequential code, lp64 model), # Intel( older versions of mkl 32
and 64 bit), ACML,ACML_MP,ACML_GPU,Apple, NAS, Generic C/CXX should be
enabled to use Intel mkl

FindBacktrace
-------------

Find provider for backtrace(3).

Checks if OS supports backtrace(3) via either libc or custom library.
This module defines the following variables:

``Backtrace_HEADER``
  The header file needed for backtrace(3). Cached.
  Could be forcibly set by user.
``Backtrace_INCLUDE_DIRS``
  The include directories needed to use backtrace(3) header.
``Backtrace_LIBRARIES``
  The libraries (linker flags) needed to use backtrace(3), if any.
``Backtrace_FOUND``
  Is set if and only if backtrace(3) support detected.

The following cache variables are also available to set or use:

``Backtrace_LIBRARY``
  The external library providing backtrace, if any.
``Backtrace_INCLUDE_DIR``
  The directory holding the backtrace(3) header.

Typical usage is to generate of header file using configure_file() with the
contents like the following::

 #cmakedefine01 Backtrace_FOUND
 #if Backtrace_FOUND
 # include <${Backtrace_HEADER}>
 #endif

And then reference that generated header file in actual source.

FindBoost
---------

Find Boost include dirs and libraries

Use this module by invoking find_package with the form::

 find_package(Boost
   [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0
   [REQUIRED]             # Fail with error if Boost is not found
   [COMPONENTS <libs>...] # Boost libraries by their canonical name
   )                      # e.g. "date_time" for "libboost_date_time"

This module finds headers and requested component libraries OR a CMake
package configuration file provided by a "Boost CMake" build.  For the
latter case skip to the "Boost CMake" section below.  For the former
case results are reported in variables::

 Boost_FOUND            - True if headers and requested libraries were found
 Boost_INCLUDE_DIRS     - Boost include directories
 Boost_LIBRARY_DIRS     - Link directories for Boost libraries
 Boost_LIBRARIES        - Boost component libraries to be linked
 Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)
 Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include
                          target_link_libraries debug/optimized keywords)
 Boost_VERSION          - BOOST_VERSION value from boost/version.hpp
 Boost_LIB_VERSION      - Version string appended to library filenames
 Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)
 Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)
 Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)
 Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)
                        - Pass to add_definitions() to have diagnostic
                          information about Boost's automatic linking
                          displayed during compilation

This module reads hints about search locations from variables::

 BOOST_ROOT             - Preferred installation prefix
  (or BOOSTROOT)
 BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include
 BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib
 Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not
                          specified by these hint variables. Default is OFF.
 Boost_ADDITIONAL_VERSIONS
                        - List of Boost versions not known to this module
                          (Boost install locations may contain the version)

and saves search results persistently in CMake cache entries::

 Boost_INCLUDE_DIR         - Directory containing Boost headers
 Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries
 Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries
 Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant
 Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant

The following ``IMPORTED`` targets are also defined::

 Boost::boost                  - Target for header-only dependencies
                                 (Boost include directory)
 Boost::<C>                    - Target for specific component dependency
                                 (shared or static library); <C> is lower-
                                 case
 Boost::diagnostic_definitions - interface target to enable diagnostic
                                 information about Boost's automatic linking
                                 during compilation (adds BOOST_LIB_DIAGNOSTIC)
 Boost::disable_autolinking    - interface target to disable automatic
                                 linking with MSVC (adds BOOST_ALL_NO_LIB)
 Boost::dynamic_linking        - interface target to enable dynamic linking
                                 linking with MSVC (adds BOOST_ALL_DYN_LINK)

Implicit dependencies such as Boost::filesystem requiring
Boost::system will be automatically detected and satisfied, even
if system is not specified when using find_package and if
Boost::system is not added to target_link_libraries.  If using
Boost::thread, then Thread::Thread will also be added automatically.

It is important to note that the imported targets behave differently
than variables created by this module: multiple calls to
find_package(Boost) in the same directory or sub-directories with
different options (e.g. static or shared) will not override the
values of the targets created by the first call.

Users may set these hints or results as cache entries.  Projects
should not read these entries directly but instead use the above
result variables.  Note that some hint names start in upper-case
"BOOST".  One may specify these as environment variables if they are
not specified as CMake variables or cache entries.

This module first searches for the Boost header files using the above
hint variables (excluding BOOST_LIBRARYDIR) and saves the result in
Boost_INCLUDE_DIR.  Then it searches for requested component libraries
using the above hints (excluding BOOST_INCLUDEDIR and
Boost_ADDITIONAL_VERSIONS), "lib" directories near Boost_INCLUDE_DIR,
and the library name configuration settings below.  It saves the
library directories in Boost_LIBRARY_DIR_DEBUG and
Boost_LIBRARY_DIR_RELEASE and individual library
locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.
When one changes settings used by previous searches in the same build
tree (excluding environment variables) this module discards previous
search results affected by the changes and searches again.

Boost libraries come in many variants encoded in their file name.
Users or projects may tell this module which variant to find by
setting variables::

 Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded
                            libraries ('mt' tag).  Default is ON.
 Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static
                            libraries.  Default is OFF.
 Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use
                            libraries linked statically to the C++ runtime
                            ('s' tag).  Default is platform dependent.
 Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use
                            libraries linked to the MS debug C++ runtime
                            ('g' tag).  Default is ON.
 Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a
                            debug Python build ('y' tag). Default is OFF.
 Boost_USE_STLPORT        - Set to ON to use libraries compiled with
                            STLPort ('p' tag).  Default is OFF.
 Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS
                          - Set to ON to use libraries compiled with
                            STLPort deprecated "native iostreams"
                            ('n' tag).  Default is OFF.
 Boost_COMPILER           - Set to the compiler-specific library suffix
                            (e.g. "-gcc43").  Default is auto-computed
                            for the C++ compiler in use.
 Boost_THREADAPI          - Suffix for "thread" component library name,
                            such as "pthread" or "win32".  Names with
                            and without this suffix will both be tried.
 Boost_NAMESPACE          - Alternate namespace used to build boost with
                            e.g. if set to "myboost", will search for
                            myboost_thread instead of boost_thread.

Other variables one may set to control this module are::

 Boost_DEBUG              - Set to ON to enable debug output from FindBoost.
                            Please enable this before filing any bug report.
 Boost_DETAILED_FAILURE_MSG
                          - Set to ON to add detailed information to the
                            failure message even when the REQUIRED option
                            is not given to the find_package call.
 Boost_REALPATH           - Set to ON to resolve symlinks for discovered
                            libraries to assist with packaging.  For example,
                            the "system" component library may be resolved to
                            "/usr/lib/libboost_system.so.1.42.0" instead of
                            "/usr/lib/libboost_system.so".  This does not
                            affect linking and should not be enabled unless
                            the user needs this information.
 Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and
                            Boost_LIBRARY_DIR_DEBUG.

On Visual Studio and Borland compilers Boost headers request automatic
linking to corresponding libraries.  This requires matching libraries
to be linked explicitly or available in the link library search path.
In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve
dynamic linking.  Boost automatic linking typically requests static
libraries with a few exceptions (such as Boost.Python).  Use::

 add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})

to ask Boost to report information about automatic linking requests.

Example to find Boost headers only::

 find_package(Boost 1.36.0)
 if(Boost_FOUND)
   include_directories(${Boost_INCLUDE_DIRS})
   add_executable(foo foo.cc)
 endif()

Example to find Boost libraries and use imported targets::

 find_package(Boost 1.56 REQUIRED COMPONENTS
              date_time filesystem iostreams)
 add_executable(foo foo.cc)
 target_link_libraries(foo Boost::date_time Boost::filesystem
                           Boost::iostreams)

Example to find Boost headers and some *static* libraries::

 set(Boost_USE_STATIC_LIBS        ON) # only find static libs
 set(Boost_USE_MULTITHREADED      ON)
 set(Boost_USE_STATIC_RUNTIME    OFF)
 find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)
 if(Boost_FOUND)
   include_directories(${Boost_INCLUDE_DIRS})
   add_executable(foo foo.cc)
   target_link_libraries(foo ${Boost_LIBRARIES})
 endif()

Boost CMake
^^^^^^^^^^^

If Boost was built using the boost-cmake project it provides a package
configuration file for use with find_package's Config mode.  This
module looks for the package configuration file called
BoostConfig.cmake or boost-config.cmake and stores the result in cache
entry "Boost_DIR".  If found, the package configuration file is loaded
and this module returns with no further action.  See documentation of
the Boost CMake package configuration for details on what it provides.

Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.

FindBullet
----------

Try to find the Bullet physics engine



::

 This module defines the following variables

::

 BULLET_FOUND - Was bullet found
 BULLET_INCLUDE_DIRS - the Bullet include directories
 BULLET_LIBRARIES - Link to this, by default it includes
                    all bullet components (Dynamics,
                    Collision, LinearMath, & SoftBody)

::

 This module accepts the following variables

::

 BULLET_ROOT - Can be set to bullet install path or Windows build path

FindBZip2
---------

Try to find BZip2

Once done this will define

::

 BZIP2_FOUND - system has BZip2
 BZIP2_INCLUDE_DIR - the BZip2 include directory
 BZIP2_LIBRARIES - Link these to use BZip2
 BZIP2_NEED_PREFIX - this is set if the functions are prefixed with BZ2_
 BZIP2_VERSION_STRING - the version of BZip2 found (since CMake 2.8.8)

FindCABLE
---------

Find CABLE

This module finds if CABLE is installed and determines where the
include files and libraries are.  This code sets the following
variables:

::

 CABLE             the path to the cable executable
 CABLE_TCL_LIBRARY the path to the Tcl wrapper library
 CABLE_INCLUDE_DIR the path to the include directory

To build Tcl wrappers, you should add shared library and link it to
${CABLE_TCL_LIBRARY}.  You should also add ${CABLE_INCLUDE_DIR} as an
include directory.

FindCoin3D
----------

Find Coin3D (Open Inventor)

Coin3D is an implementation of the Open Inventor API.  It provides
data structures and algorithms for 3D visualization.

This module defines the following variables

::

 COIN3D_FOUND         - system has Coin3D - Open Inventor
 COIN3D_INCLUDE_DIRS  - where the Inventor include directory can be found
 COIN3D_LIBRARIES     - Link to this to use Coin3D

FindCUDA
--------

Tools for building CUDA C files: libraries and build dependencies.

This script locates the NVIDIA CUDA C tools.  It should work on linux,
windows, and mac and should be reasonably up to date with CUDA C
releases.

This script makes use of the standard find_package arguments of
<VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an
acceptable version of CUDA was found.

The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if
the prefix cannot be determined by the location of nvcc in the system
path and REQUIRED is specified to find_package().  To use a different
installed version of the toolkit set the environment variable
CUDA_BIN_PATH before running cmake (e.g.
CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default
/usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If
you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that
depend on the path will be relocated.

It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain
platforms, or to use a cuda runtime not installed in the default
location.  In newer versions of the toolkit the cuda library is
included with the graphics driver- be sure that the driver version
matches what is needed by the cuda runtime version.

The following variables affect the behavior of the macros in the
script (in alphebetical order).  Note that any of these flags can be
changed multiple times in the same directory before calling
CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,
CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::

 CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)
 -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.
    Note that making this different from the host code when generating object
    or C files from CUDA code just won't work, because size_t gets defined by
    nvcc in the generated source.  If you compile to PTX and then load the
    file yourself, you can mix bit sizes between device and host.

 CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)
 -- Set to ON if you want the custom build rule to be attached to the source
    file in Visual Studio.  Turn OFF if you add the same cuda file to multiple
    targets.

    This allows the user to build the target from the CUDA file; however, bad
    things can happen if the CUDA source file is added to multiple targets.
    When performing parallel builds it is possible for the custom build
    command to be run more than once and in parallel causing cryptic build
    errors.  VS runs the rules for every source file in the target, and a
    source can have only one rule no matter how many projects it is added to.
    When the rule is run from multiple targets race conditions can occur on
    the generated file.  Eventually everything will get built, but if the user
    is unaware of this behavior, there may be confusion.  It would be nice if
    this script could detect the reuse of source files across multiple targets
    and turn the option off for the user, but no good solution could be found.

 CUDA_BUILD_CUBIN (Default OFF)
 -- Set to ON to enable and extra compilation pass with the -cubin option in
    Device mode. The output is parsed and register, shared memory usage is
    printed during build.

 CUDA_BUILD_EMULATION (Default OFF for device mode)
 -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files
    when CUDA_BUILD_EMULATION is TRUE.

 CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)
 -- Set to the path you wish to have the generated files placed.  If it is
    blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.
    Intermediate files will always be placed in
    CMAKE_CURRENT_BINARY_DIR/CMakeFiles.

 CUDA_HOST_COMPILATION_CPP (Default ON)
 -- Set to OFF for C compilation of host code.

 CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)
 -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or
    --compiler-bindir is already present in the CUDA_NVCC_FLAGS or
    CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets
    $(VCInstallDir)/bin is a special value that expands out to the path when
    the command is run from within VS.

 CUDA_NVCC_FLAGS
 CUDA_NVCC_FLAGS_<CONFIG>
 -- Additional NVCC command line arguments.  NOTE: multiple arguments must be
    semi-colon delimited (e.g. --compiler-options;-Wall)

 CUDA_PROPAGATE_HOST_FLAGS (Default ON)
 -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration
    dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the
    host compiler through nvcc's -Xcompiler flag.  This helps make the
    generated host code match the rest of the system better.  Sometimes
    certain flags give nvcc problems, and this will help you turn the flag
    propagation off.  This does not affect the flags supplied directly to nvcc
    via CUDA_NVCC_FLAGS or through the OPTION flags specified through
    CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for
    shared library compilation are not affected by this flag.

 CUDA_SEPARABLE_COMPILATION (Default OFF)
 -- If set this will enable separable compilation for all CUDA runtime object
    files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY
    (e.g. calling CUDA_WRAP_SRCS directly),
    CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and
    CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.

 CUDA_SOURCE_PROPERTY_FORMAT
 -- If this source file property is set, it can override the format specified
    to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file
    is not a .cu file, setting this file will cause it to be treated as a .cu
    file. See documentation for set_source_files_properties on how to set
    this property.

 CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)
 -- When enabled the static version of the CUDA runtime library will be used
    in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support
    this option, then it will be silently disabled.

 CUDA_VERBOSE_BUILD (Default OFF)
 -- Set to ON to see all the commands used when building the CUDA file.  When
    using a Makefile generator the value defaults to VERBOSE (run make
    VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will
    always print the output.

The script creates the following macros (in alphebetical order)::

 CUDA_ADD_CUFFT_TO_TARGET( cuda_target )
 -- Adds the cufft library to the target (can be any target).  Handles whether
    you are in emulation mode or not.

 CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )
 -- Adds the cublas library to the target (can be any target).  Handles
    whether you are in emulation mode or not.

 CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...
                      [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )
 -- Creates an executable "cuda_target" which is made up of the files
    specified.  All of the non CUDA C files are compiled using the standard
    build rules specified by CMAKE and the cuda files are compiled to object
    files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is
    added automatically to include_directories().  Some standard CMake target
    calls can be used on the target after calling this macro
    (e.g. set_target_properties and target_link_libraries), but setting
    properties that adjust compilation flags will not affect code compiled by
    nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,
    CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.

 CUDA_ADD_LIBRARY( cuda_target file0 file1 ...
                   [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )
 -- Same as CUDA_ADD_EXECUTABLE except that a library is created.

 CUDA_BUILD_CLEAN_TARGET()
 -- Creates a convience target that deletes all the dependency files
    generated.  You should make clean after running this target to ensure the
    dependency files get regenerated.

 CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]
               [OPTIONS ...] )
 -- Returns a list of generated files from the input source files to be used
    with ADD_LIBRARY or ADD_EXECUTABLE.

 CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )
 -- Returns a list of PTX files generated from the input source files.

 CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )
 -- Returns a list of FATBIN files generated from the input source files.

 CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )
 -- Returns a list of CUBIN files generated from the input source files.

 CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var
                                                      cuda_target
                                                      object_files )
 -- Compute the name of the intermediate link file used for separable
    compilation.  This file name is typically passed into
    CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced
    based on cuda_target the list of objects files that need separable
    compilation as specified by object_files.  If the object_files list is
    empty, then output_file_var will be empty.  This function is called
    automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that
    this is a function and not a macro.

 CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )
 -- Sets the directories that should be passed to nvcc
    (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu
    files.



 CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target
                                          nvcc_flags object_files)

 -- Generates the link object required by separable compilation from the given
    object files.  This is called automatically for CUDA_ADD_EXECUTABLE and
    CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS
    directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the
    nvcc_flags passed in are the same as the flags passed in via the OPTIONS
    argument.  The only nvcc flag added automatically is the bitness flag as
    specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function
    instead of a macro.

 CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...
                  [STATIC | SHARED | MODULE] [OPTIONS ...] )
 -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,
    CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this
    function under the hood.

    Given the list of files (file0 file1 ... fileN) this macro generates
    custom commands that generate either PTX or linkable objects (use "PTX" or
    "OBJ" for the format argument to switch).  Files that don't end with .cu
    or have the HEADER_FILE_ONLY property are ignored.

    The arguments passed in after OPTIONS are extra command line options to
    give to nvcc.  You can also specify per configuration options by
    specifying the name of the configuration followed by the options.  General
    options must precede configuration specific options.  Not all
    configurations need to be specified, only the ones provided will be used.

       OPTIONS -DFLAG=2 "-DFLAG_OTHER=space in flag"
       DEBUG -g
       RELEASE --use_fast_math
       RELWITHDEBINFO --use_fast_math;-g
       MINSIZEREL --use_fast_math

    For certain configurations (namely VS generating object files with
    CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will
    be produced for the given cuda file.  This is because when you add the
    cuda file to Visual Studio it knows that this file produces an object file
    and will link in the resulting object file automatically.

    This script will also generate a separate cmake script that is used at
    build time to invoke nvcc.  This is for several reasons.

      1. nvcc can return negative numbers as return values which confuses
      Visual Studio into thinking that the command succeeded.  The script now
      checks the error codes and produces errors when there was a problem.

      2. nvcc has been known to not delete incomplete results when it
      encounters problems.  This confuses build systems into thinking the
      target was generated when in fact an unusable file exists.  The script
      now deletes the output files if there was an error.

      3. By putting all the options that affect the build into a file and then
      make the build rule dependent on the file, the output files will be
      regenerated when the options change.

    This script also looks at optional arguments STATIC, SHARED, or MODULE to
    determine when to target the object compilation for a shared library.
    BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in
    CUDA_ADD_LIBRARY.  On some systems special flags are added for building
    objects intended for shared libraries.  A preprocessor macro,
    <target_name>_EXPORTS is defined when a shared library compilation is
    detected.

    Flags passed into add_definitions with -D or /D are passed along to nvcc.

The script defines the following variables::

 CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.
 CUDA_VERSION_MINOR    -- The minor version.
 CUDA_VERSION
 CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR
 CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.

 CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).
 CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the
                          SDK.  This script will not directly support finding
                          specific libraries or headers, as that isn't
                          supported by NVIDIA.  If you want to change
                          libraries when the path changes see the
                          FindCUDA.cmake script for an example of how to clear
                          these variables.  There are also examples of how to
                          use the CUDA_SDK_ROOT_DIR to locate headers or
                          libraries, if you so choose (at your own risk).
 CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically
                          for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.
 CUDA_LIBRARIES        -- Cuda RT library.
 CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT
                          implementation (alternative to:
                          CUDA_ADD_CUFFT_TO_TARGET macro)
 CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS
                          implementation (alterative to:
                          CUDA_ADD_CUBLAS_TO_TARGET macro).
 CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.
                               Only available for CUDA version 5.5+
 CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.
                          Only available for CUDA version 4.0+.
 CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.
                          Only available for CUDA version 3.2+.
 CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.
                          Only available for CUDA version 7.0+.
 CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.
                          Only available for CUDA version 3.2+.
 CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.
                          Only available for CUDA version 4.0+.
 CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).
                          Only available for CUDA version 5.5+.
 CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).
                          Only available for CUDA version 5.5+.
 CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).
                          Only available for CUDA version 5.5+.
 CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.
                          Only available for CUDA version 3.2+.
                          Windows only.
 CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.
                          Only available for CUDA version 3.2+.
                          Windows only.

FindCups
--------

Try to find the Cups printing system

Once done this will define

::

 CUPS_FOUND - system has Cups
 CUPS_INCLUDE_DIR - the Cups include directory
 CUPS_LIBRARIES - Libraries needed to use Cups
 CUPS_VERSION_STRING - version of Cups found (since CMake 2.8.8)
 Set CUPS_REQUIRE_IPP_DELETE_ATTRIBUTE to TRUE if you need a version which
 features this function (i.e. at least 1.1.19)

FindCURL
--------

Find curl

Find the native CURL headers and libraries.

::

 CURL_INCLUDE_DIRS   - where to find curl/curl.h, etc.
 CURL_LIBRARIES      - List of libraries when using curl.
 CURL_FOUND          - True if curl found.
 CURL_VERSION_STRING - the version of curl found (since CMake 2.8.8)

FindCurses
----------

Find the curses or ncurses include file and library.

Result Variables
^^^^^^^^^^^^^^^^

This module defines the following variables:

``CURSES_FOUND``
  True if Curses is found.
``CURSES_INCLUDE_DIRS``
  The include directories needed to use Curses.
``CURSES_LIBRARIES``
  The libraries needed to use Curses.
``CURSES_HAVE_CURSES_H``
  True if curses.h is available.
``CURSES_HAVE_NCURSES_H``
  True if ncurses.h is available.
``CURSES_HAVE_NCURSES_NCURSES_H``
  True if ``ncurses/ncurses.h`` is available.
``CURSES_HAVE_NCURSES_CURSES_H``
  True if ``ncurses/curses.h`` is available.

Set ``CURSES_NEED_NCURSES`` to ``TRUE`` before the
``find_package(Curses)`` call if NCurses functionality is required.

Backward Compatibility
^^^^^^^^^^^^^^^^^^^^^^

The following variable are provided for backward compatibility:

``CURSES_INCLUDE_DIR``
  Path to Curses include.  Use ``CURSES_INCLUDE_DIRS`` instead.
``CURSES_LIBRARY``
  Path to Curses library.  Use ``CURSES_LIBRARIES`` instead.

FindCVS
-------



The module defines the following variables:

::

 CVS_EXECUTABLE - path to cvs command line client
 CVS_FOUND - true if the command line client was found

Example usage:

::

 find_package(CVS)
 if(CVS_FOUND)
   message("CVS found: ${CVS_EXECUTABLE}")
 endif()

FindCxxTest
-----------

Find CxxTest

Find the CxxTest suite and declare a helper macro for creating unit
tests and integrating them with CTest.  For more details on CxxTest
see http://cxxtest.tigris.org

INPUT Variables

::

 CXXTEST_USE_PYTHON [deprecated since 1.3]
     Only used in the case both Python & Perl
     are detected on the system to control
     which CxxTest code generator is used.
     Valid only for CxxTest version 3.

::

 NOTE: In older versions of this Find Module,
 this variable controlled if the Python test
 generator was used instead of the Perl one,
 regardless of which scripting language the
 user had installed.

::

 CXXTEST_TESTGEN_ARGS (since CMake 2.8.3)
     Specify a list of options to pass to the CxxTest code
     generator.  If not defined, --error-printer is
     passed.

OUTPUT Variables

::

 CXXTEST_FOUND
     True if the CxxTest framework was found
 CXXTEST_INCLUDE_DIRS
     Where to find the CxxTest include directory
 CXXTEST_PERL_TESTGEN_EXECUTABLE
     The perl-based test generator
 CXXTEST_PYTHON_TESTGEN_EXECUTABLE
     The python-based test generator
 CXXTEST_TESTGEN_EXECUTABLE (since CMake 2.8.3)
     The test generator that is actually used (chosen using user preferences
     and interpreters found in the system)
 CXXTEST_TESTGEN_INTERPRETER (since CMake 2.8.3)
     The full path to the Perl or Python executable on the system

MACROS for optional use by CMake users:

::

 CXXTEST_ADD_TEST(<test_name> <gen_source_file> <input_files_to_testgen...>)
    Creates a CxxTest runner and adds it to the CTest testing suite
    Parameters:
        test_name               The name of the test
        gen_source_file         The generated source filename to be
                                generated by CxxTest
        input_files_to_testgen  The list of header files containing the
                                CxxTest::TestSuite's to be included in
                                this runner

::

 #==============
 Example Usage:

::

 find_package(CxxTest)
 if(CXXTEST_FOUND)
     include_directories(${CXXTEST_INCLUDE_DIR})
     enable_testing()

::

     CXXTEST_ADD_TEST(unittest_foo foo_test.cc
                       ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)
     target_link_libraries(unittest_foo foo) # as needed
 endif()

::

 This will (if CxxTest is found):
 1. Invoke the testgen executable to autogenerate foo_test.cc in the
    binary tree from "foo_test.h" in the current source directory.
 2. Create an executable and test called unittest_foo.

::

 #=============
 Example foo_test.h:

::

 #include <cxxtest/TestSuite.h>

::

 class MyTestSuite : public CxxTest::TestSuite
 {
 public:
    void testAddition( void )
    {
       TS_ASSERT( 1 + 1 > 1 );
       TS_ASSERT_EQUALS( 1 + 1, 2 );
    }
 };

FindCygwin
----------

this module looks for Cygwin

FindDart
--------

Find DART

This module looks for the dart testing software and sets DART_ROOT to
point to where it found it.

FindDCMTK
---------

Find DCMTK libraries and applications

The module defines the following variables::

 DCMTK_INCLUDE_DIRS  - Directories to include to use DCMTK
 DCMTK_LIBRARIES     - Files to link against to use DCMTK
 DCMTK_FOUND         - If false, don't try to use DCMTK
 DCMTK_DIR           - (optional) Source directory for DCMTK

Compatibility
^^^^^^^^^^^^^

This module is able to find a version of DCMTK that does or does not export
a *DCMTKConfig.cmake* file. It applies a two step process:

* Step 1:  Attempt to find DCMTK version providing a *DCMTKConfig.cmake* file.
* Step 2:  If step 1 failed, rely on *FindDCMTK.cmake* to set `DCMTK_*` variables details below.


`Recent DCMTK
<http://git.dcmtk.org/web?p=dcmtk.git;a=commit;h=662ae187c493c6b9a73dd5e3875372cebd0c11fe>`_
provides a *DCMTKConfig.cmake* :manual:`package configuration file
<cmake-packages(7)>`. To exclusively use the package configuration file
(recommended when possible), pass the `NO_MODULE` option to
``find_package()``. For example, `find_package(DCMTK NO_MODULE)`.
This requires official DCMTK snapshot *3.6.1_20140617* or newer.


Until all clients update to the more recent DCMTK, build systems will need
to support different versions of DCMTK.

On any given system, the following combinations of DCMTK versions could be
considered:

+--------+---------------------+-----------------------+-------------------+
|        |   SYSTEM DCMTK      |      LOCAL DCMTK      |     Supported ?   |
+--------+---------------------+-----------------------+-------------------+
| Case A |   NA                |      [ ] DCMTKConfig  |         YES       |
+--------+---------------------+-----------------------+-------------------+
| Case B |   NA                |      [X] DCMTKConfig  |         YES       |
+--------+---------------------+-----------------------+-------------------+
| Case C |   [ ] DCMTKConfig   |      NA               |         YES       |
+--------+---------------------+-----------------------+-------------------+
| Case D |   [X] DCMTKConfig   |      NA               |         YES       |
+--------+---------------------+-----------------------+-------------------+
| Case E |   [ ] DCMTKConfig   |      [ ] DCMTKConfig  |         YES (*)   |
+--------+---------------------+-----------------------+-------------------+
| Case F |   [X] DCMTKConfig   |      [ ] DCMTKConfig  |         NO        |
+--------+---------------------+-----------------------+-------------------+
| Case G |   [ ] DCMTKConfig   |      [X] DCMTKConfig  |         YES       |
+--------+---------------------+-----------------------+-------------------+
| Case H |   [X] DCMTKConfig   |      [X] DCMTKConfig  |         YES       |
+--------+---------------------+-----------------------+-------------------+

 (*) See Troubleshooting section.

Legend:

  NA ...............: Means that no System or Local DCMTK is available

  [ ] DCMTKConfig ..: Means that the version of DCMTK does NOT export a DCMTKConfig.cmake file.

  [X] DCMTKConfig ..: Means that the version of DCMTK exports a DCMTKConfig.cmake file.


Troubleshooting
^^^^^^^^^^^^^^^

What to do if my project finds a different version of DCMTK?

Remove DCMTK entry from the CMake cache per ``find_package()``
documentation.

FindDevIL
---------



This module locates the developer's image library.
http://openil.sourceforge.net/

This module sets:

::

 IL_LIBRARIES -   the name of the IL library. These include the full path to
                  the core DevIL library. This one has to be linked into the
                  application.
 ILU_LIBRARIES -  the name of the ILU library. Again, the full path. This
                  library is for filters and effects, not actual loading. It
                  doesn't have to be linked if the functionality it provides
                  is not used.
 ILUT_LIBRARIES - the name of the ILUT library. Full path. This part of the
                  library interfaces with OpenGL. It is not strictly needed
                  in applications.
 IL_INCLUDE_DIR - where to find the il.h, ilu.h and ilut.h files.
 IL_FOUND -       this is set to TRUE if all the above variables were set.
                  This will be set to false if ILU or ILUT are not found,
                  even if they are not needed. In most systems, if one
                  library is found all the others are as well. That's the
                  way the DevIL developers release it.

FindDoxygen
-----------

This module looks for Doxygen and the path to Graphviz's dot

Doxygen is a documentation generation tool.  Please see
http://www.doxygen.org

This module accepts the following optional variables:

::

 DOXYGEN_SKIP_DOT       = If true this module will skip trying to find Dot
                          (an optional component often used by Doxygen)

This modules defines the following variables:

::

 DOXYGEN_EXECUTABLE     = The path to the doxygen command.
 DOXYGEN_FOUND          = Was Doxygen found or not?
 DOXYGEN_VERSION        = The version reported by doxygen --version

::

 DOXYGEN_DOT_EXECUTABLE = The path to the dot program used by doxygen.
 DOXYGEN_DOT_FOUND      = Was Dot found or not?

For compatibility with older versions of CMake, the now-deprecated
variable ``DOXYGEN_DOT_PATH`` is set to the path to the directory
containing ``dot`` as reported in ``DOXYGEN_DOT_EXECUTABLE``.
The path may have forward slashes even on Windows and is not
suitable for direct substitution into a ``Doxyfile.in`` template.
If you need this value, use ``get_filename_component()``
to compute it from ``DOXYGEN_DOT_EXECUTABLE`` directly, and
perhaps the ``file(TO_NATIVE_PATH)`` command to prepare
the path for a Doxygen configuration file.

FindEXPAT
---------

Find expat

Find the native EXPAT headers and libraries.

::

 EXPAT_INCLUDE_DIRS - where to find expat.h, etc.
 EXPAT_LIBRARIES    - List of libraries when using expat.
 EXPAT_FOUND        - True if expat found.

FindFLEX
--------

Find flex executable and provides a macro to generate custom build rules



The module defines the following variables:

::

 FLEX_FOUND - true is flex executable is found
 FLEX_EXECUTABLE - the path to the flex executable
 FLEX_VERSION - the version of flex
 FLEX_LIBRARIES - The flex libraries
 FLEX_INCLUDE_DIRS - The path to the flex headers

The minimum required version of flex can be specified using the
standard syntax, e.g.  find_package(FLEX 2.5.13)



If flex is found on the system, the module provides the macro:

::

 FLEX_TARGET(Name FlexInput FlexOutput
             [COMPILE_FLAGS <string>]
             [DEFINES_FILE <string>]
             )

which creates a custom command to generate the <FlexOutput> file from
the <FlexInput> file.  If COMPILE_FLAGS option is specified, the next
parameter is added to the flex command line. If flex is configured to
output a header file, the DEFINES_FILE option may be used to specify its
name. Name is an alias used to get details of this custom command.
Indeed the macro defines the following variables:

::

 FLEX_${Name}_DEFINED - true is the macro ran successfully
 FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an
 alias for FlexOutput
 FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}
 FLEX_${Name}_OUTPUT_HEADER - the header flex output, if any.

Flex scanners oftenly use tokens defined by Bison: the code generated
by Flex depends of the header generated by Bison.  This module also
defines a macro:

::

 ADD_FLEX_BISON_DEPENDENCY(FlexTarget BisonTarget)

which adds the required dependency between a scanner and a parser
where <FlexTarget> and <BisonTarget> are the first parameters of
respectively FLEX_TARGET and BISON_TARGET macros.

::

 ====================================================================
 Example:

::

 find_package(BISON)
 find_package(FLEX)

::

 BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
 FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)
 ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)

::

  include_directories(${CMAKE_CURRENT_BINARY_DIR})
  add_executable(Foo
     Foo.cc
     ${BISON_MyParser_OUTPUTS}
     ${FLEX_MyScanner_OUTPUTS}
  )
 ====================================================================

FindFLTK2
---------

Find the native FLTK2 includes and library

The following settings are defined

::

 FLTK2_FLUID_EXECUTABLE, where to find the Fluid tool
 FLTK2_WRAP_UI, This enables the FLTK2_WRAP_UI command
 FLTK2_INCLUDE_DIR, where to find include files
 FLTK2_LIBRARIES, list of fltk2 libraries
 FLTK2_FOUND, Don't use FLTK2 if false.

The following settings should not be used in general.

::

 FLTK2_BASE_LIBRARY   = the full path to fltk2.lib
 FLTK2_GL_LIBRARY     = the full path to fltk2_gl.lib
 FLTK2_IMAGES_LIBRARY = the full path to fltk2_images.lib

FindFLTK
--------

Find the native FLTK includes and library



By default FindFLTK.cmake will search for all of the FLTK components
and add them to the FLTK_LIBRARIES variable.

::

 You can limit the components which get placed in FLTK_LIBRARIES by
 defining one or more of the following three options:

::

 FLTK_SKIP_OPENGL, set to true to disable searching for opengl and
                   the FLTK GL library
 FLTK_SKIP_FORMS, set to true to disable searching for fltk_forms
 FLTK_SKIP_IMAGES, set to true to disable searching for fltk_images

::

 FLTK_SKIP_FLUID, set to true if the fluid binary need not be present
                  at build time

The following variables will be defined:

::

 FLTK_FOUND, True if all components not skipped were found
 FLTK_INCLUDE_DIR, where to find include files
 FLTK_LIBRARIES, list of fltk libraries you should link against
 FLTK_FLUID_EXECUTABLE, where to find the Fluid tool
 FLTK_WRAP_UI, This enables the FLTK_WRAP_UI command

The following cache variables are assigned but should not be used.
See the FLTK_LIBRARIES variable instead.

::

 FLTK_BASE_LIBRARY   = the full path to fltk.lib
 FLTK_GL_LIBRARY     = the full path to fltk_gl.lib
 FLTK_FORMS_LIBRARY  = the full path to fltk_forms.lib
 FLTK_IMAGES_LIBRARY = the full path to fltk_images.lib

FindFreetype
------------

Locate FreeType library

This module defines

::

 FREETYPE_LIBRARIES, the library to link against
 FREETYPE_FOUND, if false, do not try to link to FREETYPE
 FREETYPE_INCLUDE_DIRS, where to find headers.
 FREETYPE_VERSION_STRING, the version of freetype found (since CMake 2.8.8)
 This is the concatenation of the paths:
 FREETYPE_INCLUDE_DIR_ft2build
 FREETYPE_INCLUDE_DIR_freetype2

$FREETYPE_DIR is an environment variable that would correspond to the
./configure --prefix=$FREETYPE_DIR used in building FREETYPE.

FindGCCXML
----------

Find the GCC-XML front-end executable.



This module will define the following variables:

::

 GCCXML - the GCC-XML front-end executable.

FindGDAL
--------



Locate gdal

This module accepts the following environment variables:

::

 GDAL_DIR or GDAL_ROOT - Specify the location of GDAL

This module defines the following CMake variables:

::

 GDAL_FOUND - True if libgdal is found
 GDAL_LIBRARY - A variable pointing to the GDAL library
 GDAL_INCLUDE_DIR - Where to find the headers

FindGettext
-----------

Find GNU gettext tools

This module looks for the GNU gettext tools.  This module defines the
following values:

::

 GETTEXT_MSGMERGE_EXECUTABLE: the full path to the msgmerge tool.
 GETTEXT_MSGFMT_EXECUTABLE: the full path to the msgfmt tool.
 GETTEXT_FOUND: True if gettext has been found.
 GETTEXT_VERSION_STRING: the version of gettext found (since CMake 2.8.8)

Additionally it provides the following macros:

GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ...  fileN )

::

 This will create a target "translations" which will convert the
 given input po files into the binary output mo file. If the
 ALL option is used, the translations will also be created when
 building the default target.

GETTEXT_PROCESS_POT_FILE( <potfile> [ALL] [INSTALL_DESTINATION <destdir>]
LANGUAGES <lang1> <lang2> ...  )

::

 Process the given pot file to mo files.
 If INSTALL_DESTINATION is given then automatically install rules will
 be created, the language subdirectory will be taken into account
 (by default use share/locale/).
 If ALL is specified, the pot file is processed when building the all traget.
 It creates a custom target "potfile".

GETTEXT_PROCESS_PO_FILES( <lang> [ALL] [INSTALL_DESTINATION <dir>]
PO_FILES <po1> <po2> ...  )

::

 Process the given po files to mo files for the given language.
 If INSTALL_DESTINATION is given then automatically install rules will
 be created, the language subdirectory will be taken into account
 (by default use share/locale/).
 If ALL is specified, the po files are processed when building the all traget.
 It creates a custom target "pofiles".

.. note::
  If you wish to use the Gettext library (libintl), use ``FindIntl``.

FindGIF
-------



This module searches giflib and defines GIF_LIBRARIES - libraries to
link to in order to use GIF GIF_FOUND, if false, do not try to link
GIF_INCLUDE_DIR, where to find the headers GIF_VERSION, reports either
version 4 or 3 (for everything before version 4)

The minimum required version of giflib can be specified using the
standard syntax, e.g.  find_package(GIF 4)

$GIF_DIR is an environment variable that would correspond to the
./configure --prefix=$GIF_DIR

FindGit
-------

The module defines the following variables:

``GIT_EXECUTABLE``
  Path to Git command-line client.
``Git_FOUND``, ``GIT_FOUND``
  True if the Git command-line client was found.
``GIT_VERSION_STRING``
  The version of Git found.

Example usage:

 find_package(Git)
 if(Git_FOUND)
   message("Git found: ${GIT_EXECUTABLE}")
 endif()

FindGLEW
--------

Find the OpenGL Extension Wrangler Library (GLEW)

IMPORTED Targets
^^^^^^^^^^^^^^^^

This module defines the ``IMPORTED`` target ``GLEW::GLEW``,
if GLEW has been found.

Result Variables
^^^^^^^^^^^^^^^^

This module defines the following variables:

::

 GLEW_INCLUDE_DIRS - include directories for GLEW
 GLEW_LIBRARIES - libraries to link against GLEW
 GLEW_FOUND - true if GLEW has been found and can be used

FindGLUT
--------

try to find glut library and include files.

IMPORTED Targets
^^^^^^^^^^^^^^^^

This module defines the ``IMPORTED`` targets:

``GLUT::GLUT``
 Defined if the system has GLUT.

Result Variables
^^^^^^^^^^^^^^^^

This module sets the following variables:

::

 GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.
 GLUT_LIBRARIES, the libraries to link against
 GLUT_FOUND, If false, do not try to use GLUT.

Also defined, but not for general use are:

::

 GLUT_glut_LIBRARY = the full path to the glut library.
 GLUT_Xmu_LIBRARY  = the full path to the Xmu library.
 GLUT_Xi_LIBRARY   = the full path to the Xi Library.

FindGnuplot
-----------

this module looks for gnuplot



Once done this will define

::

 GNUPLOT_FOUND - system has Gnuplot
 GNUPLOT_EXECUTABLE - the Gnuplot executable
 GNUPLOT_VERSION_STRING - the version of Gnuplot found (since CMake 2.8.8)

GNUPLOT_VERSION_STRING will not work for old versions like 3.7.1.

FindGnuTLS
----------

Try to find the GNU Transport Layer Security library (gnutls)



Once done this will define

::

 GNUTLS_FOUND - System has gnutls
 GNUTLS_INCLUDE_DIR - The gnutls include directory
 GNUTLS_LIBRARIES - The libraries needed to use gnutls
 GNUTLS_DEFINITIONS - Compiler switches required for using gnutls

FindGSL
--------

Find the native GSL includes and libraries.

The GNU Scientific Library (GSL) is a numerical library for C and C++
programmers. It is free software under the GNU General Public
License.

Imported Targets
^^^^^^^^^^^^^^^^

If GSL is found, this module defines the following ``IMPORTED``
targets::

 GSL::gsl      - The main GSL library.
 GSL::gslcblas - The CBLAS support library used by GSL.

Result Variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project::

 GSL_FOUND          - True if GSL found on the local system
 GSL_INCLUDE_DIRS   - Location of GSL header files.
 GSL_LIBRARIES      - The GSL libraries.
 GSL_VERSION        - The version of the discovered GSL install.

Hints
^^^^^

Set ``GSL_ROOT_DIR`` to a directory that contains a GSL installation.

This script expects to find libraries at ``$GSL_ROOT_DIR/lib`` and the GSL
headers at ``$GSL_ROOT_DIR/include/gsl``.  The library directory may
optionally provide Release and Debug folders.  For Unix-like systems, this
script will use ``$GSL_ROOT_DIR/bin/gsl-config`` (if found) to aid in the
discovery GSL.

Cache Variables
^^^^^^^^^^^^^^^

This module may set the following variables depending on platform and type
of GSL installation discovered.  These variables may optionally be set to
help this module find the correct files::

 GSL_CBLAS_LIBRARY       - Location of the GSL CBLAS library.
 GSL_CBLAS_LIBRARY_DEBUG - Location of the debug GSL CBLAS library (if any).
 GSL_CONFIG_EXECUTABLE   - Location of the ``gsl-config`` script (if any).
 GSL_LIBRARY             - Location of the GSL library.
 GSL_LIBRARY_DEBUG       - Location of the debug GSL library (if any).

FindGTest
---------

Locate the Google C++ Testing Framework.

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` targets:

``GTest::GTest``
  The Google Test ``gtest`` library, if found; adds Thread::Thread
  automatically
``GTest::Main``
  The Google Test ``gtest_main`` library, if found


Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``GTEST_FOUND``
  Found the Google Testing framework
``GTEST_INCLUDE_DIRS``
  the directory containing the Google Test headers

The library variables below are set as normal variables.  These
contain debug/optimized keywords when a debugging library is found.

``GTEST_LIBRARIES``
  The Google Test ``gtest`` library; note it also requires linking
  with an appropriate thread library
``GTEST_MAIN_LIBRARIES``
  The Google Test ``gtest_main`` library
``GTEST_BOTH_LIBRARIES``
  Both ``gtest`` and ``gtest_main``

Cache variables
^^^^^^^^^^^^^^^

The following cache variables may also be set:

``GTEST_ROOT``
  The root directory of the Google Test installation (may also be
  set as an environment variable)
``GTEST_MSVC_SEARCH``
  If compiling with MSVC, this variable can be set to ``MD`` or
  ``MT`` (the default) to enable searching a GTest build tree


Example usage
^^^^^^^^^^^^^

::

 enable_testing()
 find_package(GTest REQUIRED)

 add_executable(foo foo.cc)
 target_link_libraries(foo GTest::GTest GTest::Main)

 add_test(AllTestsInFoo foo)

Deeper integration with CTest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you would like each Google test to show up in CTest as a test you
may use the following macro::

 GTEST_ADD_TESTS(executable extra_args files...)

``executable``
  the path to the test executable
``extra_args``
  a list of extra arguments to be passed to executable enclosed in
  quotes (or ``""`` for none)
``files...``
  a list of source files to search for tests and test fixtures.  Or
  ``AUTO`` to find them from executable target

However, note that this macro will slow down your tests by running
an executable for each test and test fixture.

Example usage::

 set(FooTestArgs --foo 1 --bar 2)
 add_executable(FooTest FooUnitTest.cc)
 GTEST_ADD_TESTS(FooTest "${FooTestArgs}" AUTO)

FindGTK2
--------

FindGTK2.cmake

This module can find the GTK2 widget libraries and several of its
other optional components like gtkmm, glade, and glademm.

NOTE: If you intend to use version checking, CMake 2.6.2 or later is

::

 required.

Specify one or more of the following components as you call this find
module.  See example below.

::

 gtk
 gtkmm
 glade
 glademm

The following variables will be defined for your use

::

 GTK2_FOUND - Were all of your specified components found?
 GTK2_INCLUDE_DIRS - All include directories
 GTK2_LIBRARIES - All libraries
 GTK2_TARGETS - All imported targets
 GTK2_DEFINITIONS - Additional compiler flags

::

 GTK2_VERSION - The version of GTK2 found (x.y.z)
 GTK2_MAJOR_VERSION - The major version of GTK2
 GTK2_MINOR_VERSION - The minor version of GTK2
 GTK2_PATCH_VERSION - The patch version of GTK2

Optional variables you can define prior to calling this module:

::

 GTK2_DEBUG - Enables verbose debugging of the module
 GTK2_ADDITIONAL_SUFFIXES - Allows defining additional directories to
                            search for include files

================= Example Usage:

::

 Call find_package() once, here are some examples to pick from:

::

 Require GTK 2.6 or later
     find_package(GTK2 2.6 REQUIRED gtk)

::

 Require GTK 2.10 or later and Glade
     find_package(GTK2 2.10 REQUIRED gtk glade)

::

 Search for GTK/GTKMM 2.8 or later
     find_package(GTK2 2.8 COMPONENTS gtk gtkmm)

::

 if(GTK2_FOUND)
    include_directories(${GTK2_INCLUDE_DIRS})
    add_executable(mygui mygui.cc)
    target_link_libraries(mygui ${GTK2_LIBRARIES})
 endif()

FindGTK
-------

try to find GTK (and glib) and GTKGLArea

::

 GTK_INCLUDE_DIR   - Directories to include to use GTK
 GTK_LIBRARIES     - Files to link against to use GTK
 GTK_FOUND         - GTK was found
 GTK_GL_FOUND      - GTK's GL features were found

FindHDF5
--------

Find HDF5, a library for reading and writing self describing array data.



This module invokes the HDF5 wrapper compiler that should be installed
alongside HDF5.  Depending upon the HDF5 Configuration, the wrapper
compiler is called either h5cc or h5pcc.  If this succeeds, the module
will then call the compiler with the -show argument to see what flags
are used when compiling an HDF5 client application.

The module will optionally accept the COMPONENTS argument.  If no
COMPONENTS are specified, then the find module will default to finding
only the HDF5 C library.  If one or more COMPONENTS are specified, the
module will attempt to find the language bindings for the specified
components.  The only valid components are C, CXX, Fortran, HL, and
Fortran_HL.  If the COMPONENTS argument is not given, the module will
attempt to find only the C bindings.

On UNIX systems, this module will read the variable
HDF5_USE_STATIC_LIBRARIES to determine whether or not to prefer a
static link to a dynamic link for HDF5 and all of it's dependencies.
To use this feature, make sure that the HDF5_USE_STATIC_LIBRARIES
variable is set before the call to find_package.

To provide the module with a hint about where to find your HDF5
installation, you can set the environment variable HDF5_ROOT.  The
Find module will then look in this path when searching for HDF5
executables, paths, and libraries.

Both the serial and parallel HDF5 wrappers are considered and the first
directory to contain either one will be used.  In the event that both appear
in the same directory the serial version is preferentially selected. This
behavior can be reversed by setting the variable HDF5_PREFER_PARALLEL to
true.

In addition to finding the includes and libraries required to compile
an HDF5 client application, this module also makes an effort to find
tools that come with the HDF5 distribution that may be useful for
regression testing.

This module will define the following variables:

::

 HDF5_FOUND - true if HDF5 was found on the system
 HDF5_VERSION - HDF5 version in format Major.Minor.Release
 HDF5_INCLUDE_DIRS - Location of the hdf5 includes
 HDF5_INCLUDE_DIR - Location of the hdf5 includes (deprecated)
 HDF5_DEFINITIONS - Required compiler definitions for HDF5
 HDF5_LIBRARIES - Required libraries for all requested bindings
 HDF5_HL_LIBRARIES - Required libraries for the HDF5 high level API for all
                     bindings, if the HL component is enabled

Available components are: C CXX Fortran and HL.  For each enabled language
binding, a corresponding HDF5_${LANG}_LIBRARIES variable will be defined.
If the HL component is enabled, then an HDF5_${LANG}_HL_LIBRARIES will
also be defined.  With all components enabled, the following variables will be defined:

::

 HDF5_C_LIBRARIES - Required libraries for the HDF5 C bindings
 HDF5_CXX_LIBRARIES - Required libraries for the HDF5 C++ bindings
 HDF5_Fortran_LIBRARIES - Required libraries for the HDF5 Fortran bindings
 HDF5_C_HL_LIBRARIES - Required libraries for the high level C bindings
 HDF5_CXX_HL_LIBRARIES - Required libraries for the high level C++ bindings
 HDF5_Fortran_HL_LIBRARIES - Required libraries for the high level Fortran
                             bindings.

 HDF5_IS_PARALLEL - Whether or not HDF5 was found with parallel IO support
 HDF5_C_COMPILER_EXECUTABLE - the path to the HDF5 C wrapper compiler
 HDF5_CXX_COMPILER_EXECUTABLE - the path to the HDF5 C++ wrapper compiler
 HDF5_Fortran_COMPILER_EXECUTABLE - the path to the HDF5 Fortran wrapper compiler
 HDF5_C_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C compiler
                                             which is also the HDF5 wrapper
 HDF5_CXX_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C++
                                               compiler which is also
                                               the HDF5 wrapper
 HDF5_Fortran_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary
                                                   Fortran compiler which
                                                   is also the HDF5 wrapper
 HDF5_DIFF_EXECUTABLE - the path to the HDF5 dataset comparison tool

The following variable can be set to guide the search for HDF5 libraries and includes:

HDF5_ROOT

FindHg
------

Extract information from a mercurial working copy.

The module defines the following variables:

::

 HG_EXECUTABLE - path to mercurial command line client (hg)
 HG_FOUND - true if the command line client was found
 HG_VERSION_STRING - the version of mercurial found

If the command line client executable is found the following macro is defined:

::

 HG_WC_INFO(<dir> <var-prefix>)

Hg_WC_INFO extracts information of a mercurial working copy
at a given location.  This macro defines the following variables:

::

 <var-prefix>_WC_CHANGESET - current changeset
 <var-prefix>_WC_REVISION - current revision

Example usage:

::

 find_package(Hg)
 if(HG_FOUND)
   message("hg found: ${HG_EXECUTABLE}")
   HG_WC_INFO(${PROJECT_SOURCE_DIR} Project)
   message("Current revision is ${Project_WC_REVISION}")
   message("Current changeset is ${Project_WC_CHANGESET}")
 endif()

FindHSPELL
----------

Try to find Hspell

Once done this will define

::

 HSPELL_FOUND - system has Hspell
 HSPELL_INCLUDE_DIR - the Hspell include directory
 HSPELL_LIBRARIES - The libraries needed to use Hspell
 HSPELL_DEFINITIONS - Compiler switches required for using Hspell

::

 HSPELL_VERSION_STRING - The version of Hspell found (x.y)
 HSPELL_MAJOR_VERSION  - the major version of Hspell
 HSPELL_MINOR_VERSION  - The minor version of Hspell

FindHTMLHelp
------------

This module looks for Microsoft HTML Help Compiler

It defines:

::

 HTML_HELP_COMPILER     : full path to the Compiler (hhc.exe)
 HTML_HELP_INCLUDE_PATH : include path to the API (htmlhelp.h)
 HTML_HELP_LIBRARY      : full path to the library (htmlhelp.lib)

FindIce
-------

Find the ZeroC Internet Communication Engine (ICE) programs,
libraries and datafiles.

This module supports multiple components.
Components can include any of: ``Freeze``, ``Glacier2``, ``Ice``,
``IceBox``, ``IceDB``, ``IceGrid``, ``IcePatch``, ``IceSSL``,
``IceStorm``, ``IceUtil``, ``IceXML``, or ``Slice``.

This module reports information about the Ice installation in
several variables.  General variables::

 Ice_VERSION - Ice release version
 Ice_FOUND - true if the main programs and libraries were found
 Ice_LIBRARIES - component libraries to be linked
 Ice_INCLUDE_DIRS - the directories containing the Ice headers
 Ice_SLICE_DIRS - the directories containing the Ice slice interface
                  definitions

Imported targets::

 Ice::<C>

Where ``<C>`` is the name of an Ice component, for example
``Ice::Glacier2``.

Ice slice programs are reported in::

 Ice_SLICE2CPP_EXECUTABLE - path to slice2cpp executable
 Ice_SLICE2CS_EXECUTABLE - path to slice2cs executable
 Ice_SLICE2FREEZEJ_EXECUTABLE - path to slice2freezej executable
 Ice_SLICE2FREEZE_EXECUTABLE - path to slice2freeze executable
 Ice_SLICE2HTML_EXECUTABLE - path to slice2html executable
 Ice_SLICE2JAVA_EXECUTABLE - path to slice2java executable
 Ice_SLICE2JS_EXECUTABLE - path to slice2js executable
 Ice_SLICE2PHP_EXECUTABLE - path to slice2php executable
 Ice_SLICE2PY_EXECUTABLE - path to slice2py executable
 Ice_SLICE2RB_EXECUTABLE - path to slice2rb executable

Ice programs are reported in::

 Ice_GLACIER2ROUTER_EXECUTABLE - path to glacier2router executable
 Ice_ICEBOX_EXECUTABLE - path to icebox executable
 Ice_ICEBOXADMIN_EXECUTABLE - path to iceboxadmin executable
 Ice_ICEBOXD_EXECUTABLE - path to iceboxd executable
 Ice_ICEBOXNET_EXECUTABLE - path to iceboxnet executable
 Ice_ICEGRIDADMIN_EXECUTABLE - path to icegridadmin executable
 Ice_ICEGRIDNODE_EXECUTABLE - path to icegridnode executable
 Ice_ICEGRIDNODED_EXECUTABLE - path to icegridnoded executable
 Ice_ICEGRIDREGISTRY_EXECUTABLE - path to icegridregistry executable
 Ice_ICEGRIDREGISTRYD_EXECUTABLE - path to icegridregistryd executable
 Ice_ICEPATCH2CALC_EXECUTABLE - path to icepatch2calc executable
 Ice_ICEPATCH2CLIENT_EXECUTABLE - path to icepatch2client executable
 Ice_ICEPATCH2SERVER_EXECUTABLE - path to icepatch2server executable
 Ice_ICESERVICEINSTALL_EXECUTABLE - path to iceserviceinstall executable
 Ice_ICESTORMADMIN_EXECUTABLE - path to icestormadmin executable
 Ice_ICESTORMMIGRATE_EXECUTABLE - path to icestormmigrate executable

Ice db programs (Windows only; standard system versions on all other
platforms) are reported in::

 Ice_DB_ARCHIVE_EXECUTABLE - path to db_archive executable
 Ice_DB_CHECKPOINT_EXECUTABLE - path to db_checkpoint executable
 Ice_DB_DEADLOCK_EXECUTABLE - path to db_deadlock executable
 Ice_DB_DUMP_EXECUTABLE - path to db_dump executable
 Ice_DB_HOTBACKUP_EXECUTABLE - path to db_hotbackup executable
 Ice_DB_LOAD_EXECUTABLE - path to db_load executable
 Ice_DB_LOG_VERIFY_EXECUTABLE - path to db_log_verify executable
 Ice_DB_PRINTLOG_EXECUTABLE - path to db_printlog executable
 Ice_DB_RECOVER_EXECUTABLE - path to db_recover executable
 Ice_DB_STAT_EXECUTABLE - path to db_stat executable
 Ice_DB_TUNER_EXECUTABLE - path to db_tuner executable
 Ice_DB_UPGRADE_EXECUTABLE - path to db_upgrade executable
 Ice_DB_VERIFY_EXECUTABLE - path to db_verify executable
 Ice_DUMPDB_EXECUTABLE - path to dumpdb executable
 Ice_TRANSFORMDB_EXECUTABLE - path to transformdb executable

Ice component libraries are reported in::

 Ice_<C>_FOUND - ON if component was found
 Ice_<C>_LIBRARIES - libraries for component

Note that ``<C>`` is the uppercased name of the component.

This module reads hints about search results from::

 Ice_HOME - the root of the Ice installation

The environment variable ``ICE_HOME`` may also be used; the
Ice_HOME variable takes precedence.

The following cache variables may also be set::

 Ice_<P>_EXECUTABLE - the path to executable <P>
 Ice_INCLUDE_DIR - the directory containing the Ice headers
 Ice_SLICE_DIR - the directory containing the Ice slice interface
                 definitions
 Ice_<C>_LIBRARY - the library for component <C>

.. note::

  In most cases none of the above variables will require setting,
  unless multiple Ice versions are available and a specific version
  is required.  On Windows, the most recent version of Ice will be
  found through the registry.  On Unix, the programs, headers and
  libraries will usually be in standard locations, but Ice_SLICE_DIRS
  might not be automatically detected (commonly known locations are
  searched).  All the other variables are defaulted using Ice_HOME,
  if set.  It's possible to set Ice_HOME and selectively specify
  alternative locations for the other components; this might be
  required for e.g. newer versions of Visual Studio if the
  heuristics are not sufficient to identify the correct programs and
  libraries for the specific Visual Studio version.

Other variables one may set to control this module are::

 Ice_DEBUG - Set to ON to enable debug output from FindIce.

FindIcotool
-----------

Find icotool

This module looks for icotool.  This module defines the following
values:

::

 ICOTOOL_EXECUTABLE: the full path to the icotool tool.
 ICOTOOL_FOUND: True if icotool has been found.
 ICOTOOL_VERSION_STRING: the version of icotool found.

FindImageMagick
---------------

Find the ImageMagick binary suite.

This module will search for a set of ImageMagick tools specified as
components in the FIND_PACKAGE call.  Typical components include, but
are not limited to (future versions of ImageMagick might have
additional components not listed here):

::

 animate
 compare
 composite
 conjure
 convert
 display
 identify
 import
 mogrify
 montage
 stream

If no component is specified in the FIND_PACKAGE call, then it only
searches for the ImageMagick executable directory.  This code defines
the following variables:

::

 ImageMagick_FOUND                  - TRUE if all components are found.
 ImageMagick_EXECUTABLE_DIR         - Full path to executables directory.
 ImageMagick_<component>_FOUND      - TRUE if <component> is found.
 ImageMagick_<component>_EXECUTABLE - Full path to <component> executable.
 ImageMagick_VERSION_STRING         - the version of ImageMagick found
                                      (since CMake 2.8.8)

ImageMagick_VERSION_STRING will not work for old versions like 5.2.3.

There are also components for the following ImageMagick APIs:

::

 Magick++
 MagickWand
 MagickCore

For these components the following variables are set:

::

 ImageMagick_FOUND                    - TRUE if all components are found.
 ImageMagick_INCLUDE_DIRS             - Full paths to all include dirs.
 ImageMagick_LIBRARIES                - Full paths to all libraries.
 ImageMagick_<component>_FOUND        - TRUE if <component> is found.
 ImageMagick_<component>_INCLUDE_DIRS - Full path to <component> include dirs.
 ImageMagick_<component>_LIBRARIES    - Full path to <component> libraries.

Example Usages:

::

 find_package(ImageMagick)
 find_package(ImageMagick COMPONENTS convert)
 find_package(ImageMagick COMPONENTS convert mogrify display)
 find_package(ImageMagick COMPONENTS Magick++)
 find_package(ImageMagick COMPONENTS Magick++ convert)

Note that the standard FIND_PACKAGE features are supported (i.e.,
QUIET, REQUIRED, etc.).

FindIntl
--------

Find the Gettext libintl headers and libraries.

This module reports information about the Gettext libintl
installation in several variables.  General variables::

 Intl_FOUND - true if the libintl headers and libraries were found
 Intl_INCLUDE_DIRS - the directory containing the libintl headers
 Intl_LIBRARIES - libintl libraries to be linked

The following cache variables may also be set::

 Intl_INCLUDE_DIR - the directory containing the libintl headers
 Intl_LIBRARY - the libintl library (if any)

.. note::
  On some platforms, such as Linux with GNU libc, the gettext
  functions are present in the C standard library and libintl
  is not required.  ``Intl_LIBRARIES`` will be empty in this
  case.

.. note::
  If you wish to use the Gettext tools (``msgmerge``,
  ``msgfmt``, etc.), use ``FindGettext``.

FindITK
-------

This module no longer exists.

This module existed in versions of CMake prior to 3.1, but became
only a thin wrapper around ``find_package(ITK NO_MODULE)`` to
provide compatibility for projects using long-outdated conventions.
Now ``find_package(ITK)`` will search for ``ITKConfig.cmake``
directly.

FindJasper
----------

Try to find the Jasper JPEG2000 library

Once done this will define

::

 JASPER_FOUND - system has Jasper
 JASPER_INCLUDE_DIR - the Jasper include directory
 JASPER_LIBRARIES - the libraries needed to use Jasper
 JASPER_VERSION_STRING - the version of Jasper found (since CMake 2.8.8)

FindJava
--------

Find Java

This module finds if Java is installed and determines where the
include files and libraries are.  The caller may set variable JAVA_HOME
to specify a Java installation prefix explicitly.


Specify one or more of the following components as you call this find module. See example below.

::

 Runtime     = User just want to execute some Java byte-compiled
 Development = Development tools (java, javac, javah and javadoc), includes Runtime component
 IdlJ        = idl compiler for Java
 JarSigner   = signer tool for jar

This module sets the following result variables:

::

 Java_JAVA_EXECUTABLE      = the full path to the Java runtime
 Java_JAVAC_EXECUTABLE     = the full path to the Java compiler
 Java_JAVAH_EXECUTABLE     = the full path to the Java header generator
 Java_JAVADOC_EXECUTABLE   = the full path to the Java documentation generator
 Java_IDLJ_EXECUTABLE      = the full path to the Java idl compiler
 Java_JAR_EXECUTABLE       = the full path to the Java archiver
 Java_JARSIGNER_EXECUTABLE = the full path to the Java jar signer
 Java_VERSION_STRING       = Version of java found, eg. 1.6.0_12
 Java_VERSION_MAJOR        = The major version of the package found.
 Java_VERSION_MINOR        = The minor version of the package found.
 Java_VERSION_PATCH        = The patch version of the package found.
 Java_VERSION_TWEAK        = The tweak version of the package found (after '_')
 Java_VERSION              = This is set to: $major.$minor.$patch(.$tweak)

The minimum required version of Java can be specified using the
standard CMake syntax, e.g.  find_package(Java 1.5)

NOTE: ${Java_VERSION} and ${Java_VERSION_STRING} are not guaranteed to
be identical.  For example some java version may return:
Java_VERSION_STRING = 1.5.0_17 and Java_VERSION = 1.5.0.17

another example is the Java OEM, with: Java_VERSION_STRING = 1.6.0-oem
and Java_VERSION = 1.6.0

For these components the following variables are set:

::

 Java_FOUND                    - TRUE if all components are found.
 Java_INCLUDE_DIRS             - Full paths to all include dirs.
 Java_LIBRARIES                - Full paths to all libraries.
 Java_<component>_FOUND        - TRUE if <component> is found.

Example Usages:

::

 find_package(Java)
 find_package(Java COMPONENTS Runtime)
 find_package(Java COMPONENTS Development)

FindJNI
-------

Find JNI java libraries.

This module finds if Java is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.  The caller may set variable JAVA_HOME to specify a
Java installation prefix explicitly.

This module sets the following result variables:

::

 JNI_INCLUDE_DIRS      = the include dirs to use
 JNI_LIBRARIES         = the libraries to use
 JNI_FOUND             = TRUE if JNI headers and libraries were found.
 JAVA_AWT_LIBRARY      = the path to the jawt library
 JAVA_JVM_LIBRARY      = the path to the jvm library
 JAVA_INCLUDE_PATH     = the include path to jni.h
 JAVA_INCLUDE_PATH2    = the include path to jni_md.h
 JAVA_AWT_INCLUDE_PATH = the include path to jawt.h

FindJPEG
--------

Find JPEG

Find the native JPEG includes and library This module defines

::

 JPEG_INCLUDE_DIR, where to find jpeglib.h, etc.
 JPEG_LIBRARIES, the libraries needed to use JPEG.
 JPEG_FOUND, If false, do not try to use JPEG.

also defined, but not for general use are

::

 JPEG_LIBRARY, where to find the JPEG library.

FindKDE3
--------

Find the KDE3 include and library dirs, KDE preprocessors and define a some macros



This module defines the following variables:

``KDE3_DEFINITIONS``
  compiler definitions required for compiling KDE software
``KDE3_INCLUDE_DIR``
  the KDE include directory
``KDE3_INCLUDE_DIRS``
  the KDE and the Qt include directory, for use with include_directories()
``KDE3_LIB_DIR``
  the directory where the KDE libraries are installed, for use with link_directories()
``QT_AND_KDECORE_LIBS``
  this contains both the Qt and the kdecore library
``KDE3_DCOPIDL_EXECUTABLE``
  the dcopidl executable
``KDE3_DCOPIDL2CPP_EXECUTABLE``
  the dcopidl2cpp executable
``KDE3_KCFGC_EXECUTABLE``
  the kconfig_compiler executable
``KDE3_FOUND``
  set to TRUE if all of the above has been found

The following user adjustable options are provided:

``KDE3_BUILD_TESTS``
  enable this to build KDE testcases

It also adds the following macros (from KDE3Macros.cmake) SRCS_VAR is
always the variable which contains the list of source files for your
application or library.

KDE3_AUTOMOC(file1 ...  fileN)

::

 Call this if you want to have automatic moc file handling.
 This means if you include "foo.moc" in the source file foo.cpp
 a moc file for the header foo.h will be created automatically.
 You can set the property SKIP_AUTOMAKE using set_source_files_properties()
 to exclude some files in the list from being processed.

KDE3_ADD_MOC_FILES(SRCS_VAR file1 ...  fileN )

::

 If you don't use the KDE3_AUTOMOC() macro, for the files
 listed here moc files will be created (named "foo.moc.cpp")

KDE3_ADD_DCOP_SKELS(SRCS_VAR header1.h ...  headerN.h )

::

 Use this to generate DCOP skeletions from the listed headers.

KDE3_ADD_DCOP_STUBS(SRCS_VAR header1.h ...  headerN.h )

::

 Use this to generate DCOP stubs from the listed headers.

KDE3_ADD_UI_FILES(SRCS_VAR file1.ui ...  fileN.ui )

::

 Use this to add the Qt designer ui files to your application/library.

KDE3_ADD_KCFG_FILES(SRCS_VAR file1.kcfgc ...  fileN.kcfgc )

::

 Use this to add KDE kconfig compiler files to your application/library.

KDE3_INSTALL_LIBTOOL_FILE(target)

::

 This will create and install a simple libtool file for the given target.

KDE3_ADD_EXECUTABLE(name file1 ...  fileN )

::

 Currently identical to add_executable(), may provide some advanced
 features in the future.

KDE3_ADD_KPART(name [WITH_PREFIX] file1 ...  fileN )

::

 Create a KDE plugin (KPart, kioslave, etc.) from the given source files.
 If WITH_PREFIX is given, the resulting plugin will have the prefix "lib",
 otherwise it won't.
 It creates and installs an appropriate libtool la-file.

KDE3_ADD_KDEINIT_EXECUTABLE(name file1 ...  fileN )

::

 Create a KDE application in the form of a module loadable via kdeinit.
 A library named kdeinit_<name> will be created and a small executable
 which links to it.

The option KDE3_ENABLE_FINAL to enable all-in-one compilation is no
longer supported.



Author: Alexander Neundorf <neundorf@kde.org>

FindKDE4
--------



Find KDE4 and provide all necessary variables and macros to compile
software for it.  It looks for KDE 4 in the following directories in
the given order:

::

 CMAKE_INSTALL_PREFIX
 KDEDIRS
 /opt/kde4

Please look in FindKDE4Internal.cmake and KDE4Macros.cmake for more
information.  They are installed with the KDE 4 libraries in
$KDEDIRS/share/apps/cmake/modules/.

Author: Alexander Neundorf <neundorf@kde.org>

FindLAPACK
----------

Find LAPACK library

This module finds an installed fortran library that implements the
LAPACK linear-algebra interface (see http://www.netlib.org/lapack/).

The approach follows that taken for the autoconf macro file,
acx_lapack.m4 (distributed at
http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).

This module sets the following variables:

::

 LAPACK_FOUND - set to true if a library implementing the LAPACK interface
   is found
 LAPACK_LINKER_FLAGS - uncached list of required linker flags (excluding -l
   and -L).
 LAPACK_LIBRARIES - uncached list of libraries (using full path name) to
   link against to use LAPACK
 LAPACK95_LIBRARIES - uncached list of libraries (using full path name) to
   link against to use LAPACK95
 LAPACK95_FOUND - set to true if a library implementing the LAPACK f95
   interface is found
 BLA_STATIC  if set on this determines what kind of linkage we do (static)
 BLA_VENDOR  if set checks only the specified vendor, if not set checks
    all the possibilities
 BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK

## List of vendors (BLA_VENDOR) valid in this module # Intel(mkl),
OpenBLAS, ACML,Apple, NAS, Generic

FindLATEX
---------

Find Latex

This module finds an installed Latex and determines the location
of the compiler.  Additionally the module looks for Latex-related
software like BibTeX.

This module sets the following result variables::

 LATEX_FOUND:          whether found Latex and requested components
 LATEX_<component>_FOUND:  whether found <component>
 LATEX_COMPILER:       path to the LaTeX compiler
 PDFLATEX_COMPILER:    path to the PdfLaTeX compiler
 XELATEX_COMPILER:     path to the XeLaTeX compiler
 LUALATEX_COMPILER:    path to the LuaLaTeX compiler
 BIBTEX_COMPILER:      path to the BibTeX compiler
 BIBER_COMPILER:       path to the Biber compiler
 MAKEINDEX_COMPILER:   path to the MakeIndex compiler
 XINDY_COMPILER:       path to the xindy compiler
 DVIPS_CONVERTER:      path to the DVIPS converter
 DVIPDF_CONVERTER:     path to the DVIPDF converter
 PS2PDF_CONVERTER:     path to the PS2PDF converter
 PDFTOPS_CONVERTER:    path to the pdftops converter
 LATEX2HTML_CONVERTER: path to the LaTeX2Html converter
 HTLATEX_COMPILER:     path to the htlatex compiler

Possible components are::

 PDFLATEX
 XELATEX
 LUALATEX
 BIBTEX
 BIBER
 MAKEINDEX
 XINDY
 DVIPS
 DVIPDF
 PS2PDF
 PDFTOPS
 LATEX2HTML
 HTLATEX

Example Usages::

 find_package(LATEX)
 find_package(LATEX COMPONENTS PDFLATEX)
 find_package(LATEX COMPONENTS BIBTEX PS2PDF)

FindLibArchive
--------------

Find libarchive library and headers

The module defines the following variables:

::

 LibArchive_FOUND        - true if libarchive was found
 LibArchive_INCLUDE_DIRS - include search path
 LibArchive_LIBRARIES    - libraries to link
 LibArchive_VERSION      - libarchive 3-component version number

FindLibLZMA
-----------

Find LibLZMA

Find LibLZMA headers and library

::

 LIBLZMA_FOUND             - True if liblzma is found.
 LIBLZMA_INCLUDE_DIRS      - Directory where liblzma headers are located.
 LIBLZMA_LIBRARIES         - Lzma libraries to link against.
 LIBLZMA_HAS_AUTO_DECODER  - True if lzma_auto_decoder() is found (required).
 LIBLZMA_HAS_EASY_ENCODER  - True if lzma_easy_encoder() is found (required).
 LIBLZMA_HAS_LZMA_PRESET   - True if lzma_lzma_preset() is found (required).
 LIBLZMA_VERSION_MAJOR     - The major version of lzma
 LIBLZMA_VERSION_MINOR     - The minor version of lzma
 LIBLZMA_VERSION_PATCH     - The patch version of lzma
 LIBLZMA_VERSION_STRING    - version number as a string (ex: "5.0.3")

FindLibXml2
-----------

Try to find the LibXml2 xml processing library

Once done this will define

::

 LIBXML2_FOUND - System has LibXml2
 LIBXML2_INCLUDE_DIR - The LibXml2 include directory
 LIBXML2_LIBRARIES - The libraries needed to use LibXml2
 LIBXML2_DEFINITIONS - Compiler switches required for using LibXml2
 LIBXML2_XMLLINT_EXECUTABLE - The XML checking tool xmllint coming with LibXml2
 LIBXML2_VERSION_STRING - the version of LibXml2 found (since CMake 2.8.8)

FindLibXslt
-----------

Try to find the LibXslt library

Once done this will define

::

 LIBXSLT_FOUND - system has LibXslt
 LIBXSLT_INCLUDE_DIR - the LibXslt include directory
 LIBXSLT_LIBRARIES - Link these to LibXslt
 LIBXSLT_DEFINITIONS - Compiler switches required for using LibXslt
 LIBXSLT_VERSION_STRING - version of LibXslt found (since CMake 2.8.8)

Additionally, the following two variables are set (but not required
for using xslt):

``LIBXSLT_EXSLT_LIBRARIES``
  Link to these if you need to link against the exslt library.
``LIBXSLT_XSLTPROC_EXECUTABLE``
  Contains the full path to the xsltproc executable if found.

FindLTTngUST
------------

This module finds the `LTTng-UST <http://lttng.org/>`__ library.

Imported target
^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` target:

``LTTng::UST``
  The LTTng-UST library, if found

Result variables
^^^^^^^^^^^^^^^^

This module sets the following

``LTTNGUST_FOUND``
  ``TRUE`` if system has LTTng-UST
``LTTNGUST_INCLUDE_DIRS``
  The LTTng-UST include directories
``LTTNGUST_LIBRARIES``
  The libraries needed to use LTTng-UST
``LTTNGUST_VERSION_STRING``
  The LTTng-UST version
``LTTNGUST_HAS_TRACEF``
  ``TRUE`` if the ``tracef()`` API is available in the system's LTTng-UST
``LTTNGUST_HAS_TRACELOG``
  ``TRUE`` if the ``tracelog()`` API is available in the system's LTTng-UST

FindLua50
---------



Locate Lua library This module defines

::

 LUA50_FOUND, if false, do not try to link to Lua
 LUA_LIBRARIES, both lua and lualib
 LUA_INCLUDE_DIR, where to find lua.h and lualib.h (and probably lauxlib.h)

Note that the expected include convention is

::

 #include "lua.h"

and not

::

 #include <lua/lua.h>

This is because, the lua location is not standardized and may exist in
locations other than lua/

FindLua51
---------



Locate Lua library This module defines

::

 LUA51_FOUND, if false, do not try to link to Lua
 LUA_LIBRARIES
 LUA_INCLUDE_DIR, where to find lua.h
 LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)

Note that the expected include convention is

::

 #include "lua.h"

and not

::

 #include <lua/lua.h>

This is because, the lua location is not standardized and may exist in
locations other than lua/

FindLua
-------



Locate Lua library This module defines

::

 LUA_FOUND          - if false, do not try to link to Lua
 LUA_LIBRARIES      - both lua and lualib
 LUA_INCLUDE_DIR    - where to find lua.h
 LUA_VERSION_STRING - the version of Lua found
 LUA_VERSION_MAJOR  - the major version of Lua
 LUA_VERSION_MINOR  - the minor version of Lua
 LUA_VERSION_PATCH  - the patch version of Lua

Note that the expected include convention is

::

 #include "lua.h"

and not

::

 #include <lua/lua.h>

This is because, the lua location is not standardized and may exist in
locations other than lua/

FindMatlab
----------

Finds Matlab installations and provides Matlab tools and libraries to cmake.

This package first intention is to find the libraries associated with Matlab
in order to be able to build Matlab extensions (mex files). It can also be
used:

* run specific commands in Matlab
* declare Matlab unit test
* retrieve various information from Matlab (mex extensions, versions and
  release queries, ...)

The module supports the following components:

* ``MX_LIBRARY`` and ``ENG_LIBRARY`` respectively the MX and ENG libraries of
  Matlab
* ``MAIN_PROGRAM`` the Matlab binary program.

.. note::

  The version given to the ``find_package()`` directive is the Matlab
  **version**, which should not be confused with the Matlab *release* name
  (eg. `R2014`).
  The ``matlab_get_version_from_release_name()`` and
  ``matlab_get_release_name_from_version()`` allow a mapping
  from the release name to the version.

The variable ``Matlab_ROOT_DIR`` may be specified in order to give
the path of the desired Matlab version. Otherwise, the behaviour is platform
specific:

* Windows: The installed versions of Matlab are retrieved from the
  Windows registry
* OS X: The installed versions of Matlab are given by the MATLAB
  paths in ``/Application``. If no such application is found, it falls back
  to the one that might be accessible from the PATH.
* Unix: The desired Matlab should be accessible from the PATH.

Additional information is provided when ``MATLAB_FIND_DEBUG`` is set.
When a Matlab binary is found automatically and the ``MATLAB_VERSION``
is not given, the version is queried from Matlab directly.
On Windows, it can make a window running Matlab appear.

The mapping of the release names and the version of Matlab is performed by
defining pairs (name, version).  The variable
``MATLAB_ADDITIONAL_VERSIONS`` may be provided before the call to
the ``find_package()`` in order to handle additional versions.

A Matlab scripts can be added to the set of tests using the
``matlab_add_unit_test()``. By default, the Matlab unit test framework
will be used (>= 2013a) to run this script, but regular ``.m`` files
returning an exit code can be used as well (0 indicating a success).

Module Input Variables
^^^^^^^^^^^^^^^^^^^^^^

Users or projects may set the following variables to configure the module
behaviour:

``Matlab_ROOT_DIR``
  the root of the Matlab installation.
``MATLAB_FIND_DEBUG``
  outputs debug information
``MATLAB_ADDITIONAL_VERSIONS``
  additional versions of Matlab for the automatic retrieval of the installed
  versions.

Variables defined by the module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Result variables
""""""""""""""""

``Matlab_FOUND``
  ``TRUE`` if the Matlab installation is found, ``FALSE``
  otherwise. All variable below are defined if Matlab is found.
``Matlab_ROOT_DIR``
  the final root of the Matlab installation determined by the FindMatlab
  module.
``Matlab_MAIN_PROGRAM``
  the Matlab binary program. Available only if the component ``MAIN_PROGRAM``
  is given in the ``find_package()`` directive.
``Matlab_INCLUDE_DIRS``
 the path of the Matlab libraries headers
``Matlab_MEX_LIBRARY``
  library for mex, always available.
``Matlab_MX_LIBRARY``
  mx library of Matlab (arrays). Available only if the component
  ``MX_LIBRARY`` has been requested.
``Matlab_ENG_LIBRARY``
  Matlab engine library. Available only if the component ``ENG_LIBRARY``
  is requested.
``Matlab_LIBRARIES``
  the whole set of libraries of Matlab
``Matlab_MEX_COMPILER``
  the mex compiler of Matlab. Currently not used.
  Available only if the component ``MEX_COMPILER`` is asked

Cached variables
""""""""""""""""

``Matlab_MEX_EXTENSION``
  the extension of the mex files for the current platform (given by Matlab).
``Matlab_ROOT_DIR``
  the location of the root of the Matlab installation found. If this value
  is changed by the user, the result variables are recomputed.

Provided macros
^^^^^^^^^^^^^^^

``matlab_get_version_from_release_name()``
  returns the version from the release name
``matlab_get_release_name_from_version()``
  returns the release name from the Matlab version

Provided functions
^^^^^^^^^^^^^^^^^^

``matlab_add_mex()``
  adds a target compiling a MEX file.
``matlab_add_unit_test()``
  adds a Matlab unit test file as a test to the project.
``matlab_extract_all_installed_versions_from_registry()``
  parses the registry for all Matlab versions. Available on Windows only.
  The part of the registry parsed is dependent on the host processor
``matlab_get_all_valid_matlab_roots_from_registry()``
  returns all the possible Matlab paths, according to a previously
  given list. Only the existing/accessible paths are kept. This is mainly
  useful for the searching all possible Matlab installation.
``matlab_get_mex_suffix()``
  returns the suffix to be used for the mex files
  (platform/architecture dependent)
``matlab_get_version_from_matlab_run()``
  returns the version of Matlab, given the full directory of the Matlab
  program.


Known issues
^^^^^^^^^^^^

**Symbol clash in a MEX target**
  By default, every symbols inside a MEX
  file defined with the command ``matlab_add_mex()`` have hidden
  visibility, except for the entry point. This is the default behaviour of
  the MEX compiler, which lowers the risk of symbol collision between the
  libraries shipped with Matlab, and the libraries to which the MEX file is
  linking to. This is also the default on Windows platforms.

  However, this is not sufficient in certain case, where for instance your
  MEX file is linking against libraries that are already loaded by Matlab,
  even if those libraries have different SONAMES.
  A possible solution is to hide the symbols of the libraries to which the
  MEX target is linking to. This can be achieved in GNU GCC compilers with
  the linker option ``-Wl,--exclude-libs,ALL``.

**Tests using GPU resources**
  in case your MEX file is using the GPU and
  in order to be able to run unit tests on this MEX file, the GPU resources
  should be properly released by Matlab. A possible solution is to make
  Matlab aware of the use of the GPU resources in the session, which can be
  performed by a command such as ``D = gpuDevice()`` at the beginning of
  the test script (or via a fixture).


Reference
^^^^^^^^^

.. variable:: Matlab_ROOT_DIR

   The root folder of the Matlab installation. If set before the call to
   ``find_package()``, the module will look for the components in that
   path. If not set, then an automatic search of Matlab
   will be performed. If set, it should point to a valid version of Matlab.

.. variable:: MATLAB_FIND_DEBUG

   If set, the lookup of Matlab and the intermediate configuration steps are
   outputted to the console.

.. variable:: MATLAB_ADDITIONAL_VERSIONS

  If set, specifies additional versions of Matlab that may be looked for.
  The variable should be a list of strings, organised by pairs of release
  name and versions, such as follows::

   set(MATLAB_ADDITIONAL_VERSIONS
       "release_name1=corresponding_version1"
       "release_name2=corresponding_version2"
       ...
       )

 Example::

   set(MATLAB_ADDITIONAL_VERSIONS
       "R2013b=8.2"
       "R2013a=8.1"
       "R2012b=8.0")

 The order of entries in this list matters when several versions of
 Matlab are installed. The priority is set according to the ordering in
 this list.

.. command:: matlab_get_version_from_release_name

  Returns the version of Matlab (17.58) from a release name (R2017k)

.. command:: matlab_get_release_name_from_version

  Returns the release name (R2017k) from the version of Matlab (17.58)

.. command:: matlab_extract_all_installed_versions_from_registry

  This function parses the registry and founds the Matlab versions that are
  installed. The found versions are returned in `matlab_versions`.
  Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for
  The returned list contains all versions under
  ``HKLM\\SOFTWARE\\Mathworks\\MATLAB`` or an empty list in case an error
  occurred (or nothing found).

  .. note::

 Only the versions are provided. No check is made over the existence of the
 installation referenced in the registry,

.. command:: matlab_get_all_valid_matlab_roots_from_registry

  Populates the Matlab root with valid versions of Matlab.
  The returned matlab_roots is organized in pairs
  ``(version_number,matlab_root_path)``.

  ::

   matlab_get_all_valid_matlab_roots_from_registry(
       matlab_versions
       matlab_roots)

 ``matlab_versions``
   the versions of each of the Matlab installations
 ``matlab_roots``
   the location of each of the Matlab installations

.. command:: matlab_get_mex_suffix

  Returns the extension of the mex files (the suffixes).
  This function should not be called before the appropriate Matlab root has
  been found.

  ::

   matlab_get_mex_suffix(
       matlab_root
       mex_suffix)

 ``matlab_root``
   the root of the Matlab installation
 ``mex_suffix``
   the variable name in which the suffix will be returned.

.. command:: matlab_get_version_from_matlab_run

  This function runs Matlab program specified on arguments and extracts its
  version.

  ::

   matlab_get_version_from_matlab_run(
       matlab_binary_path
       matlab_list_versions)

 ``matlab_binary_path``
   the location of the `matlab` binary executable
 ``matlab_list_versions``
   the version extracted from Matlab

.. command:: matlab_add_unit_test

  Adds a Matlab unit test to the test set of cmake/ctest.
  This command requires the component ``MAIN_PROGRAM``.
  The unit test uses the Matlab unittest framework (default, available
  starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``
  is given.

  The function expects one Matlab test script file to be given.
  In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file
  should contain the script to be run, plus an exit command with the exit
  value. This exit value will be passed to the ctest framework (0 success,
  non 0 failure). Additional arguments accepted by ``add_test()`` can be
  passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).

  ::

   matlab_add_unit_test(
       NAME <name>
       UNITTEST_FILE matlab_file_containing_unittest.m
       [UNITTEST_PRECOMMAND matlab_command_to_run]
       [TIMEOUT timeout]
       [ADDITIONAL_PATH path1 [path2 ...]]
       [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]
       [TEST_ARGS arg1 [arg2 ...]]
       [NO_UNITTEST_FRAMEWORK]
       )

 The function arguments are:

 ``NAME``
   name of the unittest in ctest.
 ``UNITTEST_FILE``
   the matlab unittest file. Its path will be automatically
   added to the Matlab path.
 ``UNITTEST_PRECOMMAND``
   Matlab script command to be ran before the file
   containing the test (eg. GPU device initialisation based on CMake
   variables).
 ``TIMEOUT``
   the test timeout in seconds. Defaults to 180 seconds as the
   Matlab unit test may hang.
 ``ADDITIONAL_PATH``
   a list of paths to add to the Matlab path prior to
   running the unit test.
 ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``
   a list of additional option in order
   to run Matlab from the command line.
 ``TEST_ARGS``
   Additional options provided to the add_test command. These
   options are added to the default options (eg. "CONFIGURATIONS Release")
 ``NO_UNITTEST_FRAMEWORK``
   when set, indicates that the test should not
   use the unittest framework of Matlab (available for versions >= R2013a).

.. command:: matlab_add_mex

  Adds a Matlab MEX target.
  This commands compiles the given sources with the current tool-chain in
  order to produce a MEX file. The final name of the produced output may be
  specified, as well as additional link libraries, and a documentation entry
  for the MEX file. Remaining arguments of the call are passed to the
  ``add_library()`` command.

  ::

    matlab_add_mex(
        NAME <name>
        SRC src1 [src2 ...]
        [OUTPUT_NAME output_name]
        [DOCUMENTATION file.txt]
        [LINK_TO target1 target2 ...]
        [...]
    )

 ``NAME``
   name of the target.
 ``SRC``
   list of tje source files.
 ``LINK_TO``
   a list of additional link dependencies.  The target links to ``libmex``
   by default. If ``Matlab_MX_LIBRARY`` is defined, it also
   links to ``libmx``.
 ``OUTPUT_NAME``
   if given, overrides the default name. The default name is
   the name of the target without any prefix and
   with ``Matlab_MEX_EXTENSION`` suffix.
 ``DOCUMENTATION``
   if given, the file ``file.txt`` will be considered as
   being the documentation file for the MEX file. This file is copied into
   the same folder without any processing, with the same name as the final
   mex file, and with extension `.m`. In that case, typing ``help <name>``
   in Matlab prints the documentation contained in this file.

 The documentation file is not processed and should be in the following
 format:

 ::

   % This is the documentation
   function ret = mex_target_output_name(input1)

FindMFC
-------

Find MFC on Windows

Find the native MFC - i.e.  decide if an application can link to the
MFC libraries.

::

 MFC_FOUND - Was MFC support found

You don't need to include anything or link anything to use it.

FindMotif
---------

Try to find Motif (or lesstif)

Once done this will define:

::

 MOTIF_FOUND        - system has MOTIF
 MOTIF_INCLUDE_DIR  - include paths to use Motif
 MOTIF_LIBRARIES    - Link these to use Motif

FindMPEG2
---------

Find the native MPEG2 includes and library

This module defines

::

 MPEG2_INCLUDE_DIR, path to mpeg2dec/mpeg2.h, etc.
 MPEG2_LIBRARIES, the libraries required to use MPEG2.
 MPEG2_FOUND, If false, do not try to use MPEG2.

also defined, but not for general use are

::

 MPEG2_mpeg2_LIBRARY, where to find the MPEG2 library.
 MPEG2_vo_LIBRARY, where to find the vo library.

FindMPEG
--------

Find the native MPEG includes and library

This module defines

::

 MPEG_INCLUDE_DIR, where to find MPEG.h, etc.
 MPEG_LIBRARIES, the libraries required to use MPEG.
 MPEG_FOUND, If false, do not try to use MPEG.

also defined, but not for general use are

::

 MPEG_mpeg2_LIBRARY, where to find the MPEG library.
 MPEG_vo_LIBRARY, where to find the vo library.

FindMPI
-------

Find a Message Passing Interface (MPI) implementation

The Message Passing Interface (MPI) is a library used to write
high-performance distributed-memory parallel applications, and is
typically deployed on a cluster.  MPI is a standard interface (defined
by the MPI forum) for which many implementations are available.  All
of them have somewhat different include paths, libraries to link
against, etc., and this module tries to smooth out those differences.

Variables
^^^^^^^^^

This module will set the following variables per language in your
project, where <lang> is one of C, CXX, or Fortran:

::

 MPI_<lang>_FOUND           TRUE if FindMPI found MPI flags for <lang>
 MPI_<lang>_COMPILER        MPI Compiler wrapper for <lang>
 MPI_<lang>_COMPILE_FLAGS   Compilation flags for MPI programs
 MPI_<lang>_INCLUDE_PATH    Include path(s) for MPI header
 MPI_<lang>_LINK_FLAGS      Linking flags for MPI programs
 MPI_<lang>_LIBRARIES       All libraries to link MPI programs against

Additionally, FindMPI sets the following variables for running MPI
programs from the command line:

::

 MPIEXEC                    Executable for running MPI programs
 MPIEXEC_NUMPROC_FLAG       Flag to pass to MPIEXEC before giving
                            it the number of processors to run on
 MPIEXEC_PREFLAGS           Flags to pass to MPIEXEC directly
                            before the executable to run.
 MPIEXEC_POSTFLAGS          Flags to pass to MPIEXEC after other flags

Usage
^^^^^

To use this module, simply call FindMPI from a CMakeLists.txt file, or
run ``find_package(MPI)``, then run CMake.  If you are happy with the
auto-detected configuration for your language, then you're done.  If
not, you have two options:

::

 1. Set MPI_<lang>_COMPILER to the MPI wrapper (mpicc, etc.) of your
    choice and reconfigure.  FindMPI will attempt to determine all the
    necessary variables using THAT compiler's compile and link flags.
 2. If this fails, or if your MPI implementation does not come with
    a compiler wrapper, then set both MPI_<lang>_LIBRARIES and
    MPI_<lang>_INCLUDE_PATH.  You may also set any other variables
    listed above, but these two are required.  This will circumvent
    autodetection entirely.

When configuration is successful, ``MPI_<lang>_COMPILER`` will be set to
the compiler wrapper for <lang>, if it was found.  ``MPI_<lang>_FOUND``
and other variables above will be set if any MPI implementation was
found for <lang>, regardless of whether a compiler was found.

When using ``MPIEXEC`` to execute MPI applications, you should typically
use all of the ``MPIEXEC`` flags as follows:

::

 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} PROCS
   ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS

where ``PROCS`` is the number of processors on which to execute the
program, ``EXECUTABLE`` is the MPI program, and ``ARGS`` are the arguments to
pass to the MPI program.

Backward Compatibility
^^^^^^^^^^^^^^^^^^^^^^

For backward compatibility with older versions of FindMPI, these
variables are set, but deprecated:

::

 MPI_FOUND           MPI_COMPILER        MPI_LIBRARY
 MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY
 MPI_LINK_FLAGS      MPI_LIBRARIES

In new projects, please use the ``MPI_<lang>_XXX`` equivalents.

FindOpenAL
----------



Locate OpenAL This module defines OPENAL_LIBRARY OPENAL_FOUND, if
false, do not try to link to OpenAL OPENAL_INCLUDE_DIR, where to find
the headers

$OPENALDIR is an environment variable that would correspond to the
./configure --prefix=$OPENALDIR used in building OpenAL.

Created by Eric Wing.  This was influenced by the FindSDL.cmake
module.

FindOpenCL
----------

Try to find OpenCL

Once done this will define::

 OpenCL_FOUND          - True if OpenCL was found
 OpenCL_INCLUDE_DIRS   - include directories for OpenCL
 OpenCL_LIBRARIES      - link against this library to use OpenCL
 OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)
 OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation
 OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation

The module will also define two cache variables::

 OpenCL_INCLUDE_DIR    - the OpenCL include directory
 OpenCL_LIBRARY        - the path to the OpenCL library

FindOpenGL
----------

FindModule for OpenGL and GLU.

Result Variables
^^^^^^^^^^^^^^^^

This module sets the following variables:

``OPENGL_FOUND``
 True, if the system has OpenGL.
``OPENGL_XMESA_FOUND``
 True, if the system has XMESA.
``OPENGL_GLU_FOUND``
 True, if the system has GLU.
``OPENGL_INCLUDE_DIR``
 Path to the OpenGL include directory.
``OPENGL_LIBRARIES``
 Paths to the OpenGL and GLU libraries.

If you want to use just GL you can use these values:

``OPENGL_gl_LIBRARY``
 Path to the OpenGL library.
``OPENGL_glu_LIBRARY``
 Path to the GLU library.

OSX Specific
^^^^^^^^^^^^

On OSX default to using the framework version of OpenGL. People will
have to change the cache values of OPENGL_glu_LIBRARY and
OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.

FindOpenMP
----------

Finds OpenMP support

This module can be used to detect OpenMP support in a compiler.  If
the compiler supports OpenMP, the flags required to compile with
OpenMP support are returned in variables for the different languages.
The variables may be empty if the compiler does not need a special
flag to support OpenMP.

The following variables are set:

::

 OpenMP_C_FLAGS - flags to add to the C compiler for OpenMP support
 OpenMP_CXX_FLAGS - flags to add to the CXX compiler for OpenMP support
 OpenMP_Fortran_FLAGS - flags to add to the Fortran compiler for OpenMP support
 OPENMP_FOUND - true if openmp is detected

Supported compilers can be found at
http://openmp.org/wp/openmp-compilers/

FindOpenSceneGraph
------------------

Find OpenSceneGraph

This module searches for the OpenSceneGraph core "osg" library as well
as OpenThreads, and whatever additional COMPONENTS (nodekits) that you
specify.

::

 See http://www.openscenegraph.org

NOTE: To use this module effectively you must either require CMake >=
2.6.3 with cmake_minimum_required(VERSION 2.6.3) or download and place
FindOpenThreads.cmake, Findosg_functions.cmake, Findosg.cmake, and
Find<etc>.cmake files into your CMAKE_MODULE_PATH.

==================================

This module accepts the following variables (note mixed case)

::

 OpenSceneGraph_DEBUG - Enable debugging output

::

 OpenSceneGraph_MARK_AS_ADVANCED - Mark cache variables as advanced
                                   automatically

The following environment variables are also respected for finding the
OSG and it's various components.  CMAKE_PREFIX_PATH can also be used
for this (see find_library() CMake documentation).

``<MODULE>_DIR``
  (where MODULE is of the form "OSGVOLUME" and there is a FindosgVolume.cmake file)
``OSG_DIR``
  ..
``OSGDIR``
  ..
``OSG_ROOT``
  ..


[CMake 2.8.10]: The CMake variable OSG_DIR can now be used as well to
influence detection, instead of needing to specify an environment
variable.

This module defines the following output variables:

::

 OPENSCENEGRAPH_FOUND - Was the OSG and all of the specified components found?

::

 OPENSCENEGRAPH_VERSION - The version of the OSG which was found

::

 OPENSCENEGRAPH_INCLUDE_DIRS - Where to find the headers

::

 OPENSCENEGRAPH_LIBRARIES - The OSG libraries

================================== Example Usage:

::

 find_package(OpenSceneGraph 2.0.0 REQUIRED osgDB osgUtil)
     # libOpenThreads & libosg automatically searched
 include_directories(${OPENSCENEGRAPH_INCLUDE_DIRS})

::

 add_executable(foo foo.cc)
 target_link_libraries(foo ${OPENSCENEGRAPH_LIBRARIES})

FindOpenSSL
-----------

Find the OpenSSL encryption library.

Imported Targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` targets:

``OpenSSL::SSL``
  The OpenSSL ``ssl`` library, if found.
``OpenSSL::Crypto``
  The OpenSSL ``crypto`` library, if found.

Result Variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``OPENSSL_FOUND``
  System has the OpenSSL library.
``OPENSSL_INCLUDE_DIR``
  The OpenSSL include directory.
``OPENSSL_CRYPTO_LIBRARY``
  The OpenSSL crypto library.
``OPENSSL_SSL_LIBRARY``
  The OpenSSL SSL library.
``OPENSSL_LIBRARIES``
  All OpenSSL libraries.
``OPENSSL_VERSION``
  This is set to ``$major.$minor.$revision$patch`` (e.g. ``0.9.8s``).

Hints
^^^^^

Set ``OPENSSL_ROOT_DIR`` to the root directory of an OpenSSL installation.
Set ``OPENSSL_USE_STATIC_LIBS`` to ``TRUE`` to look for static libraries.
Set ``OPENSSL_MSVC_STATIC_RT`` set ``TRUE`` to choose the MT version of the lib.

FindOpenThreads
---------------



OpenThreads is a C++ based threading library.  Its largest userbase
seems to OpenSceneGraph so you might notice I accept OSGDIR as an
environment path.  I consider this part of the Findosg* suite used to
find OpenSceneGraph components.  Each component is separate and you
must opt in to each module.

Locate OpenThreads This module defines OPENTHREADS_LIBRARY
OPENTHREADS_FOUND, if false, do not try to link to OpenThreads
OPENTHREADS_INCLUDE_DIR, where to find the headers

$OPENTHREADS_DIR is an environment variable that would correspond to
the ./configure --prefix=$OPENTHREADS_DIR used in building osg.

[CMake 2.8.10]: The CMake variables OPENTHREADS_DIR or OSG_DIR can now
be used as well to influence detection, instead of needing to specify
an environment variable.

Created by Eric Wing.

FindosgAnimation
----------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgAnimation This module defines

OSGANIMATION_FOUND - Was osgAnimation found? OSGANIMATION_INCLUDE_DIR
- Where to find the headers OSGANIMATION_LIBRARIES - The libraries to
link against for the OSG (use this)

OSGANIMATION_LIBRARY - The OSG library OSGANIMATION_LIBRARY_DEBUG -
The OSG debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgDB
---------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgDB This module defines

OSGDB_FOUND - Was osgDB found? OSGDB_INCLUDE_DIR - Where to find the
headers OSGDB_LIBRARIES - The libraries to link against for the osgDB
(use this)

OSGDB_LIBRARY - The osgDB library OSGDB_LIBRARY_DEBUG - The osgDB
debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

Findosg_functions
-----------------





This CMake file contains two macros to assist with searching for OSG
libraries and nodekits.  Please see FindOpenSceneGraph.cmake for full
documentation.

FindosgFX
---------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgFX This module defines

OSGFX_FOUND - Was osgFX found? OSGFX_INCLUDE_DIR - Where to find the
headers OSGFX_LIBRARIES - The libraries to link against for the osgFX
(use this)

OSGFX_LIBRARY - The osgFX library OSGFX_LIBRARY_DEBUG - The osgFX
debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgGA
---------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgGA This module defines

OSGGA_FOUND - Was osgGA found? OSGGA_INCLUDE_DIR - Where to find the
headers OSGGA_LIBRARIES - The libraries to link against for the osgGA
(use this)

OSGGA_LIBRARY - The osgGA library OSGGA_LIBRARY_DEBUG - The osgGA
debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgIntrospection
--------------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgINTROSPECTION This module defines

OSGINTROSPECTION_FOUND - Was osgIntrospection found?
OSGINTROSPECTION_INCLUDE_DIR - Where to find the headers
OSGINTROSPECTION_LIBRARIES - The libraries to link for
osgIntrospection (use this)

OSGINTROSPECTION_LIBRARY - The osgIntrospection library
OSGINTROSPECTION_LIBRARY_DEBUG - The osgIntrospection debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgManipulator
------------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgManipulator This module defines

OSGMANIPULATOR_FOUND - Was osgManipulator found?
OSGMANIPULATOR_INCLUDE_DIR - Where to find the headers
OSGMANIPULATOR_LIBRARIES - The libraries to link for osgManipulator
(use this)

OSGMANIPULATOR_LIBRARY - The osgManipulator library
OSGMANIPULATOR_LIBRARY_DEBUG - The osgManipulator debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgParticle
---------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgParticle This module defines

OSGPARTICLE_FOUND - Was osgParticle found? OSGPARTICLE_INCLUDE_DIR -
Where to find the headers OSGPARTICLE_LIBRARIES - The libraries to
link for osgParticle (use this)

OSGPARTICLE_LIBRARY - The osgParticle library
OSGPARTICLE_LIBRARY_DEBUG - The osgParticle debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgPresentation
-------------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgPresentation This module defines

OSGPRESENTATION_FOUND - Was osgPresentation found?
OSGPRESENTATION_INCLUDE_DIR - Where to find the headers
OSGPRESENTATION_LIBRARIES - The libraries to link for osgPresentation
(use this)

OSGPRESENTATION_LIBRARY - The osgPresentation library
OSGPRESENTATION_LIBRARY_DEBUG - The osgPresentation debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.  Modified to work with osgPresentation by Robert
Osfield, January 2012.

FindosgProducer
---------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgProducer This module defines

OSGPRODUCER_FOUND - Was osgProducer found? OSGPRODUCER_INCLUDE_DIR -
Where to find the headers OSGPRODUCER_LIBRARIES - The libraries to
link for osgProducer (use this)

OSGPRODUCER_LIBRARY - The osgProducer library
OSGPRODUCER_LIBRARY_DEBUG - The osgProducer debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgQt
---------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgQt This module defines

OSGQT_FOUND - Was osgQt found? OSGQT_INCLUDE_DIR - Where to find the
headers OSGQT_LIBRARIES - The libraries to link for osgQt (use this)

OSGQT_LIBRARY - The osgQt library OSGQT_LIBRARY_DEBUG - The osgQt
debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.  Modified to work with osgQt by Robert Osfield,
January 2012.

Findosg
-------





NOTE: It is highly recommended that you use the new
FindOpenSceneGraph.cmake introduced in CMake 2.6.3 and not use this
Find module directly.

This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osg This module defines

OSG_FOUND - Was the Osg found? OSG_INCLUDE_DIR - Where to find the
headers OSG_LIBRARIES - The libraries to link against for the OSG (use
this)

OSG_LIBRARY - The OSG library OSG_LIBRARY_DEBUG - The OSG debug
library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgShadow
-------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgShadow This module defines

OSGSHADOW_FOUND - Was osgShadow found? OSGSHADOW_INCLUDE_DIR - Where
to find the headers OSGSHADOW_LIBRARIES - The libraries to link for
osgShadow (use this)

OSGSHADOW_LIBRARY - The osgShadow library OSGSHADOW_LIBRARY_DEBUG -
The osgShadow debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgSim
----------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgSim This module defines

OSGSIM_FOUND - Was osgSim found? OSGSIM_INCLUDE_DIR - Where to find
the headers OSGSIM_LIBRARIES - The libraries to link for osgSim (use
this)

OSGSIM_LIBRARY - The osgSim library OSGSIM_LIBRARY_DEBUG - The osgSim
debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgTerrain
--------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgTerrain This module defines

OSGTERRAIN_FOUND - Was osgTerrain found? OSGTERRAIN_INCLUDE_DIR -
Where to find the headers OSGTERRAIN_LIBRARIES - The libraries to link
for osgTerrain (use this)

OSGTERRAIN_LIBRARY - The osgTerrain library OSGTERRAIN_LIBRARY_DEBUG -
The osgTerrain debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgText
-----------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgText This module defines

OSGTEXT_FOUND - Was osgText found? OSGTEXT_INCLUDE_DIR - Where to find
the headers OSGTEXT_LIBRARIES - The libraries to link for osgText (use
this)

OSGTEXT_LIBRARY - The osgText library OSGTEXT_LIBRARY_DEBUG - The
osgText debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgUtil
-----------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgUtil This module defines

OSGUTIL_FOUND - Was osgUtil found? OSGUTIL_INCLUDE_DIR - Where to find
the headers OSGUTIL_LIBRARIES - The libraries to link for osgUtil (use
this)

OSGUTIL_LIBRARY - The osgUtil library OSGUTIL_LIBRARY_DEBUG - The
osgUtil debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgViewer
-------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgViewer This module defines

OSGVIEWER_FOUND - Was osgViewer found? OSGVIEWER_INCLUDE_DIR - Where
to find the headers OSGVIEWER_LIBRARIES - The libraries to link for
osgViewer (use this)

OSGVIEWER_LIBRARY - The osgViewer library OSGVIEWER_LIBRARY_DEBUG -
The osgViewer debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgVolume
-------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgVolume This module defines

OSGVOLUME_FOUND - Was osgVolume found? OSGVOLUME_INCLUDE_DIR - Where
to find the headers OSGVOLUME_LIBRARIES - The libraries to link for
osgVolume (use this)

OSGVOLUME_LIBRARY - The osgVolume library OSGVOLUME_LIBRARY_DEBUG -
The osgVolume debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

Created by Eric Wing.

FindosgWidget
-------------



This is part of the Findosg* suite used to find OpenSceneGraph
components.  Each component is separate and you must opt in to each
module.  You must also opt into OpenGL and OpenThreads (and Producer
if needed) as these modules won't do it for you.  This is to allow you
control over your own system piece by piece in case you need to opt
out of certain components or change the Find behavior for a particular
module (perhaps because the default FindOpenGL.cmake module doesn't
work with your system as an example).  If you want to use a more
convenient module that includes everything, use the
FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.

Locate osgWidget This module defines

OSGWIDGET_FOUND - Was osgWidget found? OSGWIDGET_INCLUDE_DIR - Where
to find the headers OSGWIDGET_LIBRARIES - The libraries to link for
osgWidget (use this)

OSGWIDGET_LIBRARY - The osgWidget library OSGWIDGET_LIBRARY_DEBUG -
The osgWidget debug library

$OSGDIR is an environment variable that would correspond to the
./configure --prefix=$OSGDIR used in building osg.

FindosgWidget.cmake tweaked from Findosg* suite as created by Eric
Wing.

FindPackageHandleStandardArgs
-----------------------------

This module provides a function intended to be used in :ref:`Find Modules`
implementing ``find_package(<PackageName>)`` calls.  It handles the
``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.
It also sets the ``<PackageName>_FOUND`` variable.  The package is
considered found if all variables listed contain valid results, e.g.
valid filepaths.

.. command:: find_package_handle_standard_args

  There are two signatures::

   find_package_handle_standard_args(<PackageName>
     (DEFAULT_MSG|<custom-failure-message>)
     <required-var>...
     )

   find_package_handle_standard_args(<PackageName>
     [FOUND_VAR <result-var>]
     [REQUIRED_VARS <required-var>...]
     [VERSION_VAR <version-var>]
     [HANDLE_COMPONENTS]
     [CONFIG_MODE]
     [FAIL_MESSAGE <custom-failure-message>]
     )

 The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all
 the variables ``<required-var>...`` are valid and any optional
 constraints are satisfied, and ``FALSE`` otherwise.  A success or
 failure message may be displayed based on the results and on
 whether the ``REQUIRED`` and/or ``QUIET`` option was given to
 the :command:`find_package` call.

 The options are:

 ``(DEFAULT_MSG|<custom-failure-message>)``
   In the simple signature this specifies the failure message.
   Use ``DEFAULT_MSG`` to ask for a default message to be computed
   (recommended).  Not valid in the full signature.

 ``FOUND_VAR <result-var>``
   Obsolete.  Specifies either ``<PackageName>_FOUND`` or
   ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only
   for compatibility with older versions of CMake and is now ignored.
   Result variables of both names are always set for compatibility.

 ``REQUIRED_VARS <required-var>...``
   Specify the variables which are required for this package.
   These may be named in the generated failure message asking the
   user to set the missing variable values.  Therefore these should
   typically be cache entries such as ``FOO_LIBRARY`` and not output
   variables like ``FOO_LIBRARIES``.

 ``VERSION_VAR <version-var>``
   Specify the name of a variable that holds the version of the package
   that has been found.  This version will be checked against the
   (potentially) specified required version given to the
   :command:`find_package` call, including its ``EXACT`` option.
   The default messages include information about the required
   version and the version which has been actually found, both
   if the version is ok or not.

 ``HANDLE_COMPONENTS``
   Enable handling of package components.  In this case, the command
   will report which components have been found and which are missing,
   and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``
   if any of the required components (i.e. not the ones listed after
   the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are
   missing.

 ``CONFIG_MODE``
   Specify that the calling find module is a wrapper around a
   call to ``find_package(<PackageName> NO_MODULE)``.  This implies
   a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command
   will automatically check whether the package configuration file
   was found.

 ``FAIL_MESSAGE <custom-failure-message>``
   Specify a custom failure message instead of using the default
   generated message.  Not recommended.

Example for the simple signature:

 find_package_handle_standard_args(LibXml2 DEFAULT_MSG
   LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)

The ``LibXml2`` package is considered to be found if both
``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.
Then also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found
and ``REQUIRED`` was used, it fails with a
``message(FATAL_ERROR)``, independent whether ``QUIET`` was
used or not.  If it is found, success will be reported, including
the content of the first ``<required-var>``.  On repeated CMake runs,
the same message will not be printed again.

Example for the full signature:

 find_package_handle_standard_args(LibArchive
   REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR
   VERSION_VAR LibArchive_VERSION)

In this case, the ``LibArchive`` package is considered to be found if
both ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.
Also the version of ``LibArchive`` will be checked by using the version
contained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,
the default messages will be printed.

Another example for the full signature:

 find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)
 find_package_handle_standard_args(Automoc4  CONFIG_MODE)

In this case, a ``FindAutmoc4.cmake`` module wraps a call to
``find_package(Automoc4 NO_MODULE)`` and adds an additional search
directory for ``automoc4``.  Then the call to
``find_package_handle_standard_args`` produces a proper success/failure
message.

FindPackageMessage
------------------



FIND_PACKAGE_MESSAGE(<name> "message for user" "find result details")

This macro is intended to be used in FindXXX.cmake modules files.  It
will print a message once for each unique find result.  This is useful
for telling the user where a package was found.  The first argument
specifies the name (XXX) of the package.  The second argument
specifies the message to display.  The third argument lists details
about the find result so that if they change the message will be
displayed again.  The macro also obeys the QUIET argument to the
find_package command.

Example:

::

 if(X11_FOUND)
   FIND_PACKAGE_MESSAGE(X11 "Found X11: ${X11_X11_LIB}"
     "[${X11_X11_LIB}][${X11_INCLUDE_DIR}]")
 else()
  ...
 endif()

FindPerlLibs
------------

Find Perl libraries

This module finds if PERL is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.  This code sets the following variables:

::

 PERLLIBS_FOUND    = True if perl.h & libperl were found
 PERL_INCLUDE_PATH = path to where perl.h is found
 PERL_LIBRARY      = path to libperl
 PERL_EXECUTABLE   = full path to the perl binary

The minimum required version of Perl can be specified using the
standard syntax, e.g.  find_package(PerlLibs 6.0)

::

 The following variables are also available if needed
 (introduced after CMake 2.6.4)

::

 PERL_SITESEARCH    = path to the sitesearch install dir
 PERL_SITELIB       = path to the sitelib install directory
 PERL_VENDORARCH    = path to the vendor arch install directory
 PERL_VENDORLIB     = path to the vendor lib install directory
 PERL_ARCHLIB       = path to the arch lib install directory
 PERL_PRIVLIB       = path to the priv lib install directory
 PERL_EXTRA_C_FLAGS = Compilation flags used to build perl

FindPerl
--------

Find perl

this module looks for Perl

::

 PERL_EXECUTABLE     - the full path to perl
 PERL_FOUND          - If false, don't attempt to use perl.
 PERL_VERSION_STRING - version of perl found (since CMake 2.8.8)

FindPHP4
--------

Find PHP4

This module finds if PHP4 is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.  This code sets the following variables:

::

 PHP4_INCLUDE_PATH       = path to where php.h can be found
 PHP4_EXECUTABLE         = full path to the php4 binary

FindPhysFS
----------



Locate PhysFS library This module defines PHYSFS_LIBRARY, the name of
the library to link against PHYSFS_FOUND, if false, do not try to link
to PHYSFS PHYSFS_INCLUDE_DIR, where to find physfs.h

$PHYSFSDIR is an environment variable that would correspond to the
./configure --prefix=$PHYSFSDIR used in building PHYSFS.

Created by Eric Wing.

FindPike
--------

Find Pike

This module finds if PIKE is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.  This code sets the following variables:

::

 PIKE_INCLUDE_PATH       = path to where program.h is found
 PIKE_EXECUTABLE         = full path to the pike binary

FindPkgConfig
-------------

A `pkg-config` module for CMake.

Finds the ``pkg-config`` executable and add the
``pkg_check_modules()`` and ``pkg_search_module()``
commands.

In order to find the ``pkg-config`` executable, it uses the
``PKG_CONFIG_EXECUTABLE`` variable or the ``PKG_CONFIG``
environment variable first.

.. command:: pkg_get_variable

  Retrieves the value of a variable from a package::

   pkg_get_variable(<RESULT> <MODULE> <VARIABLE>)

 For example:

 .. code-block:: cmake

   pkg_get_variable(GI_GIRDIR gobject-introspection-1.0 girdir)

.. command:: pkg_check_modules

 Checks for all the given modules. ::

    pkg_check_modules(<PREFIX> [REQUIRED] [QUIET]
                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]
                      [IMPORTED_TARGET]
                      <MODULE> [<MODULE>]*)


 When the ``REQUIRED`` argument was set, macros will fail with an error
 when module(s) could not be found.

 When the ``QUIET`` argument is set, no status messages will be printed.

 By default, if :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or
 later, or if :variable:`PKG_CONFIG_USE_CMAKE_PREFIX_PATH` is set, the
 :variable:`CMAKE_PREFIX_PATH`, :variable:`CMAKE_FRAMEWORK_PATH`, and
 :variable:`CMAKE_APPBUNDLE_PATH` cache and environment variables will
 be added to ``pkg-config`` search path.
 The ``NO_CMAKE_PATH`` and ``NO_CMAKE_ENVIRONMENT_PATH`` arguments
 disable this behavior for the cache variables and the environment
 variables, respectively.
 The ``IMPORTED_TARGET`` argument will create an imported target named
 PkgConfig::<PREFIX>> that can be passed directly as an argument to
 :command:`target_link_libraries`.

 It sets the following variables: ::

    PKG_CONFIG_FOUND          ... if pkg-config executable was found
    PKG_CONFIG_EXECUTABLE     ... pathname of the pkg-config program
    PKG_CONFIG_VERSION_STRING ... the version of the pkg-config program found
                                  (since CMake 2.8.8)

 For the following variables two sets of values exist; first one is the
 common one and has the given PREFIX.  The second set contains flags
 which are given out when ``pkg-config`` was called with the ``--static``
 option. ::

    <XPREFIX>_FOUND          ... set to 1 if module(s) exist
    <XPREFIX>_LIBRARIES      ... only the libraries (w/o the '-l')
    <XPREFIX>_LIBRARY_DIRS   ... the paths of the libraries (w/o the '-L')
    <XPREFIX>_LDFLAGS        ... all required linker flags
    <XPREFIX>_LDFLAGS_OTHER  ... all other linker flags
    <XPREFIX>_INCLUDE_DIRS   ... the '-I' preprocessor flags (w/o the '-I')
    <XPREFIX>_CFLAGS         ... all required cflags
    <XPREFIX>_CFLAGS_OTHER   ... the other compiler flags

 ::

    <XPREFIX> = <PREFIX>        for common case
    <XPREFIX> = <PREFIX>_STATIC for static linking

 There are some special variables whose prefix depends on the count of
 given modules.  When there is only one module, <PREFIX> stays
 unchanged.  When there are multiple modules, the prefix will be
 changed to <PREFIX>_<MODNAME>: ::

    <XPREFIX>_VERSION    ... version of the module
    <XPREFIX>_PREFIX     ... prefix-directory of the module
    <XPREFIX>_INCLUDEDIR ... include-dir of the module
    <XPREFIX>_LIBDIR     ... lib-dir of the module

 ::

    <XPREFIX> = <PREFIX>  when |MODULES| == 1, else
    <XPREFIX> = <PREFIX>_<MODNAME>

 A <MODULE> parameter can have the following formats: ::

    {MODNAME}            ... matches any version
    {MODNAME}>={VERSION} ... at least version <VERSION> is required
    {MODNAME}={VERSION}  ... exactly version <VERSION> is required
    {MODNAME}<={VERSION} ... modules must not be newer than <VERSION>

 Examples

 .. code-block:: cmake

    pkg_check_modules (GLIB2   glib-2.0)

 .. code-block:: cmake

    pkg_check_modules (GLIB2   glib-2.0>=2.10)

 Requires at least version 2.10 of glib2 and defines e.g.
 ``GLIB2_VERSION=2.10.3``

 .. code-block:: cmake

    pkg_check_modules (FOO     glib-2.0>=2.10 gtk+-2.0)

 Requires both glib2 and gtk2, and defines e.g.
 ``FOO_glib-2.0_VERSION=2.10.3`` and ``FOO_gtk+-2.0_VERSION=2.8.20``

 .. code-block:: cmake

    pkg_check_modules (XRENDER REQUIRED xrender)

 Defines for example::

   XRENDER_LIBRARIES=Xrender;X11``
   XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp

.. command:: pkg_search_module

 Same as ``pkg_check_modules()``, but instead it checks for given
 modules and uses the first working one. ::

    pkg_search_module(<PREFIX> [REQUIRED] [QUIET]
                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]
                      [IMPORTED_TARGET]
                      <MODULE> [<MODULE>]*)

 Examples

 .. code-block:: cmake

    pkg_search_module (BAR     libxml-2.0 libxml2 libxml>=2)

.. variable:: PKG_CONFIG_EXECUTABLE

 Path to the pkg-config executable.


.. variable:: PKG_CONFIG_USE_CMAKE_PREFIX_PATH

 Whether ``pkg_check_modules()`` and ``pkg_search_module()``
 should add the paths in ``CMAKE_PREFIX_PATH``,
 ``CMAKE_FRAMEWORK_PATH``, and ``CMAKE_APPBUNDLE_PATH``
 cache and environment variables to ``pkg-config`` search path.

 If this variable is not set, this behavior is enabled by default if
 ``CMAKE_MINIMUM_REQUIRED_VERSION`` is 3.1 or later, disabled
 otherwise.

FindPNG
-------

Find libpng, the official reference library for the PNG image format.

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` target:

``PNG::PNG``
  The libpng library, if found.

Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``PNG_INCLUDE_DIRS``
  where to find png.h, etc.
``PNG_LIBRARIES``
  the libraries to link against to use PNG.
``PNG_DEFINITIONS``
  You should add_definitons(${PNG_DEFINITIONS}) before compiling code
  that includes png library files.
``PNG_FOUND``
  If false, do not try to use PNG.
``PNG_VERSION_STRING``
  the version of the PNG library found (since CMake 2.8.8)

Obsolete variables
^^^^^^^^^^^^^^^^^^

The following variables may also be set, for backwards compatibility:

``PNG_LIBRARY``
  where to find the PNG library.
``PNG_INCLUDE_DIR``
  where to find the PNG headers (same as PNG_INCLUDE_DIRS)

Since PNG depends on the ZLib compression library, none of the above
will be defined unless ZLib can be found.

FindPostgreSQL
--------------

Find the PostgreSQL installation.

This module defines

::

 PostgreSQL_LIBRARIES - the PostgreSQL libraries needed for linking
 PostgreSQL_INCLUDE_DIRS - the directories of the PostgreSQL headers
 PostgreSQL_LIBRARY_DIRS  - the link directories for PostgreSQL libraries
 PostgreSQL_VERSION_STRING - the version of PostgreSQL found (since CMake 2.8.8)

FindProducer
------------



Though Producer isn't directly part of OpenSceneGraph, its primary
user is OSG so I consider this part of the Findosg* suite used to find
OpenSceneGraph components.  You'll notice that I accept OSGDIR as an
environment path.

Each component is separate and you must opt in to each module.  You
must also opt into OpenGL (and OpenThreads?) as these modules won't do
it for you.  This is to allow you control over your own system piece
by piece in case you need to opt out of certain components or change
the Find behavior for a particular module (perhaps because the default
FindOpenGL.cmake module doesn't work with your system as an example).
If you want to use a more convenient module that includes everything,
use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake
modules.

Locate Producer This module defines PRODUCER_LIBRARY PRODUCER_FOUND,
if false, do not try to link to Producer PRODUCER_INCLUDE_DIR, where
to find the headers

$PRODUCER_DIR is an environment variable that would correspond to the
./configure --prefix=$PRODUCER_DIR used in building osg.

Created by Eric Wing.

FindProtobuf
------------

Locate and configure the Google Protocol Buffers library.

The following variables can be set and are optional:

``Protobuf_SRC_ROOT_FOLDER``
  When compiling with MSVC, if this cache variable is set
  the protobuf-default VS project build locations
  (vsprojects/Debug and vsprojects/Release
  or vsprojects/x64/Debug and vsprojects/x64/Release)
  will be searched for libraries and binaries.
``Protobuf_IMPORT_DIRS``
  List of additional directories to be searched for
  imported .proto files.
``Protobuf_DEBUG``
  Show debug messages.

Defines the following variables:

``Protobuf_FOUND``
  Found the Google Protocol Buffers library
  (libprotobuf & header files)
``Protobuf_VERSION``
  Version of package found.
``Protobuf_INCLUDE_DIRS``
  Include directories for Google Protocol Buffers
``Protobuf_LIBRARIES``
  The protobuf libraries
``Protobuf_PROTOC_LIBRARIES``
  The protoc libraries
``Protobuf_LITE_LIBRARIES``
  The protobuf-lite libraries

The following cache variables are also available to set or use:

``Protobuf_LIBRARY``
  The protobuf library
``Protobuf_PROTOC_LIBRARY``
  The protoc library
``Protobuf_INCLUDE_DIR``
  The include directory for protocol buffers
``Protobuf_PROTOC_EXECUTABLE``
  The protoc compiler
``Protobuf_LIBRARY_DEBUG``
  The protobuf library (debug)
``Protobuf_PROTOC_LIBRARY_DEBUG``
  The protoc library (debug)
``Protobuf_LITE_LIBRARY``
  The protobuf lite library
``Protobuf_LITE_LIBRARY_DEBUG``
  The protobuf lite library (debug)

Example:

 find_package(Protobuf REQUIRED)
 include_directories(${Protobuf_INCLUDE_DIRS})
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
 protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)
 protobuf_generate_python(PROTO_PY foo.proto)
 add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
 target_link_libraries(bar ${Protobuf_LIBRARIES})

.. note::
  The ``protobuf_generate_cpp`` and ``protobuf_generate_python``
  functions and ``add_executable()`` or ``add_library()``
  calls only work properly within the same directory.

.. command:: protobuf_generate_cpp

  Add custom commands to process ``.proto`` files to C++::

   protobuf_generate_cpp (<SRCS> <HDRS> [<ARGN>...])

 ``SRCS``
   Variable to define with autogenerated source files
 ``HDRS``
   Variable to define with autogenerated header files
 ``ARGN``
   ``.proto`` files

.. command:: protobuf_generate_python

  Add custom commands to process ``.proto`` files to Python::

   protobuf_generate_python (<PY> [<ARGN>...])

 ``PY``
   Variable to define with autogenerated Python files
 ``ARGN``
   ``.proto`` filess

FindPythonInterp
----------------

Find python interpreter

This module finds if Python interpreter is installed and determines
where the executables are.  This code sets the following variables:

::

 PYTHONINTERP_FOUND         - Was the Python executable found
 PYTHON_EXECUTABLE          - path to the Python interpreter

::

 PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2
 PYTHON_VERSION_MAJOR       - Python major version found e.g. 2
 PYTHON_VERSION_MINOR       - Python minor version found e.g. 5
 PYTHON_VERSION_PATCH       - Python patch version found e.g. 2

The Python_ADDITIONAL_VERSIONS variable can be used to specify a list
of version numbers that should be taken into account when searching
for Python.  You need to set this variable before calling
find_package(PythonInterp).

If calling both ``find_package(PythonInterp)`` and
``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to
get the currently active Python version by default with a consistent version
of PYTHON_LIBRARIES.

FindPythonLibs
--------------

Find python libraries

This module finds if Python is installed and determines where the
include files and libraries are.  It also determines what the name of
the library is.  This code sets the following variables:

::

 PYTHONLIBS_FOUND           - have the Python libs been found
 PYTHON_LIBRARIES           - path to the python library
 PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)
 PYTHON_INCLUDE_DIRS        - path to where Python.h is found
 PYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)
 PYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)

The Python_ADDITIONAL_VERSIONS variable can be used to specify a list
of version numbers that should be taken into account when searching
for Python.  You need to set this variable before calling
find_package(PythonLibs).

If you'd like to specify the installation of Python to use, you should
modify the following cache variables:

::

 PYTHON_LIBRARY             - path to the python library
 PYTHON_INCLUDE_DIR         - path to where Python.h is found

If calling both ``find_package(PythonInterp)`` and
``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to
get the currently active Python version by default with a consistent version
of PYTHON_LIBRARIES.

FindQt3
-------

Locate Qt include paths and libraries

This module defines:

::

 QT_INCLUDE_DIR    - where to find qt.h, etc.
 QT_LIBRARIES      - the libraries to link against to use Qt.
 QT_DEFINITIONS    - definitions to use when
                     compiling code that uses Qt.
 QT_FOUND          - If false, don't try to use Qt.
 QT_VERSION_STRING - the version of Qt found

If you need the multithreaded version of Qt, set QT_MT_REQUIRED to
TRUE

Also defined, but not for general use are:

::

 QT_MOC_EXECUTABLE, where to find the moc tool.
 QT_UIC_EXECUTABLE, where to find the uic tool.
 QT_QT_LIBRARY, where to find the Qt library.
 QT_QTMAIN_LIBRARY, where to find the qtmain
  library. This is only required by Qt3 on Windows.

FindQt4
-------

Finding and Using Qt4
^^^^^^^^^^^^^^^^^^^^^

This module can be used to find Qt4.  The most important issue is that
the Qt4 qmake is available via the system path.  This qmake is then
used to detect basically everything else.  This module defines a
number of ``IMPORTED`` targets, macros and variables.

Typical usage could be something like:

 set(CMAKE_AUTOMOC ON)
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 find_package(Qt4 4.4.3 REQUIRED QtGui QtXml)
 add_executable(myexe main.cpp)
 target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)

.. note::

 When using ``IMPORTED`` targets, the qtmain.lib static library is
 automatically linked on Windows for ``WIN32``
 executables. To disable that globally, set the
 ``QT4_NO_LINK_QTMAIN`` variable before finding Qt4. To disable that
 for a particular executable, set the ``QT4_NO_LINK_QTMAIN`` target
 property to ``TRUE`` on the executable.

Qt Build Tools
^^^^^^^^^^^^^^

Qt relies on some bundled tools for code generation, such as ``moc`` for
meta-object code generation,``uic`` for widget layout and population,
and ``rcc`` for virtual filesystem content generation.  These tools may be
automatically invoked by ``cmake(1)`` if the appropriate conditions
are met.  See ``cmake-qt(7)`` for more.

Qt Macros
^^^^^^^^^

In some cases it can be necessary or useful to invoke the Qt build tools in a
more-manual way. Several macros are available to add targets for such uses.

::

 macro QT4_WRAP_CPP(outfiles inputfile ... [TARGET tgt] OPTIONS ...)
       create moc code from a list of files containing Qt class with
       the Q_OBJECT declaration.  Per-directory preprocessor definitions
       are also added.  If the <tgt> is specified, the
       INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from
       the <tgt> are passed to moc.  Options may be given to moc, such as
       those found when executing "moc -help".

::

 macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)
       create code from a list of Qt designer ui files.
       Options may be given to uic, such as those found
       when executing "uic -help"

::

 macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)
       create code from a list of Qt resource files.
       Options may be given to rcc, such as those found
       when executing "rcc -help"

::

 macro QT4_GENERATE_MOC(inputfile outputfile [TARGET tgt])
       creates a rule to run moc on infile and create outfile.
       Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.
       because you need a custom filename for the moc file or something
       similar.  If the <tgt> is specified, the
       INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from
       the <tgt> are passed to moc.

::

 macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)
       Create the interface header and implementation files with the
       given basename from the given interface xml file and add it to
       the list of sources.

       You can pass additional parameters to the qdbusxml2cpp call by setting
       properties on the input file:

       INCLUDE the given file will be included in the generate interface header

       CLASSNAME the generated class is named accordingly

       NO_NAMESPACE the generated class is not wrapped in a namespace

::

 macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )
       Create the interface header and implementation files
       for all listed interface xml files.
       The basename will be automatically determined from the name
       of the xml file.

       The source file properties described for
       QT4_ADD_DBUS_INTERFACE also apply here.

::

 macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname
                            [basename] [classname])
       create a dbus adaptor (header and implementation file) from the xml file
       describing the interface, and add it to the list of sources. The adaptor
       forwards the calls to a parent class, defined in parentheader and named
       parentclassname. The name of the generated files will be
       <basename>adaptor.{cpp,h} where basename defaults to the basename of the
       xml file.
       If <classname> is provided, then it will be used as the classname of the
       adaptor itself.

::

 macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)
       generate the xml interface file from the given header.
       If the optional argument interfacename is omitted, the name of the
       interface file is constructed from the basename of the header with
       the suffix .xml appended.
       Options may be given to qdbuscpp2xml, such as those found when
       executing "qdbuscpp2xml --help"

::

 macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...
                               ts_files ... OPTIONS ...)
       out: qm_files
       in:  directories sources ts_files
       options: flags to pass to lupdate, such as -extensions to specify
       extensions for a directory scan.
       generates commands to create .ts (vie lupdate) and .qm
       (via lrelease) - files from directories and/or sources. The ts files are
       created and/or updated in the source tree (unless given with full paths).
       The qm files are generated in the build tree.
       Updating the translations can be done by adding the qm_files
       to the source list of your library/executable, so they are
       always updated, or by adding a custom target to control when
       they get updated/generated.

::

 macro QT4_ADD_TRANSLATION( qm_files ts_files ... )
       out: qm_files
       in:  ts_files
       generates commands to create .qm from .ts - files. The generated
       filenames can be found in qm_files. The ts_files
       must exist and are not updated in any way.

::

 macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... [TARGET tgt])
       The qt4_automoc macro is obsolete.  Use the CMAKE_AUTOMOC feature instead.
       This macro is still experimental.
       It can be used to have moc automatically handled.
       So if you have the files foo.h and foo.cpp, and in foo.h a
       a class uses the Q_OBJECT macro, moc has to run on it. If you don't
       want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert
       #include "foo.moc"
       in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will
       scan all listed files at cmake-time for such included moc files and if it
       finds them cause a rule to be generated to run moc at build time on the
       accompanying header file foo.h.
       If a source file has the SKIP_AUTOMOC property set it will be ignored by
       this macro.
       If the <tgt> is specified, the INTERFACE_INCLUDE_DIRECTORIES and
       INTERFACE_COMPILE_DEFINITIONS from the <tgt> are passed to moc.

::

 function QT4_USE_MODULES( target [link_type] modules...)
        This function is obsolete. Use target_link_libraries with IMPORTED targets
        instead.
        Make <target> use the <modules> from Qt. Using a Qt module means
        to link to the library, add the relevant include directories for the
        module, and add the relevant compiler defines for using the module.
        Modules are roughly equivalent to components of Qt4, so usage would be
        something like:
         qt4_use_modules(myexe Core Gui Declarative)
        to use QtCore, QtGui and QtDeclarative. The optional <link_type> argument
        can be specified as either LINK_PUBLIC or LINK_PRIVATE to specify the
        same argument to the target_link_libraries call.

IMPORTED Targets
^^^^^^^^^^^^^^^^

A particular Qt library may be used by using the corresponding
``IMPORTED`` target with the ``target_link_libraries()``
command:

 target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)

Using a target in this way causes :cmake(1)` to use the appropriate include
directories and compile definitions for the target when compiling ``myexe``.

Targets are aware of their dependencies, so for example it is not necessary
to list ``Qt4::QtCore`` if another Qt library is listed, and it is not
necessary to list ``Qt4::QtGui`` if ``Qt4::QtDeclarative`` is listed.
Targets may be tested for existence in the usual way with the
``if(TARGET)`` command.

The Qt toolkit may contain both debug and release libraries.
``cmake(1)`` will choose the appropriate version based on the build
configuration.

``Qt4::QtCore``
 The QtCore target
``Qt4::QtGui``
 The QtGui target
``Qt4::Qt3Support``
 The Qt3Support target
``Qt4::QtAssistant``
 The QtAssistant target
``Qt4::QtAssistantClient``
 The QtAssistantClient target
``Qt4::QAxContainer``
 The QAxContainer target (Windows only)
``Qt4::QAxServer``
 The QAxServer target (Windows only)
``Qt4::QtDBus``
 The QtDBus target
``Qt4::QtDeclarative``
 The QtDeclarative target
``Qt4::QtDesigner``
 The QtDesigner target
``Qt4::QtDesignerComponents``
 The QtDesignerComponents target
``Qt4::QtHelp``
 The QtHelp target
``Qt4::QtMotif``
 The QtMotif target
``Qt4::QtMultimedia``
 The QtMultimedia target
``Qt4::QtNetwork``
 The QtNetwork target
``Qt4::QtNsPLugin``
 The QtNsPLugin target
``Qt4::QtOpenGL``
 The QtOpenGL target
``Qt4::QtScript``
 The QtScript target
``Qt4::QtScriptTools``
 The QtScriptTools target
``Qt4::QtSql``
 The QtSql target
``Qt4::QtSvg``
 The QtSvg target
``Qt4::QtTest``
 The QtTest target
``Qt4::QtUiTools``
 The QtUiTools target
``Qt4::QtWebKit``
 The QtWebKit target
``Qt4::QtXml``
 The QtXml target
``Qt4::QtXmlPatterns``
 The QtXmlPatterns target
``Qt4::phonon``
 The phonon target

Result Variables
^^^^^^^^^^^^^^^^

  Below is a detailed list of variables that FindQt4.cmake sets.

``Qt4_FOUND``
 If false, don't try to use Qt 4.
``QT_FOUND``
 If false, don't try to use Qt. This variable is for compatibility only.
``QT4_FOUND``
 If false, don't try to use Qt 4. This variable is for compatibility only.
``QT_VERSION_MAJOR``
 The major version of Qt found.
``QT_VERSION_MINOR``
 The minor version of Qt found.
``QT_VERSION_PATCH``
 The patch version of Qt found.

FindQt
------

Searches for all installed versions of Qt.

This should only be used if your project can work with multiple
versions of Qt.  If not, you should just directly use FindQt4 or
FindQt3.  If multiple versions of Qt are found on the machine, then
The user must set the option DESIRED_QT_VERSION to the version they
want to use.  If only one version of qt is found on the machine, then
the DESIRED_QT_VERSION is set to that version and the matching FindQt3
or FindQt4 module is included.  Once the user sets DESIRED_QT_VERSION,
then the FindQt3 or FindQt4 module is included.

This module can only detect and switch between Qt versions 3 and 4. It
cannot handle Qt5 or any later versions.

::

 QT_REQUIRED if this is set to TRUE then if CMake can
             not find Qt4 or Qt3 an error is raised
             and a message is sent to the user.

::

 DESIRED_QT_VERSION OPTION is created
 QT4_INSTALLED is set to TRUE if qt4 is found.
 QT3_INSTALLED is set to TRUE if qt3 is found.

FindQuickTime
-------------



Locate QuickTime This module defines QUICKTIME_LIBRARY
QUICKTIME_FOUND, if false, do not try to link to gdal
QUICKTIME_INCLUDE_DIR, where to find the headers

$QUICKTIME_DIR is an environment variable that would correspond to the
./configure --prefix=$QUICKTIME_DIR

Created by Eric Wing.

FindRTI
-------

Try to find M&S HLA RTI libraries

This module finds if any HLA RTI is installed and locates the standard
RTI include files and libraries.

RTI is a simulation infrastructure standardized by IEEE and SISO.  It
has a well defined C++ API that assures that simulation applications
are independent on a particular RTI implementation.

::

 http://en.wikipedia.org/wiki/Run-Time_Infrastructure_(simulation)

This code sets the following variables:

::

 RTI_INCLUDE_DIR = the directory where RTI includes file are found
 RTI_LIBRARIES = The libraries to link against to use RTI
 RTI_DEFINITIONS = -DRTI_USES_STD_FSTREAM
 RTI_FOUND = Set to FALSE if any HLA RTI was not found

Report problems to <certi-devel@nongnu.org>

FindRuby
--------

Find Ruby

This module finds if Ruby is installed and determines where the
include files and libraries are.  Ruby 1.8, 1.9, 2.0 and 2.1 are
supported.

The minimum required version of Ruby can be specified using the
standard syntax, e.g.  find_package(Ruby 1.8)

It also determines what the name of the library is.  This code sets
the following variables:

``RUBY_EXECUTABLE``
  full path to the ruby binary
``RUBY_INCLUDE_DIRS``
  include dirs to be used when using the ruby library
``RUBY_LIBRARY``
  full path to the ruby library
``RUBY_VERSION``
  the version of ruby which was found, e.g. "1.8.7"
``RUBY_FOUND``
  set to true if ruby ws found successfully

Also:

``RUBY_INCLUDE_PATH``
  same as RUBY_INCLUDE_DIRS, only provided for compatibility reasons, don't use it

FindSDL_image
-------------

Locate SDL_image library

This module defines:

::

 SDL_IMAGE_LIBRARIES, the name of the library to link against
 SDL_IMAGE_INCLUDE_DIRS, where to find the headers
 SDL_IMAGE_FOUND, if false, do not try to link against
 SDL_IMAGE_VERSION_STRING - human-readable string containing the
                            version of SDL_image

For backward compatibility the following variables are also set:

::

 SDLIMAGE_LIBRARY (same value as SDL_IMAGE_LIBRARIES)
 SDLIMAGE_INCLUDE_DIR (same value as SDL_IMAGE_INCLUDE_DIRS)
 SDLIMAGE_FOUND (same value as SDL_IMAGE_FOUND)

$SDLDIR is an environment variable that would correspond to the
./configure --prefix=$SDLDIR used in building SDL.

Created by Eric Wing.  This was influenced by the FindSDL.cmake
module, but with modifications to recognize OS X frameworks and
additional Unix paths (FreeBSD, etc).

FindSDL_mixer
-------------

Locate SDL_mixer library

This module defines:

::

 SDL_MIXER_LIBRARIES, the name of the library to link against
 SDL_MIXER_INCLUDE_DIRS, where to find the headers
 SDL_MIXER_FOUND, if false, do not try to link against
 SDL_MIXER_VERSION_STRING - human-readable string containing the
                            version of SDL_mixer

For backward compatibility the following variables are also set:

::

 SDLMIXER_LIBRARY (same value as SDL_MIXER_LIBRARIES)
 SDLMIXER_INCLUDE_DIR (same value as SDL_MIXER_INCLUDE_DIRS)
 SDLMIXER_FOUND (same value as SDL_MIXER_FOUND)

$SDLDIR is an environment variable that would correspond to the
./configure --prefix=$SDLDIR used in building SDL.

Created by Eric Wing.  This was influenced by the FindSDL.cmake
module, but with modifications to recognize OS X frameworks and
additional Unix paths (FreeBSD, etc).

FindSDL_net
-----------

Locate SDL_net library

This module defines:

::

 SDL_NET_LIBRARIES, the name of the library to link against
 SDL_NET_INCLUDE_DIRS, where to find the headers
 SDL_NET_FOUND, if false, do not try to link against
 SDL_NET_VERSION_STRING - human-readable string containing the version of SDL_net

For backward compatibility the following variables are also set:

::

 SDLNET_LIBRARY (same value as SDL_NET_LIBRARIES)
 SDLNET_INCLUDE_DIR (same value as SDL_NET_INCLUDE_DIRS)
 SDLNET_FOUND (same value as SDL_NET_FOUND)

$SDLDIR is an environment variable that would correspond to the
./configure --prefix=$SDLDIR used in building SDL.

Created by Eric Wing.  This was influenced by the FindSDL.cmake
module, but with modifications to recognize OS X frameworks and
additional Unix paths (FreeBSD, etc).

FindSDL
-------

Locate SDL library

This module defines

::

 SDL_LIBRARY, the name of the library to link against
 SDL_FOUND, if false, do not try to link to SDL
 SDL_INCLUDE_DIR, where to find SDL.h
 SDL_VERSION_STRING, human-readable string containing the version of SDL

This module responds to the flag:

::

 SDL_BUILDING_LIBRARY
   If this is defined, then no SDL_main will be linked in because
   only applications need main().
   Otherwise, it is assumed you are building an application and this
   module will attempt to locate and set the proper link flags
   as part of the returned SDL_LIBRARY variable.

Don't forget to include SDLmain.h and SDLmain.m your project for the
OS X framework based version.  (Other versions link to -lSDLmain which
this module will try to find on your behalf.) Also for OS X, this
module will automatically add the -framework Cocoa on your behalf.



Additional Note: If you see an empty SDL_LIBRARY_TEMP in your
configuration and no SDL_LIBRARY, it means CMake did not find your SDL
library (SDL.dll, libsdl.so, SDL.framework, etc).  Set
SDL_LIBRARY_TEMP to point to your SDL library, and configure again.
Similarly, if you see an empty SDLMAIN_LIBRARY, you should set this
value as appropriate.  These values are used to generate the final
SDL_LIBRARY variable, but when these values are unset, SDL_LIBRARY
does not get created.



$SDLDIR is an environment variable that would correspond to the
./configure --prefix=$SDLDIR used in building SDL.  l.e.galup 9-20-02

Modified by Eric Wing.  Added code to assist with automated building
by using environmental variables and providing a more
controlled/consistent search behavior.  Added new modifications to
recognize OS X frameworks and additional Unix paths (FreeBSD, etc).
Also corrected the header search path to follow "proper" SDL
guidelines.  Added a search for SDLmain which is needed by some
platforms.  Added a search for threads which is needed by some
platforms.  Added needed compile switches for MinGW.

On OSX, this will prefer the Framework version (if found) over others.
People will have to manually change the cache values of SDL_LIBRARY to
override this selection or set the CMake environment
CMAKE_INCLUDE_PATH to modify the search paths.

Note that the header path has changed from SDL/SDL.h to just SDL.h
This needed to change because "proper" SDL convention is #include
"SDL.h", not <SDL/SDL.h>.  This is done for portability reasons
because not all systems place things in SDL/ (see FreeBSD).

FindSDL_sound
-------------

Locates the SDL_sound library



This module depends on SDL being found and must be called AFTER
FindSDL.cmake is called.

This module defines

::

 SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h
 SDL_SOUND_FOUND, if false, do not try to link to SDL_sound
 SDL_SOUND_LIBRARIES, this contains the list of libraries that you need
   to link against. This is a read-only variable and is marked INTERNAL.
 SDL_SOUND_EXTRAS, this is an optional variable for you to add your own
   flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.
   This is available mostly for cases this module failed to anticipate for
   and you must add additional flags. This is marked as ADVANCED.
 SDL_SOUND_VERSION_STRING, human-readable string containing the
   version of SDL_sound

This module also defines (but you shouldn't need to use directly)

::

 SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link
 against. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.

And might define the following as needed

::

 MIKMOD_LIBRARY
 MODPLUG_LIBRARY
 OGG_LIBRARY
 VORBIS_LIBRARY
 SMPEG_LIBRARY
 FLAC_LIBRARY
 SPEEX_LIBRARY

Typically, you should not use these variables directly, and you should
use SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other
audio libraries (if needed) to successfully compile on your system.

Created by Eric Wing.  This module is a bit more complicated than the
other FindSDL* family modules.  The reason is that SDL_sound can be
compiled in a large variety of different ways which are independent of
platform.  SDL_sound may dynamically link against other 3rd party
libraries to get additional codec support, such as Ogg Vorbis, SMPEG,
ModPlug, MikMod, FLAC, Speex, and potentially others.  Under some
circumstances which I don't fully understand, there seems to be a
requirement that dependent libraries of libraries you use must also be
explicitly linked against in order to successfully compile.  SDL_sound
does not currently have any system in place to know how it was
compiled.  So this CMake module does the hard work in trying to
discover which 3rd party libraries are required for building (if any).
This module uses a brute force approach to create a test program that
uses SDL_sound, and then tries to build it.  If the build fails, it
parses the error output for known symbol names to figure out which
libraries are needed.

Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that
would correspond to the ./configure --prefix=$SDLDIR used in building
SDL.

On OSX, this will prefer the Framework version (if found) over others.
People will have to manually change the cache values of SDL_LIBRARY to
override this selectionor set the CMake environment CMAKE_INCLUDE_PATH
to modify the search paths.

FindSDL_ttf
-----------

Locate SDL_ttf library

This module defines:

::

 SDL_TTF_LIBRARIES, the name of the library to link against
 SDL_TTF_INCLUDE_DIRS, where to find the headers
 SDL_TTF_FOUND, if false, do not try to link against
 SDL_TTF_VERSION_STRING - human-readable string containing the version of SDL_ttf

For backward compatibility the following variables are also set:

::

 SDLTTF_LIBRARY (same value as SDL_TTF_LIBRARIES)
 SDLTTF_INCLUDE_DIR (same value as SDL_TTF_INCLUDE_DIRS)
 SDLTTF_FOUND (same value as SDL_TTF_FOUND)

$SDLDIR is an environment variable that would correspond to the
./configure --prefix=$SDLDIR used in building SDL.

Created by Eric Wing.  This was influenced by the FindSDL.cmake
module, but with modifications to recognize OS X frameworks and
additional Unix paths (FreeBSD, etc).

FindSelfPackers
---------------

Find upx

This module looks for some executable packers (i.e.  software that
compress executables or shared libs into on-the-fly self-extracting
executables or shared libs.  Examples:

::

 UPX: http://wildsau.idv.uni-linz.ac.at/mfx/upx.html

FindSquish
----------

-- Typical Use



This module can be used to find Squish.  Currently Squish versions 3
and 4 are supported.

::

 SQUISH_FOUND                    If false, don't try to use Squish
 SQUISH_VERSION                  The full version of Squish found
 SQUISH_VERSION_MAJOR            The major version of Squish found
 SQUISH_VERSION_MINOR            The minor version of Squish found
 SQUISH_VERSION_PATCH            The patch version of Squish found

::

 SQUISH_INSTALL_DIR              The Squish installation directory
                                 (containing bin, lib, etc)
 SQUISH_SERVER_EXECUTABLE        The squishserver executable
 SQUISH_CLIENT_EXECUTABLE        The squishrunner executable

::

 SQUISH_INSTALL_DIR_FOUND        Was the install directory found?
 SQUISH_SERVER_EXECUTABLE_FOUND  Was the server executable found?
 SQUISH_CLIENT_EXECUTABLE_FOUND  Was the client executable found?

It provides the function squish_v4_add_test() for adding a squish test
to cmake using Squish 4.x:

::

 squish_v4_add_test(cmakeTestName
   AUT targetName SUITE suiteName TEST squishTestName
   [SETTINGSGROUP group] [PRE_COMMAND command] [POST_COMMAND command] )

The arguments have the following meaning:

``cmakeTestName``
  this will be used as the first argument for add_test()
``AUT targetName``
  the name of the cmake target which will be used as AUT, i.e. the
  executable which will be tested.
``SUITE suiteName``
  this is either the full path to the squish suite, or just the
  last directory of the suite, i.e. the suite name. In this case
  the CMakeLists.txt which calls squish_add_test() must be located
  in the parent directory of the suite directory.
``TEST squishTestName``
  the name of the squish test, i.e. the name of the subdirectory
  of the test inside the suite directory.
``SETTINGSGROUP group``
  if specified, the given settings group will be used for executing the test.
  If not specified, the groupname will be "CTest_<username>"
``PRE_COMMAND command``
  if specified, the given command will be executed before starting the squish test.
``POST_COMMAND command``
  same as PRE_COMMAND, but after the squish test has been executed.



::

 enable_testing()
 find_package(Squish 4.0)
 if (SQUISH_FOUND)
    squish_v4_add_test(myTestName
      AUT myApp
      SUITE ${CMAKE_SOURCE_DIR}/tests/mySuite
      TEST someSquishTest
      SETTINGSGROUP myGroup
      )
 endif ()

For users of Squish version 3.x the macro squish_v3_add_test() is
provided:

::

 squish_v3_add_test(testName applicationUnderTest testCase envVars testWrapper)
 Use this macro to add a test using Squish 3.x.

::

 enable_testing()
 find_package(Squish)
 if (SQUISH_FOUND)
   squish_v3_add_test(myTestName myApplication testCase envVars testWrapper)
 endif ()

macro SQUISH_ADD_TEST(testName applicationUnderTest testCase envVars
testWrapper)

::

 This is deprecated. Use SQUISH_V3_ADD_TEST() if you are using Squish 3.x instead.

FindSubversion
--------------

Extract information from a subversion working copy

The module defines the following variables:

::

 Subversion_SVN_EXECUTABLE - path to svn command line client
 Subversion_VERSION_SVN - version of svn command line client
 Subversion_FOUND - true if the command line client was found
 SUBVERSION_FOUND - same as Subversion_FOUND, set for compatibility reasons

The minimum required version of Subversion can be specified using the
standard syntax, e.g.  find_package(Subversion 1.4)

If the command line client executable is found two macros are defined:

::

 Subversion_WC_INFO(<dir> <var-prefix>)
 Subversion_WC_LOG(<dir> <var-prefix>)

Subversion_WC_INFO extracts information of a subversion working copy
at a given location.  This macro defines the following variables:

::

 <var-prefix>_WC_URL - url of the repository (at <dir>)
 <var-prefix>_WC_ROOT - root url of the repository
 <var-prefix>_WC_REVISION - current revision
 <var-prefix>_WC_LAST_CHANGED_AUTHOR - author of last commit
 <var-prefix>_WC_LAST_CHANGED_DATE - date of last commit
 <var-prefix>_WC_LAST_CHANGED_REV - revision of last commit
 <var-prefix>_WC_INFO - output of command `svn info <dir>'

Subversion_WC_LOG retrieves the log message of the base revision of a
subversion working copy at a given location.  This macro defines the
variable:

::

 <var-prefix>_LAST_CHANGED_LOG - last log of base revision

Example usage:

::

 find_package(Subversion)
 if(SUBVERSION_FOUND)
   Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Project)
   message("Current revision is ${Project_WC_REVISION}")
   Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)
   message("Last changed log is ${Project_LAST_CHANGED_LOG}")
 endif()

FindSWIG
--------

Find SWIG

This module finds an installed SWIG.  It sets the following variables:

::

 SWIG_FOUND - set to true if SWIG is found
 SWIG_DIR - the directory where swig is installed
 SWIG_EXECUTABLE - the path to the swig executable
 SWIG_VERSION   - the version number of the swig executable

The minimum required version of SWIG can be specified using the
standard syntax, e.g.  find_package(SWIG 1.1)

All information is collected from the SWIG_EXECUTABLE so the version
to be found can be changed from the command line by means of setting
SWIG_EXECUTABLE

FindTCL
-------

TK_INTERNAL_PATH was removed.

This module finds if Tcl is installed and determines where the include
files and libraries are.  It also determines what the name of the
library is.  This code sets the following variables:

::

 TCL_FOUND              = Tcl was found
 TK_FOUND               = Tk was found
 TCLTK_FOUND            = Tcl and Tk were found
 TCL_LIBRARY            = path to Tcl library (tcl tcl80)
 TCL_INCLUDE_PATH       = path to where tcl.h can be found
 TCL_TCLSH              = path to tclsh binary (tcl tcl80)
 TK_LIBRARY             = path to Tk library (tk tk80 etc)
 TK_INCLUDE_PATH        = path to where tk.h can be found
 TK_WISH                = full path to the wish executable

In an effort to remove some clutter and clear up some issues for
people who are not necessarily Tcl/Tk gurus/developpers, some
variables were moved or removed.  Changes compared to CMake 2.4 are:

::

 => they were only useful for people writing Tcl/Tk extensions.
 => these libs are not packaged by default with Tcl/Tk distributions.
    Even when Tcl/Tk is built from source, several flavors of debug libs
    are created and there is no real reason to pick a single one
    specifically (say, amongst tcl84g, tcl84gs, or tcl84sgx).
    Let's leave that choice to the user by allowing him to assign
    TCL_LIBRARY to any Tcl library, debug or not.
 => this ended up being only a Win32 variable, and there is a lot of
    confusion regarding the location of this file in an installed Tcl/Tk
    tree anyway (see 8.5 for example). If you need the internal path at
    this point it is safer you ask directly where the *source* tree is
    and dig from there.

FindTclsh
---------

Find tclsh

This module finds if TCL is installed and determines where the include
files and libraries are.  It also determines what the name of the
library is.  This code sets the following variables:

::

 TCLSH_FOUND = TRUE if tclsh has been found
 TCL_TCLSH = the path to the tclsh executable

In cygwin, look for the cygwin version first.  Don't look for it later
to avoid finding the cygwin version on a Win32 build.

FindTclStub
-----------

TCL_STUB_LIBRARY_DEBUG and TK_STUB_LIBRARY_DEBUG were removed.

This module finds Tcl stub libraries.  It first finds Tcl include
files and libraries by calling FindTCL.cmake.  How to Use the Tcl
Stubs Library:

::

 http://tcl.activestate.com/doc/howto/stubs.html

Using Stub Libraries:

::

 http://safari.oreilly.com/0130385603/ch48lev1sec3

This code sets the following variables:

::

 TCL_STUB_LIBRARY       = path to Tcl stub library
 TK_STUB_LIBRARY        = path to Tk stub library
 TTK_STUB_LIBRARY       = path to ttk stub library

In an effort to remove some clutter and clear up some issues for
people who are not necessarily Tcl/Tk gurus/developpers, some
variables were moved or removed.  Changes compared to CMake 2.4 are:

::

 => these libs are not packaged by default with Tcl/Tk distributions.
    Even when Tcl/Tk is built from source, several flavors of debug libs
    are created and there is no real reason to pick a single one
    specifically (say, amongst tclstub84g, tclstub84gs, or tclstub84sgx).
    Let's leave that choice to the user by allowing him to assign
    TCL_STUB_LIBRARY to any Tcl library, debug or not.

FindThreads
-----------

This module determines the thread library of the system.

The following variables are set

::

 CMAKE_THREAD_LIBS_INIT     - the thread library
 CMAKE_USE_SPROC_INIT       - are we using sproc?
 CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?
 CMAKE_USE_PTHREADS_INIT    - are we using pthreads
 CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads

The following import target is created

::

 Threads::Threads

For systems with multiple thread libraries, caller can set

::

 CMAKE_THREAD_PREFER_PTHREAD

If the use of the -pthread compiler and linker flag is preferred then the
caller can set

::

 THREADS_PREFER_PTHREAD_FLAG

Please note that the compiler flag can only be used with the imported
target. Use of both the imported target as well as this switch is highly
recommended for new code.

FindTIFF
--------

Find the TIFF library (libtiff).

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` targets:

``TIFF::TIFF``
  The TIFF library, if found.

Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``TIFF_FOUND``
  true if the TIFF headers and libraries were found
``TIFF_INCLUDE_DIR``
  the directory containing the TIFF headers
``TIFF_INCLUDE_DIRS``
  the directory containing the TIFF headers
``TIFF_LIBRARIES``
  TIFF libraries to be linked

Cache variables
^^^^^^^^^^^^^^^

The following cache variables may also be set:

``TIFF_INCLUDE_DIR``
  the directory containing the TIFF headers
``TIFF_LIBRARY``
  the path to the TIFF library

FindUnixCommands
----------------

Find Unix commands, including the ones from Cygwin

This module looks for the Unix commands bash, cp, gzip, mv, rm, and tar
and stores the result in the variables BASH, CP, GZIP, MV, RM, and TAR.

FindVTK
-------

This module no longer exists.

This module existed in versions of CMake prior to 3.1, but became
only a thin wrapper around ``find_package(VTK NO_MODULE)`` to
provide compatibility for projects using long-outdated conventions.
Now ``find_package(VTK)`` will search for ``VTKConfig.cmake``
directly.

FindWget
--------

Find wget

This module looks for wget.  This module defines the following values:

::

 WGET_EXECUTABLE: the full path to the wget tool.
 WGET_FOUND: True if wget has been found.

FindWish
--------

Find wish installation

This module finds if TCL is installed and determines where the include
files and libraries are.  It also determines what the name of the
library is.  This code sets the following variables:

::

 TK_WISH = the path to the wish executable

if UNIX is defined, then it will look for the cygwin version first

FindwxWidgets
-------------

Find a wxWidgets (a.k.a., wxWindows) installation.

This module finds if wxWidgets is installed and selects a default
configuration to use.  wxWidgets is a modular library.  To specify the
modules that you will use, you need to name them as components to the
package:

find_package(wxWidgets COMPONENTS core base ...)

There are two search branches: a windows style and a unix style.  For
windows, the following variables are searched for and set to defaults
in case of multiple choices.  Change them if the defaults are not
desired (i.e., these are the only variables you should change to
select a configuration):

::

 wxWidgets_ROOT_DIR      - Base wxWidgets directory
                           (e.g., C:/wxWidgets-2.6.3).
 wxWidgets_LIB_DIR       - Path to wxWidgets libraries
                           (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).
 wxWidgets_CONFIGURATION - Configuration to use
                           (e.g., msw, mswd, mswu, mswunivud, etc.)
 wxWidgets_EXCLUDE_COMMON_LIBRARIES
                         - Set to TRUE to exclude linking of
                           commonly required libs (e.g., png tiff
                           jpeg zlib regex expat).

For unix style it uses the wx-config utility.  You can select between
debug/release, unicode/ansi, universal/non-universal, and
static/shared in the QtDialog or ccmake interfaces by turning ON/OFF
the following variables:

::

 wxWidgets_USE_DEBUG
 wxWidgets_USE_UNICODE
 wxWidgets_USE_UNIVERSAL
 wxWidgets_USE_STATIC

There is also a wxWidgets_CONFIG_OPTIONS variable for all other
options that need to be passed to the wx-config utility.  For example,
to use the base toolkit found in the /usr/local path, set the variable
(before calling the FIND_PACKAGE command) as such:

::

 set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)

The following are set after the configuration is done for both windows
and unix style:

::

 wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.
 wxWidgets_INCLUDE_DIRS     - Include directories for WIN32
                              i.e., where to find "wx/wx.h" and
                              "wx/setup.h"; possibly empty for unices.
 wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.
 wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for
                              rpath on UNIX. Typically an empty string
                              in WIN32 environment.
 wxWidgets_DEFINITIONS      - Contains defines required to compile/link
                              against WX, e.g. WXUSINGDLL
 wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link
                              against WX debug builds, e.g. __WXDEBUG__
 wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for
                              unices, empty on WIN32. Essentially
                              "`wx-config --cxxflags`".
 wxWidgets_USE_FILE         - Convenience include file.

Sample usage:

::

 # Note that for MinGW users the order of libs is important!
 find_package(wxWidgets COMPONENTS net gl core base)
 if(wxWidgets_FOUND)
   include(${wxWidgets_USE_FILE})
   # and for each of your dependent executable/library targets:
   target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})
 endif()

If wxWidgets is required (i.e., not an optional part):

::

 find_package(wxWidgets REQUIRED net gl core base)
 include(${wxWidgets_USE_FILE})
 # and for each of your dependent executable/library targets:
 target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})

FindwxWindows
-------------

Find wxWindows (wxWidgets) installation

This module finds if wxWindows/wxWidgets is installed and determines
where the include files and libraries are.  It also determines what
the name of the library is.  Please note this file is DEPRECATED and
replaced by FindwxWidgets.cmake.  This code sets the following
variables:

::

 WXWINDOWS_FOUND     = system has WxWindows
 WXWINDOWS_LIBRARIES = path to the wxWindows libraries
                       on Unix/Linux with additional
                       linker flags from
                       "wx-config --libs"
 CMAKE_WXWINDOWS_CXX_FLAGS  = Compiler flags for wxWindows,
                              essentially "`wx-config --cxxflags`"
                              on Linux
 WXWINDOWS_INCLUDE_DIR      = where to find "wx/wx.h" and "wx/setup.h"
 WXWINDOWS_LINK_DIRECTORIES = link directories, useful for rpath on
                               Unix
 WXWINDOWS_DEFINITIONS      = extra defines

OPTIONS If you need OpenGL support please

::

 set(WXWINDOWS_USE_GL 1)

in your CMakeLists.txt *before* you include this file.

::

 HAVE_ISYSTEM      - true required to replace -I by -isystem on g++

For convenience include Use_wxWindows.cmake in your project's
CMakeLists.txt using
include(${CMAKE_CURRENT_LIST_DIR}/Use_wxWindows.cmake).

USAGE

::

 set(WXWINDOWS_USE_GL 1)
 find_package(wxWindows)

NOTES wxWidgets 2.6.x is supported for monolithic builds e.g.
compiled in wx/build/msw dir as:

::

 nmake -f makefile.vc BUILD=debug SHARED=0 USE_OPENGL=1 MONOLITHIC=1

DEPRECATED

::

 CMAKE_WX_CAN_COMPILE
 WXWINDOWS_LIBRARY
 CMAKE_WX_CXX_FLAGS
 WXWINDOWS_INCLUDE_PATH

AUTHOR Jan Woetzel <http://www.mip.informatik.uni-kiel.de/~jw>
(07/2003-01/2006)

FindXCTest
----------

Functions to help creating and executing XCTest bundles.

An XCTest bundle is a CFBundle with a special product-type
and bundle extension. The Mac Developer Library provides more
information in the `Testing with Xcode`_ document.

Module Functions
^^^^^^^^^^^^^^^^

.. command:: xctest_add_bundle

  The ``xctest_add_bundle`` function creates a XCTest bundle named
  <target> which will test the target <testee>. Supported target types
  for testee are Frameworks and App Bundles::

 xctest_add_bundle(
   <target>  # Name of the XCTest bundle
   <testee>  # Target name of the testee
   )

.. command:: xctest_add_test

  The ``xctest_add_test`` function adds an XCTest bundle to the
  project to be run by ``ctest(1)``. The test will be named
  <name> and tests <bundle>::

 xctest_add_test(
   <name>    # Test name
   <bundle>  # Target name of XCTest bundle
   )

Module Variables
^^^^^^^^^^^^^^^^

The following variables are set by including this module:

.. variable:: XCTest_FOUND

  True if the XCTest Framework and executable were found.

.. variable:: XCTest_EXECUTABLE

  The path to the xctest command line tool used to execute XCTest bundles.

.. variable:: XCTest_INCLUDE_DIRS

  The directory containing the XCTest Framework headers.

.. variable:: XCTest_LIBRARIES

  The location of the XCTest Framework.


FindXalanC
-----------

Find the Apache Xalan-C++ XSL transform processor headers and libraries.

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` targets:

``XalanC::XalanC``
  The Xalan-C++ ``xalan-c`` library, if found.

Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``XalanC_FOUND``
  true if the Xalan headers and libraries were found
``XalanC_VERSION``
  Xalan release version
``XalanC_INCLUDE_DIRS``
  the directory containing the Xalan headers; note
  ``XercesC_INCLUDE_DIRS`` is also required
``XalanC_LIBRARIES``
  Xalan libraries to be linked; note ``XercesC_LIBRARIES`` is also
  required

Cache variables
^^^^^^^^^^^^^^^

The following cache variables may also be set:

``XalanC_INCLUDE_DIR``
  the directory containing the Xalan headers
``XalanC_LIBRARY``
  the Xalan library

FindXercesC
-----------

Find the Apache Xerces-C++ validating XML parser headers and libraries.

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following ``IMPORTED`` targets:

``XercesC::XercesC``
  The Xerces-C++ ``xerces-c`` library, if found.

Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``XercesC_FOUND``
  true if the Xerces headers and libraries were found
``XercesC_VERSION``
  Xerces release version
``XercesC_INCLUDE_DIRS``
  the directory containing the Xerces headers
``XercesC_LIBRARIES``
  Xerces libraries to be linked

Cache variables
^^^^^^^^^^^^^^^

The following cache variables may also be set:

``XercesC_INCLUDE_DIR``
  the directory containing the Xerces headers
``XercesC_LIBRARY``
  the Xerces library

FindX11
-------

Find X11 installation

Try to find X11 on UNIX systems. The following values are defined

::

 X11_FOUND        - True if X11 is available
 X11_INCLUDE_DIR  - include directories to use X11
 X11_LIBRARIES    - link against these to use X11

and also the following more fine grained variables:

::

 X11_ICE_INCLUDE_PATH,          X11_ICE_LIB,        X11_ICE_FOUND
 X11_SM_INCLUDE_PATH,           X11_SM_LIB,         X11_SM_FOUND
 X11_X11_INCLUDE_PATH,          X11_X11_LIB
 X11_Xaccessrules_INCLUDE_PATH,                     X11_Xaccess_FOUND
 X11_Xaccessstr_INCLUDE_PATH,                       X11_Xaccess_FOUND
 X11_Xau_INCLUDE_PATH,          X11_Xau_LIB,        X11_Xau_FOUND
 X11_Xcomposite_INCLUDE_PATH,   X11_Xcomposite_LIB, X11_Xcomposite_FOUND
 X11_Xcursor_INCLUDE_PATH,      X11_Xcursor_LIB,    X11_Xcursor_FOUND
 X11_Xdamage_INCLUDE_PATH,      X11_Xdamage_LIB,    X11_Xdamage_FOUND
 X11_Xdmcp_INCLUDE_PATH,        X11_Xdmcp_LIB,      X11_Xdmcp_FOUND
 X11_Xext_LIB,       X11_Xext_FOUND
 X11_dpms_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_dpms_FOUND
 X11_XShm_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_XShm_FOUND
 X11_Xshape_INCLUDE_PATH,       (in X11_Xext_LIB),  X11_Xshape_FOUND
 X11_xf86misc_INCLUDE_PATH,     X11_Xxf86misc_LIB,  X11_xf86misc_FOUND
 X11_xf86vmode_INCLUDE_PATH,    X11_Xxf86vm_LIB     X11_xf86vmode_FOUND
 X11_Xfixes_INCLUDE_PATH,       X11_Xfixes_LIB,     X11_Xfixes_FOUND
 X11_Xft_INCLUDE_PATH,          X11_Xft_LIB,        X11_Xft_FOUND
 X11_Xi_INCLUDE_PATH,           X11_Xi_LIB,         X11_Xi_FOUND
 X11_Xinerama_INCLUDE_PATH,     X11_Xinerama_LIB,   X11_Xinerama_FOUND
 X11_Xinput_INCLUDE_PATH,       X11_Xinput_LIB,     X11_Xinput_FOUND
 X11_Xkb_INCLUDE_PATH,                              X11_Xkb_FOUND
 X11_Xkblib_INCLUDE_PATH,                           X11_Xkb_FOUND
 X11_Xkbfile_INCLUDE_PATH,      X11_Xkbfile_LIB,    X11_Xkbfile_FOUND
 X11_Xmu_INCLUDE_PATH,          X11_Xmu_LIB,        X11_Xmu_FOUND
 X11_Xpm_INCLUDE_PATH,          X11_Xpm_LIB,        X11_Xpm_FOUND
 X11_XTest_INCLUDE_PATH,        X11_XTest_LIB,      X11_XTest_FOUND
 X11_Xrandr_INCLUDE_PATH,       X11_Xrandr_LIB,     X11_Xrandr_FOUND
 X11_Xrender_INCLUDE_PATH,      X11_Xrender_LIB,    X11_Xrender_FOUND
 X11_Xscreensaver_INCLUDE_PATH, X11_Xscreensaver_LIB, X11_Xscreensaver_FOUND
 X11_Xt_INCLUDE_PATH,           X11_Xt_LIB,         X11_Xt_FOUND
 X11_Xutil_INCLUDE_PATH,                            X11_Xutil_FOUND
 X11_Xv_INCLUDE_PATH,           X11_Xv_LIB,         X11_Xv_FOUND
 X11_XSync_INCLUDE_PATH,        (in X11_Xext_LIB),  X11_XSync_FOUND

FindXMLRPC
----------

Find xmlrpc

Find the native XMLRPC headers and libraries.

::

 XMLRPC_INCLUDE_DIRS      - where to find xmlrpc.h, etc.
 XMLRPC_LIBRARIES         - List of libraries when using xmlrpc.
 XMLRPC_FOUND             - True if xmlrpc found.

XMLRPC modules may be specified as components for this find module.
Modules may be listed by running "xmlrpc-c-config".  Modules include:

::

 c++            C++ wrapper code
 libwww-client  libwww-based client
 cgi-server     CGI-based server
 abyss-server   ABYSS-based server

Typical usage:

::

 find_package(XMLRPC REQUIRED libwww-client)

FindZLIB
--------

Find the native ZLIB includes and library.

IMPORTED Targets
^^^^^^^^^^^^^^^^

This module defines ``IMPORTED`` target ``ZLIB::ZLIB``, if
ZLIB has been found.

Result Variables
^^^^^^^^^^^^^^^^

This module defines the following variables:

::

 ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.
 ZLIB_LIBRARIES      - List of libraries when using zlib.
 ZLIB_FOUND          - True if zlib found.

::

 ZLIB_VERSION_STRING - The version of zlib found (x.y.z)
 ZLIB_VERSION_MAJOR  - The major version of zlib
 ZLIB_VERSION_MINOR  - The minor version of zlib
 ZLIB_VERSION_PATCH  - The patch version of zlib
 ZLIB_VERSION_TWEAK  - The tweak version of zlib

Backward Compatibility
^^^^^^^^^^^^^^^^^^^^^^

The following variable are provided for backward compatibility

::

 ZLIB_MAJOR_VERSION  - The major version of zlib
 ZLIB_MINOR_VERSION  - The minor version of zlib
 ZLIB_PATCH_VERSION  - The patch version of zlib

Hints
^^^^^

A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this
module where to look.

FortranCInterface
-----------------

Fortran/C Interface Detection

This module automatically detects the API by which C and Fortran
languages interact.

Module Variables
^^^^^^^^^^^^^^^^

Variables that indicate if the mangling is found:

``FortranCInterface_GLOBAL_FOUND``
  Global subroutines and functions.

``FortranCInterface_MODULE_FOUND``
  Module subroutines and functions (declared by "MODULE PROCEDURE").

This module also provides the following variables to specify
the detected mangling, though a typical use case does not need
to reference them and can use the `Module Functions`_ below.

``FortranCInterface_GLOBAL_PREFIX``
  Prefix for a global symbol without an underscore.

``FortranCInterface_GLOBAL_SUFFIX``
  Suffix for a global symbol without an underscore.

``FortranCInterface_GLOBAL_CASE``
  The case for a global symbol without an underscore,
  either ``UPPER`` or ``LOWER``.

``FortranCInterface_GLOBAL__PREFIX``
  Prefix for a global symbol with an underscore.

``FortranCInterface_GLOBAL__SUFFIX``
  Suffix for a global symbol with an underscore.

``FortranCInterface_GLOBAL__CASE``
  The case for a global symbol with an underscore,
  either ``UPPER`` or ``LOWER``.

``FortranCInterface_MODULE_PREFIX``
  Prefix for a module symbol without an underscore.

``FortranCInterface_MODULE_MIDDLE``
  Middle of a module symbol without an underscore that appears
  between the name of the module and the name of the symbol.

``FortranCInterface_MODULE_SUFFIX``
  Suffix for a module symbol without an underscore.

``FortranCInterface_MODULE_CASE``
  The case for a module symbol without an underscore,
  either ``UPPER`` or ``LOWER``.

``FortranCInterface_MODULE__PREFIX``
  Prefix for a module symbol with an underscore.

``FortranCInterface_MODULE__MIDDLE``
  Middle of a module symbol with an underscore that appears
  between the name of the module and the name of the symbol.

``FortranCInterface_MODULE__SUFFIX``
  Suffix for a module symbol with an underscore.

``FortranCInterface_MODULE__CASE``
  The case for a module symbol with an underscore,
  either ``UPPER`` or ``LOWER``.

Module Functions
^^^^^^^^^^^^^^^^

.. command:: FortranCInterface_HEADER

  The ``FortranCInterface_HEADER`` function is provided to generate a
  C header file containing macros to mangle symbol names::

   FortranCInterface_HEADER(<file>
                            [MACRO_NAMESPACE <macro-ns>]
                            [SYMBOL_NAMESPACE <ns>]
                            [SYMBOLS [<module>:]<function> ...])

 It generates in ``<file>`` definitions of the following macros::

    #define FortranCInterface_GLOBAL (name,NAME) ...
    #define FortranCInterface_GLOBAL_(name,NAME) ...
    #define FortranCInterface_MODULE (mod,name, MOD,NAME) ...
    #define FortranCInterface_MODULE_(mod,name, MOD,NAME) ...

 These macros mangle four categories of Fortran symbols, respectively:

 * Global symbols without '_': ``call mysub()``
 * Global symbols with '_'   : ``call my_sub()``
 * Module symbols without '_': ``use mymod; call mysub()``
 * Module symbols with '_'   : ``use mymod; call my_sub()``

 If mangling for a category is not known, its macro is left undefined.
 All macros require raw names in both lower case and upper case.

 The options are:

 ``MACRO_NAMESPACE``
   Replace the default ``FortranCInterface_`` prefix with a given
   namespace ``<macro-ns>``.

 ``SYMBOLS``
   List symbols to mangle automatically with C preprocessor definitions::

     <function>          ==> #define <ns><function> ...
     <module>:<function> ==> #define <ns><module>_<function> ...

   If the mangling for some symbol is not known then no preprocessor
   definition is created, and a warning is displayed.

 ``SYMBOL_NAMESPACE``
   Prefix all preprocessor definitions generated by the ``SYMBOLS``
   option with a given namespace ``<ns>``.

.. command:: FortranCInterface_VERIFY

  The ``FortranCInterface_VERIFY`` function is provided to verify
  that the Fortran and C/C++ compilers work together::

   FortranCInterface_VERIFY([CXX] [QUIET])

 It tests whether a simple test executable using Fortran and C (and C++
 when the CXX option is given) compiles and links successfully.  The
 result is stored in the cache entry ``FortranCInterface_VERIFIED_C``
 (or ``FortranCInterface_VERIFIED_CXX`` if ``CXX`` is given) as a boolean.
 If the check fails and ``QUIET`` is not given the function terminates with a
 fatal error message describing the problem.  The purpose of this check
 is to stop a build early for incompatible compiler combinations.  The
 test is built in the ``Release`` configuration.

Example Usage
^^^^^^^^^^^^^

 include(FortranCInterface)
 FortranCInterface_HEADER(FC.h MACRO_NAMESPACE "FC_")

This creates a "FC.h" header that defines mangling macros ``FC_GLOBAL()``,
``FC_GLOBAL_()``, ``FC_MODULE()``, and ``FC_MODULE_()``.

 include(FortranCInterface)
 FortranCInterface_HEADER(FCMangle.h
                          MACRO_NAMESPACE "FC_"
                          SYMBOL_NAMESPACE "FC_"
                          SYMBOLS mysub mymod:my_sub)

This creates a "FCMangle.h" header that defines the same ``FC_*()``
mangling macros as the previous example plus preprocessor symbols
``FC_mysub`` and ``FC_mymod_my_sub``.

Additional Manglings
^^^^^^^^^^^^^^^^^^^^

FortranCInterface is aware of possible ``GLOBAL`` and ``MODULE`` manglings
for many Fortran compilers, but it also provides an interface to specify
new possible manglings.  Set the variables::

 FortranCInterface_GLOBAL_SYMBOLS
 FortranCInterface_MODULE_SYMBOLS

before including FortranCInterface to specify manglings of the symbols
``MySub``, ``My_Sub``, ``MyModule:MySub``, and ``My_Module:My_Sub``.
For example, the code:

 set(FortranCInterface_GLOBAL_SYMBOLS mysub_ my_sub__ MYSUB_)
   #                                  ^^^^^  ^^^^^^   ^^^^^
 set(FortranCInterface_MODULE_SYMBOLS
     __mymodule_MOD_mysub __my_module_MOD_my_sub)
   #   ^^^^^^^^     ^^^^^   ^^^^^^^^^     ^^^^^^
 include(FortranCInterface)

tells FortranCInterface to try given ``GLOBAL`` and ``MODULE`` manglings.
(The carets point at raw symbol names for clarity in this example but
are not needed.)

GenerateExportHeader
--------------------

Function for generation of export macros for libraries

This module provides the function GENERATE_EXPORT_HEADER().

The ``GENERATE_EXPORT_HEADER`` function can be used to generate a file
suitable for preprocessor inclusion which contains EXPORT macros to be
used in library classes::

 GENERATE_EXPORT_HEADER( LIBRARY_TARGET
           [BASE_NAME <base_name>]
           [EXPORT_MACRO_NAME <export_macro_name>]
           [EXPORT_FILE_NAME <export_file_name>]
           [DEPRECATED_MACRO_NAME <deprecated_macro_name>]
           [NO_EXPORT_MACRO_NAME <no_export_macro_name>]
           [STATIC_DEFINE <static_define>]
           [NO_DEPRECATED_MACRO_NAME <no_deprecated_macro_name>]
           [DEFINE_NO_DEPRECATED]
           [PREFIX_NAME <prefix_name>]
 )

The target properties ``CXX_VISIBILITY_PRESET <<LANG>_VISIBILITY_PRESET>``
and ``VISIBILITY_INLINES_HIDDEN`` can be used to add the appropriate
compile flags for targets.  See the documentation of those target properties,
and the convenience variables
``CMAKE_CXX_VISIBILITY_PRESET`` and
``CMAKE_VISIBILITY_INLINES_HIDDEN``.

By default ``GENERATE_EXPORT_HEADER()`` generates macro names in a file
name determined by the name of the library.  This means that in the
simplest case, users of ``GenerateExportHeader`` will be equivalent to:

 set(CMAKE_CXX_VISIBILITY_PRESET hidden)
 set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
 add_library(somelib someclass.cpp)
 generate_export_header(somelib)
 install(TARGETS somelib DESTINATION ${LIBRARY_INSTALL_DIR})
 install(FILES
  someclass.h
  ${PROJECT_BINARY_DIR}/somelib_export.h DESTINATION ${INCLUDE_INSTALL_DIR}
 )

And in the ABI header files:

 #include "somelib_export.h"
 class SOMELIB_EXPORT SomeClass {
   ...
 };

The CMake fragment will generate a file in the
``${CMAKE_CURRENT_BINARY_DIR}`` called ``somelib_export.h`` containing the
macros ``SOMELIB_EXPORT``, ``SOMELIB_NO_EXPORT``, ``SOMELIB_DEPRECATED``,
``SOMELIB_DEPRECATED_EXPORT`` and ``SOMELIB_DEPRECATED_NO_EXPORT``.  The
resulting file should be installed with other headers in the library.

The ``BASE_NAME`` argument can be used to override the file name and the
names used for the macros:

 add_library(somelib someclass.cpp)
 generate_export_header(somelib
   BASE_NAME other_name
 )

Generates a file called ``other_name_export.h`` containing the macros
``OTHER_NAME_EXPORT``, ``OTHER_NAME_NO_EXPORT`` and ``OTHER_NAME_DEPRECATED``
etc.

The ``BASE_NAME`` may be overridden by specifiying other options in the
function.  For example:

 add_library(somelib someclass.cpp)
 generate_export_header(somelib
   EXPORT_MACRO_NAME OTHER_NAME_EXPORT
 )

creates the macro ``OTHER_NAME_EXPORT`` instead of ``SOMELIB_EXPORT``, but
other macros and the generated file name is as default:

 add_library(somelib someclass.cpp)
 generate_export_header(somelib
   DEPRECATED_MACRO_NAME KDE_DEPRECATED
 )

creates the macro ``KDE_DEPRECATED`` instead of ``SOMELIB_DEPRECATED``.

If ``LIBRARY_TARGET`` is a static library, macros are defined without
values.

If the same sources are used to create both a shared and a static
library, the uppercased symbol ``${BASE_NAME}_STATIC_DEFINE`` should be
used when building the static library:

 add_library(shared_variant SHARED ${lib_SRCS})
 add_library(static_variant ${lib_SRCS})
 generate_export_header(shared_variant BASE_NAME libshared_and_static)
 set_target_properties(static_variant PROPERTIES
   COMPILE_FLAGS -DLIBSHARED_AND_STATIC_STATIC_DEFINE)

This will cause the export macros to expand to nothing when building
the static library.

If ``DEFINE_NO_DEPRECATED`` is specified, then a macro
``${BASE_NAME}_NO_DEPRECATED`` will be defined This macro can be used to
remove deprecated code from preprocessor output:

 option(EXCLUDE_DEPRECATED "Exclude deprecated parts of the library" FALSE)
 if (EXCLUDE_DEPRECATED)
   set(NO_BUILD_DEPRECATED DEFINE_NO_DEPRECATED)
 endif()
 generate_export_header(somelib ${NO_BUILD_DEPRECATED})

And then in somelib:

 class SOMELIB_EXPORT SomeClass
 {
 public:
 #ifndef SOMELIB_NO_DEPRECATED
   SOMELIB_DEPRECATED void oldMethod();
 #endif
 };

 #ifndef SOMELIB_NO_DEPRECATED
 void SomeClass::oldMethod() {  }
 #endif

If ``PREFIX_NAME`` is specified, the argument will be used as a prefix to
all generated macros.

For example:

 generate_export_header(somelib PREFIX_NAME VTK_)

Generates the macros ``VTK_SOMELIB_EXPORT`` etc.

::

 ADD_COMPILER_EXPORT_FLAGS( [<output_variable>] )

The ``ADD_COMPILER_EXPORT_FLAGS`` function adds ``-fvisibility=hidden`` to
``CMAKE_CXX_FLAGS`` if supported, and is a no-op
on Windows which does not need extra compiler flags for exporting support.
You may optionally pass a single argument to ``ADD_COMPILER_EXPORT_FLAGS``
that will be populated with the ``CXX_FLAGS`` required to enable visibility
support for the compiler/architecture in use.

This function is deprecated.  Set the target properties
``CXX_VISIBILITY_PRESET <<LANG>_VISIBILITY_PRESET>`` and
``VISIBILITY_INLINES_HIDDEN`` instead.

GetPrerequisites
----------------

Functions to analyze and list executable file prerequisites.

This module provides functions to list the .dll, .dylib or .so files
that an executable or shared library file depends on.  (Its
prerequisites.)

It uses various tools to obtain the list of required shared library
files:

::

 dumpbin (Windows)
 objdump (MinGW on Windows)
 ldd (Linux/Unix)
 otool (Mac OSX)

The following functions are provided by this module:

::

 get_prerequisites
 list_prerequisites
 list_prerequisites_by_glob
 gp_append_unique
 is_file_executable
 gp_item_default_embedded_path
   (projects can override with gp_item_default_embedded_path_override)
 gp_resolve_item
   (projects can override with gp_resolve_item_override)
 gp_resolved_file_type
   (projects can override with gp_resolved_file_type_override)
 gp_file_type

Requires CMake 2.6 or greater because it uses function, break, return
and PARENT_SCOPE.

::

 GET_PREREQUISITES(<target> <prerequisites_var> <exclude_system> <recurse>
                   <exepath> <dirs> [<rpaths>])

Get the list of shared library files required by <target>.  The list
in the variable named <prerequisites_var> should be empty on first
entry to this function.  On exit, <prerequisites_var> will contain the
list of required shared library files.

<target> is the full path to an executable file.  <prerequisites_var>
is the name of a CMake variable to contain the results.
<exclude_system> must be 0 or 1 indicating whether to include or
exclude "system" prerequisites.  If <recurse> is set to 1 all
prerequisites will be found recursively, if set to 0 only direct
prerequisites are listed.  <exepath> is the path to the top level
executable used for @executable_path replacment on the Mac.  <dirs> is
a list of paths where libraries might be found: these paths are
searched first when a target without any path info is given.  Then
standard system locations are also searched: PATH, Framework
locations, /usr/lib...

::

 LIST_PREREQUISITES(<target> [<recurse> [<exclude_system> [<verbose>]]])

Print a message listing the prerequisites of <target>.

<target> is the name of a shared library or executable target or the
full path to a shared library or executable file.  If <recurse> is set
to 1 all prerequisites will be found recursively, if set to 0 only
direct prerequisites are listed.  <exclude_system> must be 0 or 1
indicating whether to include or exclude "system" prerequisites.  With
<verbose> set to 0 only the full path names of the prerequisites are
printed, set to 1 extra informatin will be displayed.

::

 LIST_PREREQUISITES_BY_GLOB(<glob_arg> <glob_exp>)

Print the prerequisites of shared library and executable files
matching a globbing pattern.  <glob_arg> is GLOB or GLOB_RECURSE and
<glob_exp> is a globbing expression used with "file(GLOB" or
"file(GLOB_RECURSE" to retrieve a list of matching files.  If a
matching file is executable, its prerequisites are listed.

Any additional (optional) arguments provided are passed along as the
optional arguments to the list_prerequisites calls.

::

 GP_APPEND_UNIQUE(<list_var> <value>)

Append <value> to the list variable <list_var> only if the value is
not already in the list.

::

 IS_FILE_EXECUTABLE(<file> <result_var>)

Return 1 in <result_var> if <file> is a binary executable, 0
otherwise.

::

 GP_ITEM_DEFAULT_EMBEDDED_PATH(<item> <default_embedded_path_var>)

Return the path that others should refer to the item by when the item
is embedded inside a bundle.

Override on a per-project basis by providing a project-specific
gp_item_default_embedded_path_override function.

::

 GP_RESOLVE_ITEM(<context> <item> <exepath> <dirs> <resolved_item_var>
                 [<rpaths>])

Resolve an item into an existing full path file.

Override on a per-project basis by providing a project-specific
gp_resolve_item_override function.

::

 GP_RESOLVED_FILE_TYPE(<original_file> <file> <exepath> <dirs> <type_var>
                       [<rpaths>])

Return the type of <file> with respect to <original_file>.  String
describing type of prerequisite is returned in variable named
<type_var>.

Use <exepath> and <dirs> if necessary to resolve non-absolute <file>
values -- but only for non-embedded items.

Possible types are:

::

 system
 local
 embedded
 other

Override on a per-project basis by providing a project-specific
gp_resolved_file_type_override function.

::

 GP_FILE_TYPE(<original_file> <file> <type_var>)

Return the type of <file> with respect to <original_file>.  String
describing type of prerequisite is returned in variable named
<type_var>.

Possible types are:

::

 system
 local
 embedded
 other

GNUInstallDirs
--------------

Define GNU standard installation directories

Provides install directory variables as defined by the
`GNU Coding Standards`_.

Result Variables
^^^^^^^^^^^^^^^^

Inclusion of this module defines the following variables:

``CMAKE_INSTALL_<dir>``

  Destination for files of a given type.  This value may be passed to
  the ``DESTINATION`` options of ``install()`` commands for the
  corresponding file type.

``CMAKE_INSTALL_FULL_<dir>``

  The absolute path generated from the corresponding ``CMAKE_INSTALL_<dir>``
  value.  If the value is not already an absolute path, an absolute path
  is constructed typically by prepending the value of the
  ``CMAKE_INSTALL_PREFIX`` variable.  However, there are some
  `special cases`_ as documented below.

where ``<dir>`` is one of:

``BINDIR``
  user executables (``bin``)
``SBINDIR``
  system admin executables (``sbin``)
``LIBEXECDIR``
  program executables (``libexec``)
``SYSCONFDIR``
  read-only single-machine data (``etc``)
``SHAREDSTATEDIR``
  modifiable architecture-independent data (``com``)
``LOCALSTATEDIR``
  modifiable single-machine data (``var``)
``LIBDIR``
  object code libraries (``lib`` or ``lib64``
  or ``lib/<multiarch-tuple>`` on Debian)
``INCLUDEDIR``
  C header files (``include``)
``OLDINCLUDEDIR``
  C header files for non-gcc (``/usr/include``)
``DATAROOTDIR``
  read-only architecture-independent data root (``share``)
``DATADIR``
  read-only architecture-independent data (``DATAROOTDIR``)
``INFODIR``
  info documentation (``DATAROOTDIR/info``)
``LOCALEDIR``
  locale-dependent data (``DATAROOTDIR/locale``)
``MANDIR``
  man documentation (``DATAROOTDIR/man``)
``DOCDIR``
  documentation root (``DATAROOTDIR/doc/PROJECT_NAME``)

If the includer does not define a value the above-shown default will be
used and the value will appear in the cache for editing by the user.

Special Cases
^^^^^^^^^^^^^

The following values of ``CMAKE_INSTALL_PREFIX`` are special:

``/``

  For ``<dir>`` other than the ``SYSCONFDIR`` and ``LOCALSTATEDIR``,
  the value of ``CMAKE_INSTALL_<dir>`` is prefixed with ``usr/`` if
  it is not user-specified as an absolute path.  For example, the
  ``INCLUDEDIR`` value ``include`` becomes ``usr/include``.
  This is required by the `GNU Coding Standards`_, which state:

    When building the complete GNU system, the prefix will be empty
    and ``/usr`` will be a symbolic link to ``/``.

``/usr``

  For ``<dir>`` equal to ``SYSCONFDIR`` or ``LOCALSTATEDIR``, the
  ``CMAKE_INSTALL_FULL_<dir>`` is computed by prepending just ``/``
  to the value of ``CMAKE_INSTALL_<dir>`` if it is not user-specified
  as an absolute path.  For example, the ``SYSCONFDIR`` value ``etc``
  becomes ``/etc``.  This is required by the `GNU Coding Standards`_.

``/opt/...``

  For ``<dir>`` equal to ``SYSCONFDIR`` or ``LOCALSTATEDIR``, the
  ``CMAKE_INSTALL_FULL_<dir>`` is computed by *appending* the prefix
  to the value of ``CMAKE_INSTALL_<dir>`` if it is not user-specified
  as an absolute path.  For example, the ``SYSCONFDIR`` value ``etc``
  becomes ``/etc/opt/...``.  This is defined by the
  `Filesystem Hierarchy Standard`_.


InstallRequiredSystemLibraries
------------------------------

Include this module to search for compiler-provided system runtime
libraries and add install rules for them.  Some optional variables
may be set prior to including the module to adjust behavior:

``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS``
  Specify additional runtime libraries that may not be detected.
  After inclusion any detected libraries will be appended to this.

``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP``
  Set to TRUE to skip calling the ``install(PROGRAMS)`` command to
  allow the includer to specify its own install rule, using the value of
  ``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS`` to get the list of libraries.

``CMAKE_INSTALL_DEBUG_LIBRARIES``
  Set to TRUE to install the debug runtime libraries when available
  with MSVC tools.

``CMAKE_INSTALL_DEBUG_LIBRARIES_ONLY``
  Set to TRUE to install only the debug runtime libraries with MSVC
  tools even if the release runtime libraries are also available.

``CMAKE_INSTALL_UCRT_LIBRARIES``
  Set to TRUE to install the Windows Universal CRT libraries for
  app-local deployment (e.g. to Windows XP).  This is meaningful
  only with MSVC from Visual Studio 2015 or higher.

``CMAKE_INSTALL_MFC_LIBRARIES``
  Set to TRUE to install the MSVC MFC runtime libraries.

``CMAKE_INSTALL_OPENMP_LIBRARIES``
  Set to TRUE to install the MSVC OpenMP runtime libraries

``CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION``
  Specify the ``install(PROGRAMS)`` command ``DESTINATION``
  option.  If not specified, the default is ``bin`` on Windows
  and ``lib`` elsewhere.

``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS``
  Set to TRUE to disable warnings about required library files that
  do not exist.  (For example, Visual Studio Express editions may
  not provide the redistributable files.)

``CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT``
  Specify the ``install(PROGRAMS)`` command ``COMPONENT``
  option.  If not specified, no such option will be used.

MacroAddFileDependencies
------------------------

MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...)

Using the macro MACRO_ADD_FILE_DEPENDENCIES() is discouraged.  There
are usually better ways to specify the correct dependencies.

MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...) is just a
convenience wrapper around the OBJECT_DEPENDS source file property.
You can just use set_property(SOURCE <file> APPEND PROPERTY
OBJECT_DEPENDS depend_files) instead.

ProcessorCount
--------------

ProcessorCount(var)

Determine the number of processors/cores and save value in ${var}

Sets the variable named ${var} to the number of physical cores
available on the machine if the information can be determined.
Otherwise it is set to 0.  Currently this functionality is implemented
for AIX, cygwin, FreeBSD, HPUX, IRIX, Linux, Mac OS X, QNX, Sun and
Windows.

This function is guaranteed to return a positive integer (>=1) if it
succeeds.  It returns 0 if there's a problem determining the processor
count.

Example use, in a ctest -S dashboard script:

::

 include(ProcessorCount)
 ProcessorCount(N)
 if(NOT N EQUAL 0)
   set(CTEST_BUILD_FLAGS -j${N})
   set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})
 endif()

This function is intended to offer an approximation of the value of
the number of compute cores available on the current machine, such
that you may use that value for parallel building and parallel
testing.  It is meant to help utilize as much of the machine as seems
reasonable.  Of course, knowledge of what else might be running on the
machine simultaneously should be used when deciding whether to request
a machine's full capacity all for yourself.

SelectLibraryConfigurations
---------------------------



select_library_configurations( basename )

This macro takes a library base name as an argument, and will choose
good values for basename_LIBRARY, basename_LIBRARIES,
basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what
has been found and set.  If only basename_LIBRARY_RELEASE is defined,
basename_LIBRARY will be set to the release value, and
basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND.
If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will
take the debug value, and basename_LIBRARY_RELEASE will be set to
basename_LIBRARY_RELEASE-NOTFOUND.

If the generator supports configuration types, then basename_LIBRARY
and basename_LIBRARIES will be set with debug and optimized flags
specifying the library to be used for the given configuration.  If no
build type has been set or the generator in use does not support
configuration types, then basename_LIBRARY and basename_LIBRARIES will
take only the release value, or the debug value if the release one is
not set.

SquishTestScript
----------------





This script launches a GUI test using Squish.  You should not call the
script directly; instead, you should access it via the SQUISH_ADD_TEST
macro that is defined in FindSquish.cmake.

This script starts the Squish server, launches the test on the client,
and finally stops the squish server.  If any of these steps fail
(including if the tests do not pass) then a fatal error is raised.

TestBigEndian
-------------

Define macro to determine endian type

Check if the system is big endian or little endian

::

 TEST_BIG_ENDIAN(VARIABLE)
 VARIABLE - variable to store the result to

TestCXXAcceptsFlag
------------------

Deprecated.  See ``CheckCXXCompilerFlag``.

Check if the CXX compiler accepts a flag.

 CHECK_CXX_ACCEPTS_FLAG(<flags> <variable>)

``<flags>``
 the flags to try
``<variable>``
 variable to store the result

TestForANSIForScope
-------------------

Check for ANSI for scope support

Check if the compiler restricts the scope of variables declared in a
for-init-statement to the loop body.

::

 CMAKE_NO_ANSI_FOR_SCOPE - holds result

TestForANSIStreamHeaders
------------------------

Test for compiler support of ANSI stream headers iostream, etc.

check if the compiler supports the standard ANSI iostream header
(without the .h)

::

 CMAKE_NO_ANSI_STREAM_HEADERS - defined by the results

TestForSSTREAM
--------------

Test for compiler support of ANSI sstream header

check if the compiler supports the standard ANSI sstream header

::

 CMAKE_NO_ANSI_STRING_STREAM - defined by the results

TestForSTDNamespace
-------------------

Test for std:: namespace support

check if the compiler supports std:: on stl classes

::

 CMAKE_NO_STD_NAMESPACE - defined by the results

UseEcos
-------

This module defines variables and macros required to build eCos application.

This file contains the following macros:
ECOS_ADD_INCLUDE_DIRECTORIES() - add the eCos include dirs
ECOS_ADD_EXECUTABLE(name source1 ...  sourceN ) - create an eCos
executable ECOS_ADJUST_DIRECTORY(VAR source1 ...  sourceN ) - adjusts
the path of the source files and puts the result into VAR

Macros for selecting the toolchain: ECOS_USE_ARM_ELF_TOOLS() - enable
the ARM ELF toolchain for the directory where it is called
ECOS_USE_I386_ELF_TOOLS() - enable the i386 ELF toolchain for the
directory where it is called ECOS_USE_PPC_EABI_TOOLS() - enable the
PowerPC toolchain for the directory where it is called

It contains the following variables: ECOS_DEFINITIONS
ECOSCONFIG_EXECUTABLE ECOS_CONFIG_FILE - defaults to ecos.ecc, if your
eCos configuration file has a different name, adjust this variable for
internal use only:

::

 ECOS_ADD_TARGET_LIB

UseJavaClassFilelist
--------------------





This script create a list of compiled Java class files to be added to
a jar file.  This avoids including cmake files which get created in
the binary directory.

UseJava
-------

Use Module for Java

This file provides functions for Java.  It is assumed that
FindJava.cmake has already been loaded.  See FindJava.cmake for
information on how to load Java into your CMake project.

::

 add_jar(target_name
         [SOURCES] source1 [source2 ...] [resource1 ...]
         [INCLUDE_JARS jar1 [jar2 ...]]
         [ENTRY_POINT entry]
         [VERSION version]
         [OUTPUT_NAME name]
         [OUTPUT_DIR dir]
         )

This command creates a <target_name>.jar.  It compiles the given
source files (source) and adds the given resource files (resource) to
the jar file.  Source files can be java files or listing files
(prefixed by '@').  If only resource files are given then just a jar file
is created.  The list of include jars are added to the classpath when
compiling the java sources and also to the dependencies of the target.
INCLUDE_JARS also accepts other target names created by add_jar.  For
backwards compatibility, jar files listed as sources are ignored (as
they have been since the first version of this module).

The default OUTPUT_DIR can also be changed by setting the variable
CMAKE_JAVA_TARGET_OUTPUT_DIR.

Additional instructions:

::

 To add compile flags to the target you can set these flags with
 the following variable:

::

 set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)

::

 To add a path or a jar file to the class path you can do this
 with the CMAKE_JAVA_INCLUDE_PATH variable.

::

 set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)

::

 To use a different output name for the target you can set it with:

::

 add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)

::

 To use a different output directory than CMAKE_CURRENT_BINARY_DIR
 you can set it with:

::

 add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)

::

 To define an entry point in your jar you can set it with the ENTRY_POINT
 named argument:

::

 add_jar(example ENTRY_POINT com/examples/MyProject/Main)

::

 To define a custom manifest for the jar, you can set it with the manifest
 named argument:

::

 add_jar(example MANIFEST /path/to/manifest)

::

 To add a VERSION to the target output name you can set it using
 the VERSION named argument to add_jar. This will create a jar file with the
 name shibboleet-1.0.0.jar and will create a symlink shibboleet.jar
 pointing to the jar with the version information.

::

 add_jar(shibboleet shibbotleet.java VERSION 1.2.0)

::

 If the target is a JNI library, utilize the following commands to
 create a JNI symbolic link:

::

 set(CMAKE_JNI_TARGET TRUE)
 add_jar(shibboleet shibbotleet.java VERSION 1.2.0)
 install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)
 install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})

::

 If a single target needs to produce more than one jar from its
 java source code, to prevent the accumulation of duplicate class
 files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior
 to calling the add_jar() function:

::

 set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)
 add_jar(foo foo.java)

::

 set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)
 add_jar(bar bar.java)

Target Properties:

::

 The add_jar() function sets some target properties. You can get these
 properties with the
    get_property(TARGET <target_name> PROPERTY <propery_name>)
 command.

::

 INSTALL_FILES      The files which should be installed. This is used by
                    install_jar().
 JNI_SYMLINK        The JNI symlink which should be installed.
                    This is used by install_jni_symlink().
 JAR_FILE           The location of the jar file so that you can include
                    it.
 CLASSDIR           The directory where the class files can be found. For
                    example to use them with javah.

::

 find_jar(<VAR>
          name | NAMES name1 [name2 ...]
          [PATHS path1 [path2 ... ENV var]]
          [VERSIONS version1 [version2]]
          [DOC "cache documentation string"]
          )

This command is used to find a full path to the named jar.  A cache
entry named by <VAR> is created to stor the result of this command.
If the full path to a jar is found the result is stored in the
variable and the search will not repeated unless the variable is
cleared.  If nothing is found, the result will be <VAR>-NOTFOUND, and
the search will be attempted again next time find_jar is invoked with
the same variable.  The name of the full path to a file that is
searched for is specified by the names listed after NAMES argument.
Additional search locations can be specified after the PATHS argument.
If you require special a version of a jar file you can specify it with
the VERSIONS argument.  The argument after DOC will be used for the
documentation string in the cache.

::

 install_jar(target_name destination)
 install_jar(target_name DESTINATION destination [COMPONENT component])

This command installs the TARGET_NAME files to the given DESTINATION.
It should be called in the same scope as add_jar() or it will fail.

::

 install_jni_symlink(target_name destination)
 install_jni_symlink(target_name DESTINATION destination [COMPONENT component])

This command installs the TARGET_NAME JNI symlinks to the given
DESTINATION.  It should be called in the same scope as add_jar() or it
will fail.

::

 create_javadoc(<VAR>
                PACKAGES pkg1 [pkg2 ...]
                [SOURCEPATH <sourcepath>]
                [CLASSPATH <classpath>]
                [INSTALLPATH <install path>]
                [DOCTITLE "the documentation title"]
                [WINDOWTITLE "the title of the document"]
                [AUTHOR TRUE|FALSE]
                [USE TRUE|FALSE]
                [VERSION TRUE|FALSE]
                )

Create java documentation based on files or packages.  For more
details please read the javadoc manpage.

There are two main signatures for create_javadoc.  The first signature
works with package names on a path with source files:

::

 Example:
 create_javadoc(my_example_doc
   PACKAGES com.exmaple.foo com.example.bar
   SOURCEPATH "${CMAKE_CURRENT_SOURCE_DIR}"
   CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}
   WINDOWTITLE "My example"
   DOCTITLE "<h1>My example</h1>"
   AUTHOR TRUE
   USE TRUE
   VERSION TRUE
 )

The second signature for create_javadoc works on a given list of
files.

::

 create_javadoc(<VAR>
                FILES file1 [file2 ...]
                [CLASSPATH <classpath>]
                [INSTALLPATH <install path>]
                [DOCTITLE "the documentation title"]
                [WINDOWTITLE "the title of the document"]
                [AUTHOR TRUE|FALSE]
                [USE TRUE|FALSE]
                [VERSION TRUE|FALSE]
               )

Example:

::

 create_javadoc(my_example_doc
   FILES ${example_SRCS}
   CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}
   WINDOWTITLE "My example"
   DOCTITLE "<h1>My example</h1>"
   AUTHOR TRUE
   USE TRUE
   VERSION TRUE
 )

Both signatures share most of the options.  These options are the same
as what you can find in the javadoc manpage.  Please look at the
manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and VERSION.

The documentation will be by default installed to

::

 ${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>

if you don't set the INSTALLPATH.

::

 create_javah(TARGET <target>
              GENERATED_FILES <VAR>
              CLASSES <class>...
              [CLASSPATH <classpath>...]
              [DEPENDS <depend>...]
              [OUTPUT_NAME <path>|OUTPUT_DIR <path>]
              )

Create C header files from java classes. These files provide the connective glue
that allow your Java and C code to interact.

There are two main signatures for create_javah.  The first signature
returns generated files through variable specified by GENERATED_FILES option:

::

 Example:
 Create_javah(GENERATED_FILES files_headers
   CLASSES org.cmake.HelloWorld
   CLASSPATH hello.jar
 )

The second signature for create_javah creates a target which encapsulates
header files generation.

::

 Example:
 Create_javah(TARGET target_headers
   CLASSES org.cmake.HelloWorld
   CLASSPATH hello.jar
 )

Both signatures share same options.

 ``CLASSES <class>...``
   Specifies Java classes used to generate headers.

 ``CLASSPATH <classpath>...``
   Specifies various paths to look up classes. Here .class files, jar files or targets
   created by command add_jar can be used.

 ``DEPENDS <depend>...``
   Targets on which the javah target depends

 ``OUTPUT_NAME <path>``
   Concatenates the resulting header files for all the classes listed by option CLASSES
   into <path>. Same behavior as option '-o' of javah tool.

 ``OUTPUT_DIR <path>``
   Sets the directory where the header files will be generated. Same behavior as option
   '-d' of javah tool. If not specified, ${CMAKE_CURRENT_BINARY_DIR} is used as output directory.

UseJavaSymlinks
---------------





Helper script for UseJava.cmake

UsePkgConfig
------------

Obsolete pkg-config module for CMake, use FindPkgConfig instead.



This module defines the following macro:

PKGCONFIG(package includedir libdir linkflags cflags)

Calling PKGCONFIG will fill the desired information into the 4 given
arguments, e.g.  PKGCONFIG(libart-2.0 LIBART_INCLUDE_DIR
LIBART_LINK_DIR LIBART_LINK_FLAGS LIBART_CFLAGS) if pkg-config was NOT
found or the specified software package doesn't exist, the variable
will be empty when the function returns, otherwise they will contain
the respective information

UseSWIG
-------

Defines the following macros for use with SWIG:

::

 SWIG_ADD_MODULE(name language [ files ])
   - Define swig module with given name and specified language
 SWIG_LINK_LIBRARIES(name [ libraries ])
   - Link libraries to swig module

Source files properties on module files can be set before the invocation
of the SWIG_ADD_MODULE macro to specify special behavior of SWIG.

The source file property CPLUSPLUS calls SWIG in c++ mode, e.g.::

 set_property(SOURCE mymod.i PROPERTY CPLUSPLUS ON)
 swig_add_module(mymod python mymod.i)

The source file property SWIG_FLAGS adds custom flags to the SWIG executable.

The source-file property SWIG_MODULE_NAME have to be provided to specify the actual
import name of the module in the target language if it cannot be scanned automatically
from source or different from the module file basename.::

 set_property(SOURCE mymod.i PROPERTY SWIG_MODULE_NAME mymod_realname)

To get the name of the swig module target library, use: ${SWIG_MODULE_${name}_REAL_NAME}.

Also some variables can be set to specify special behavior of SWIG.

CMAKE_SWIG_FLAGS can be used to add special flags to all swig calls.

Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify
where to write all the swig generated module (swig -outdir option)

The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used to specify extra
dependencies for the generated modules.

If the source file generated by swig need some special flag you can use::

 set_source_files_properties( ${swig_generated_file_fullname}
                              PROPERTIES COMPILE_FLAGS "-bla")

UsewxWidgets
------------

Convenience include for using wxWidgets library.

Determines if wxWidgets was FOUND and sets the appropriate libs,
incdirs, flags, etc.  INCLUDE_DIRECTORIES and LINK_DIRECTORIES are
called.

USAGE

::

 # Note that for MinGW users the order of libs is important!
 find_package(wxWidgets REQUIRED net gl core base)
 include(${wxWidgets_USE_FILE})
 # and for each of your dependent executable/library targets:
 target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})

DEPRECATED

::

 LINK_LIBRARIES is not called in favor of adding dependencies per target.

AUTHOR

::

 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de>

Use_wxWindows
-------------




This convenience include finds if wxWindows is installed and set the
appropriate libs, incdirs, flags etc.  author Jan Woetzel <jw -at-
mip.informatik.uni-kiel.de> (07/2003)

USAGE:

::

 just include Use_wxWindows.cmake
 in your projects CMakeLists.txt

include( ${CMAKE_MODULE_PATH}/Use_wxWindows.cmake)

::

 if you are sure you need GL then

set(WXWINDOWS_USE_GL 1)

::

 *before* you include this file.

WriteBasicConfigVersionFile
---------------------------



::

 WRITE_BASIC_CONFIG_VERSION_FILE( filename
   [VERSION major.minor.patch]
   COMPATIBILITY (AnyNewerVersion|SameMajorVersion)
   )

Deprecated, see WRITE_BASIC_PACKAGE_VERSION_FILE(), it is identical.

WriteCompilerDetectionHeader
----------------------------

This module provides the function write_compiler_detection_header().

The ``WRITE_COMPILER_DETECTION_HEADER`` function can be used to generate
a file suitable for preprocessor inclusion which contains macros to be
used in source code::

 write_compiler_detection_header(
           FILE <file>
           PREFIX <prefix>
           [OUTPUT_FILES_VAR <output_files_var> OUTPUT_DIR <output_dir>]
           COMPILERS <compiler> [...]
           FEATURES <feature> [...]
           [VERSION <version>]
           [PROLOG <prolog>]
           [EPILOG <epilog>]
 )

The ``write_compiler_detection_header`` function generates the
file ``<file>`` with macros which all have the prefix ``<prefix>``.

By default, all content is written directly to the ``<file>``.  The
``OUTPUT_FILES_VAR`` may be specified to cause the compiler-specific
content to be written to separate files.  The separate files are then
available in the ``<output_files_var>`` and may be consumed by the caller
for installation for example.  The ``OUTPUT_DIR`` specifies a relative
path from the main ``<file>`` to the compiler-specific files. For example:

 write_compiler_detection_header(
   FILE climbingstats_compiler_detection.h
   PREFIX ClimbingStats
   OUTPUT_FILES_VAR support_files
   OUTPUT_DIR compilers
   COMPILERS GNU Clang MSVC Intel
   FEATURES cxx_variadic_templates
 )
 install(FILES
   ${CMAKE_CURRENT_BINARY_DIR}/climbingstats_compiler_detection.h
   DESTINATION include
 )
 install(FILES
   ${support_files}
   DESTINATION include/compilers
 )

``VERSION`` may be used to specify the API version to be generated.
Future versions of CMake may introduce alternative APIs.  A given
API is selected by any ``<version>`` value greater than or equal
to the version of CMake that introduced the given API and less
than the version of CMake that introduced its succeeding API.
The value of the ``CMAKE_MINIMUM_REQUIRED_VERSION``
variable is used if no explicit version is specified.
(As of CMake version 3.6.0 there is only one API version.)

``PROLOG`` may be specified as text content to write at the start of the
header. ``EPILOG`` may be specified as text content to write at the end
of the header

At least one ``<compiler>`` and one ``<feature>`` must be listed.  Compilers
which are known to CMake, but not specified are detected and a preprocessor
``#error`` is generated for them.  A preprocessor macro matching
``<PREFIX>_COMPILER_IS_<compiler>`` is generated for each compiler
known to CMake to contain the value ``0`` or ``1``.

Possible compiler identifiers are documented with the
``CMAKE_<LANG>_COMPILER_ID`` variable.
Available features in this version of CMake are listed in the
``CMAKE_C_KNOWN_FEATURES`` and
``CMAKE_CXX_KNOWN_FEATURES`` global properties.

See the ``cmake-compile-features(7)`` manual for information on
compile features.

Feature Test Macros
===================

For each compiler, a preprocessor macro is generated matching
``<PREFIX>_COMPILER_IS_<compiler>`` which has the content either ``0``
or ``1``, depending on the compiler in use. Preprocessor macros for
compiler version components are generated matching
``<PREFIX>_COMPILER_VERSION_MAJOR`` ``<PREFIX>_COMPILER_VERSION_MINOR``
and ``<PREFIX>_COMPILER_VERSION_PATCH`` containing decimal values
for the corresponding compiler version components, if defined.

A preprocessor test is generated based on the compiler version
denoting whether each feature is enabled.  A preprocessor macro
matching ``<PREFIX>_COMPILER_<FEATURE>``, where ``<FEATURE>`` is the
upper-case ``<feature>`` name, is generated to contain the value
``0`` or ``1`` depending on whether the compiler in use supports the
feature:

 write_compiler_detection_header(
   FILE climbingstats_compiler_detection.h
   PREFIX ClimbingStats
   COMPILERS GNU Clang AppleClang MSVC Intel
   FEATURES cxx_variadic_templates
 )

 #if ClimbingStats_COMPILER_CXX_VARIADIC_TEMPLATES
 template<typename... T>
 void someInterface(T t...) { /* ... */ }
 #else
 // Compatibility versions
 template<typename T1>
 void someInterface(T1 t1) { /* ... */ }
 template<typename T1, typename T2>
 void someInterface(T1 t1, T2 t2) { /* ... */ }
 template<typename T1, typename T2, typename T3>
 void someInterface(T1 t1, T2 t2, T3 t3) { /* ... */ }
 #endif

Symbol Macros
=============

Some additional symbol-defines are created for particular features for
use as symbols which may be conditionally defined empty:

 class MyClass ClimbingStats_FINAL
 {
     ClimbingStats_CONSTEXPR int someInterface() { return 42; }
 };

The ``ClimbingStats_FINAL`` macro will expand to ``final`` if the
compiler (and its flags) support the ``cxx_final`` feature, and the
``ClimbingStats_CONSTEXPR`` macro will expand to ``constexpr``
if ``cxx_constexpr`` is supported.

The following features generate corresponding symbol defines:

========================== =================================== =================
        Feature                          Define                      Symbol
========================== =================================== =================
``c_restrict``              ``<PREFIX>_RESTRICT``               ``restrict``
``cxx_constexpr``           ``<PREFIX>_CONSTEXPR``              ``constexpr``
``cxx_deleted_functions``   ``<PREFIX>_DELETED_FUNCTION``       ``= delete``
``cxx_extern_templates``    ``<PREFIX>_EXTERN_TEMPLATE``        ``extern``
``cxx_final``               ``<PREFIX>_FINAL``                  ``final``
``cxx_noexcept``            ``<PREFIX>_NOEXCEPT``               ``noexcept``
``cxx_noexcept``            ``<PREFIX>_NOEXCEPT_EXPR(X)``       ``noexcept(X)``
``cxx_override``            ``<PREFIX>_OVERRIDE``               ``override``
========================== =================================== =================

Compatibility Implementation Macros
===================================

Some features are suitable for wrapping in a macro with a backward
compatibility implementation if the compiler does not support the feature.

When the ``cxx_static_assert`` feature is not provided by the compiler,
a compatibility implementation is available via the
``<PREFIX>_STATIC_ASSERT(COND)`` and
``<PREFIX>_STATIC_ASSERT_MSG(COND, MSG)`` function-like macros. The macros
expand to ``static_assert`` where that compiler feature is available, and
to a compatibility implementation otherwise. In the first form, the
condition is stringified in the message field of ``static_assert``.  In
the second form, the message ``MSG`` is passed to the message field of
``static_assert``, or ignored if using the backward compatibility
implementation.

The ``cxx_attribute_deprecated`` feature provides a macro definition
``<PREFIX>_DEPRECATED``, which expands to either the standard
``[[deprecated]]`` attribute or a compiler-specific decorator such
as ``__attribute__((__deprecated__))`` used by GNU compilers.

The ``cxx_alignas`` feature provides a macro definition
``<PREFIX>_ALIGNAS`` which expands to either the standard ``alignas``
decorator or a compiler-specific decorator such as
``__attribute__ ((__aligned__))`` used by GNU compilers.

The ``cxx_alignof`` feature provides a macro definition
``<PREFIX>_ALIGNOF`` which expands to either the standard ``alignof``
decorator or a compiler-specific decorator such as ``__alignof__``
used by GNU compilers.

============================= ================================ =====================
          Feature                          Define                     Symbol
============================= ================================ =====================
``cxx_alignas``                ``<PREFIX>_ALIGNAS``             ``alignas``
``cxx_alignof``                ``<PREFIX>_ALIGNOF``             ``alignof``
``cxx_nullptr``                ``<PREFIX>_NULLPTR``             ``nullptr``
``cxx_static_assert``          ``<PREFIX>_STATIC_ASSERT``       ``static_assert``
``cxx_static_assert``          ``<PREFIX>_STATIC_ASSERT_MSG``   ``static_assert``
``cxx_attribute_deprecated``   ``<PREFIX>_DEPRECATED``          ``[[deprecated]]``
``cxx_attribute_deprecated``   ``<PREFIX>_DEPRECATED_MSG``      ``[[deprecated]]``
``cxx_thread_local``           ``<PREFIX>_THREAD_LOCAL``        ``thread_local``
============================= ================================ =====================

A use-case which arises with such deprecation macros is the deprecation
of an entire library.  In that case, all public API in the library may
be decorated with the ``<PREFIX>_DEPRECATED`` macro.  This results in
very noisy build output when building the library itself, so the macro
may be may be defined to empty in that case when building the deprecated
library:

 add_library(compat_support ${srcs})
 target_compile_definitions(compat_support
   PRIVATE
     CompatSupport_DEPRECATED=
 )

cmake-packages(7)
*****************

Introduction
============

Packages provide dependency information to CMake based buildsystems.  Packages
are found with the ``find_package()`` command.  The result of
using ``find_package`` is either a set of ``IMPORTED`` targets, or
a set of variables corresponding to build-relevant information.

Using Packages
==============

CMake provides direct support for two forms of packages,
`Config-file Packages`_ and `Find-module Packages`_.
Indirect support for ``pkg-config`` packages is also provided via
the ``FindPkgConfig`` module.  In all cases, the basic form
of ``find_package()`` calls is the same:

 find_package(Qt4 4.7.0 REQUIRED) # CMake provides a Qt4 find-module
 find_package(Qt5Core 5.1.0 REQUIRED) # Qt provides a Qt5 package config file.
 find_package(LibXml2 REQUIRED) # Use pkg-config via the LibXml2 find-module

In cases where it is known that a package configuration file is provided by
upstream, and only that should be used, the ``CONFIG`` keyword may be passed
to ``find_package()``:

 find_package(Qt5Core 5.1.0 CONFIG REQUIRED)
 find_package(Qt5Gui 5.1.0 CONFIG)

Similarly, the ``MODULE`` keyword says to use only a find-module:

 find_package(Qt4 4.7.0 MODULE REQUIRED)

Specifying the type of package explicitly improves the error message shown to
the user if it is not found.

Both types of packages also support specifying components of a package,
either after the ``REQUIRED`` keyword:

 find_package(Qt5 5.1.0 CONFIG REQUIRED Widgets Xml Sql)

or as a separate ``COMPONENTS`` list:

 find_package(Qt5 5.1.0 COMPONENTS Widgets Xml Sql)

or as a separate ``OPTIONAL_COMPONENTS`` list:

 find_package(Qt5 5.1.0 COMPONENTS Widgets
                        OPTIONAL_COMPONENTS Xml Sql
 )

Handling of ``COMPONENTS`` and ``OPTIONAL_COMPONENTS`` is defined by the
package.

By setting the ``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` variable to
``TRUE``, the ``PackageName`` package will not be searched, and will always
be ``NOTFOUND``.

Config-file Packages
--------------------

A config-file package is a set of files provided by upstreams for downstreams
to use. CMake searches in a number of locations for package configuration files, as
described in the ``find_package()`` documentation.  The most simple way for
a CMake user to tell ``cmake(1)`` to search in a non-standard prefix for
a package is to set the ``CMAKE_PREFIX_PATH`` cache variable.

Config-file packages are provided by upstream vendors as part of development
packages, that is, they belong with the header files and any other files
provided to assist downstreams in using the package.

A set of variables which provide package status information are also set
automatically when using a config-file package.  The ``<Package>_FOUND``
variable is set to true or false, depending on whether the package was
found.  The ``<Package>_DIR`` cache variable is set to the location of the
package configuration file.

Find-module Packages
--------------------

A find module is a file with a set of rules for finding the required pieces of
a dependency, primarily header files and libraries.  Typically, a find module
is needed when the upstream is not built with CMake, or is not CMake-aware
enough to otherwise provide a package configuration file.  Unlike a package configuration
file, it is not shipped with upstream, but is used by downstream to find the
files by guessing locations of files with platform-specific hints.

Unlike the case of an upstream-provided package configuration file, no single point
of reference identifies the package as being found, so the ``<Package>_FOUND``
variable is not automatically set by the ``find_package()`` command.  It
can still be expected to be set by convention however and should be set by
the author of the Find-module.  Similarly there is no ``<Package>_DIR`` variable,
but each of the artifacts such as library locations and header file locations
provide a separate cache variable.

See the ``cmake-developer(7)`` manual for more information about creating
Find-module files.

Package Layout
==============

A config-file package consists of a `Package Configuration File`_ and
optionally a `Package Version File`_ provided with the project distribution.

Package Configuration File
--------------------------

Consider a project ``Foo`` that installs the following files::

 <prefix>/include/foo-1.2/foo.h
 <prefix>/lib/foo-1.2/libfoo.a

It may also provide a CMake package configuration file::

 <prefix>/lib/cmake/foo-1.2/FooConfig.cmake

with content defining ``IMPORTED`` targets, or defining variables, such
as:

 # ...
 # (compute PREFIX relative to file location)
 # ...
 set(Foo_INCLUDE_DIRS ${PREFIX}/include/foo-1.2)
 set(Foo_LIBRARIES ${PREFIX}/lib/foo-1.2/libfoo.a)

If another project wishes to use ``Foo`` it need only to locate the ``FooConfig.cmake``
file and load it to get all the information it needs about package content
locations.  Since the package configuration file is provided by the package
installation it already knows all the file locations.

The ``find_package()`` command may be used to search for the package
configuration file.  This command constructs a set of installation prefixes
and searches under each prefix in several locations.  Given the name ``Foo``,
it looks for a file called ``FooConfig.cmake`` or ``foo-config.cmake``.
The full set of locations is specified in the ``find_package()`` command
documentation. One place it looks is::

 <prefix>/lib/cmake/Foo*/

where ``Foo*`` is a case-insensitive globbing expression.  In our example the
globbing expression will match ``<prefix>/lib/cmake/foo-1.2`` and the package
configuration file will be found.

Once found, a package configuration file is immediately loaded.  It, together
with a package version file, contains all the information the project needs to
use the package.

Package Version File
--------------------

When the ``find_package()`` command finds a candidate package configuration
file it looks next to it for a version file. The version file is loaded to test
whether the package version is an acceptable match for the version requested.
If the version file claims compatibility the configuration file is accepted.
Otherwise it is ignored.

The name of the package version file must match that of the package configuration
file but has either ``-version`` or ``Version`` appended to the name before
the ``.cmake`` extension.  For example, the files::

 <prefix>/lib/cmake/foo-1.3/foo-config.cmake
 <prefix>/lib/cmake/foo-1.3/foo-config-version.cmake

and::

 <prefix>/lib/cmake/bar-4.2/BarConfig.cmake
 <prefix>/lib/cmake/bar-4.2/BarConfigVersion.cmake

are each pairs of package configuration files and corresponding package version
files.

When the ``find_package()`` command loads a version file it first sets the
following variables:

``PACKAGE_FIND_NAME``
 The <package> name

``PACKAGE_FIND_VERSION``
 Full requested version string

``PACKAGE_FIND_VERSION_MAJOR``
 Major version if requested, else 0

``PACKAGE_FIND_VERSION_MINOR``
 Minor version if requested, else 0

``PACKAGE_FIND_VERSION_PATCH``
 Patch version if requested, else 0

``PACKAGE_FIND_VERSION_TWEAK``
 Tweak version if requested, else 0

``PACKAGE_FIND_VERSION_COUNT``
 Number of version components, 0 to 4

The version file must use these variables to check whether it is compatible or
an exact match for the requested version and set the following variables with
results:

``PACKAGE_VERSION``
 Full provided version string

``PACKAGE_VERSION_EXACT``
 True if version is exact match

``PACKAGE_VERSION_COMPATIBLE``
 True if version is compatible

``PACKAGE_VERSION_UNSUITABLE``
 True if unsuitable as any version

Version files are loaded in a nested scope so they are free to set any variables
they wish as part of their computation. The find_package command wipes out the
scope when the version file has completed and it has checked the output
variables. When the version file claims to be an acceptable match for the
requested version the find_package command sets the following variables for
use by the project:

``<package>_VERSION``
 Full provided version string

``<package>_VERSION_MAJOR``
 Major version if provided, else 0

``<package>_VERSION_MINOR``
 Minor version if provided, else 0

``<package>_VERSION_PATCH``
 Patch version if provided, else 0

``<package>_VERSION_TWEAK``
 Tweak version if provided, else 0

``<package>_VERSION_COUNT``
 Number of version components, 0 to 4

The variables report the version of the package that was actually found.
The ``<package>`` part of their name matches the argument given to the
``find_package()`` command.

Creating Packages
=================

Usually, the upstream depends on CMake itself and can use some CMake facilities
for creating the package files. Consider an upstream which provides a single
shared library:

 project(UpstreamLib)

 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

 set(Upstream_VERSION 3.4.1)

 include(GenerateExportHeader)

 add_library(ClimbingStats SHARED climbingstats.cpp)
 generate_export_header(ClimbingStats)
 set_property(TARGET ClimbingStats PROPERTY VERSION ${Upstream_VERSION})
 set_property(TARGET ClimbingStats PROPERTY SOVERSION 3)
 set_property(TARGET ClimbingStats PROPERTY
   INTERFACE_ClimbingStats_MAJOR_VERSION 3)
 set_property(TARGET ClimbingStats APPEND PROPERTY
   COMPATIBLE_INTERFACE_STRING ClimbingStats_MAJOR_VERSION
 )

 install(TARGETS ClimbingStats EXPORT ClimbingStatsTargets
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
   RUNTIME DESTINATION bin
   INCLUDES DESTINATION include
 )
 install(
   FILES
     climbingstats.h
     "${CMAKE_CURRENT_BINARY_DIR}/climbingstats_export.h"
   DESTINATION
     include
   COMPONENT
     Devel
 )

 include(CMakePackageConfigHelpers)
 write_basic_package_version_file(
   "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
   VERSION ${Upstream_VERSION}
   COMPATIBILITY AnyNewerVersion
 )

 export(EXPORT ClimbingStatsTargets
   FILE "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsTargets.cmake"
   NAMESPACE Upstream::
 )
 configure_file(cmake/ClimbingStatsConfig.cmake
   "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfig.cmake"
   COPYONLY
 )

 set(ConfigPackageLocation lib/cmake/ClimbingStats)
 install(EXPORT ClimbingStatsTargets
   FILE
     ClimbingStatsTargets.cmake
   NAMESPACE
     Upstream::
   DESTINATION
     ${ConfigPackageLocation}
 )
 install(
   FILES
     cmake/ClimbingStatsConfig.cmake
     "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
   DESTINATION
     ${ConfigPackageLocation}
   COMPONENT
     Devel
 )

The ``CMakePackageConfigHelpers`` module provides a macro for creating
a simple ``ConfigVersion.cmake`` file.  This file sets the version of the
package.  It is read by CMake when ``find_package()`` is called to
determine the compatibility with the requested version, and to set some
version-specific variables ``<Package>_VERSION``, ``<Package>_VERSION_MAJOR``,
``<Package>_VERSION_MINOR`` etc.  The ``install(EXPORT)`` command is
used to export the targets in the ``ClimbingStatsTargets`` export-set, defined
previously by the ``install(TARGETS)`` command. This command generates
the ``ClimbingStatsTargets.cmake`` file to contain ``IMPORTED``
targets, suitable for use by downstreams and arranges to install it to
``lib/cmake/ClimbingStats``.  The generated ``ClimbingStatsConfigVersion.cmake``
and a ``cmake/ClimbingStatsConfig.cmake`` are installed to the same location,
completing the package.

The generated ``IMPORTED`` targets have appropriate properties set
to define their :ref:`usage requirements <Target Usage Requirements>`, such as
``INTERFACE_INCLUDE_DIRECTORIES``,
``INTERFACE_COMPILE_DEFINITIONS`` and other relevant built-in
``INTERFACE_`` properties.  The ``INTERFACE`` variant of user-defined
properties listed in ``COMPATIBLE_INTERFACE_STRING`` and
other :ref:`Compatible Interface Properties` are also propagated to the
generated ``IMPORTED`` targets.  In the above case,
``ClimbingStats_MAJOR_VERSION`` is defined as a string which must be
compatible among the dependencies of any depender.  By setting this custom
defined user property in this version and in the next version of
``ClimbingStats``, ``cmake(1)`` will issue a diagnostic if there is an
attempt to use version 3 together with version 4.  Packages can choose to
employ such a pattern if different major versions of the package are designed
to be incompatible.

A ``NAMESPACE`` with double-colons is specified when exporting the targets
for installation.  This convention of double-colons gives CMake a hint that
the name is an ``IMPORTED`` target when it is used by downstreams
with the ``target_link_libraries()`` command.  This way, CMake can
issue a diagnostic if the package providing it has not yet been found.

In this case, when using ``install(TARGETS)`` the ``INCLUDES DESTINATION``
was specified.  This causes the ``IMPORTED`` targets to have their
``INTERFACE_INCLUDE_DIRECTORIES`` populated with the ``include``
directory in the ``CMAKE_INSTALL_PREFIX``.  When the ``IMPORTED``
target is used by downstream, it automatically consumes the entries from
that property.

Creating a Package Configuration File
-------------------------------------

In this case, the ``ClimbingStatsConfig.cmake`` file could be as simple as:

 include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")

As this allows downstreams to use the ``IMPORTED`` targets.  If any macros
should be provided by the ``ClimbingStats`` package, they should
be in a separate file which is installed to the same location as the
``ClimbingStatsConfig.cmake`` file, and included from there.

This can also be extended to cover dependencies:

 # ...
 add_library(ClimbingStats SHARED climbingstats.cpp)
 generate_export_header(ClimbingStats)

 find_package(Stats 2.6.4 REQUIRED)
 target_link_libraries(ClimbingStats PUBLIC Stats::Types)

As the ``Stats::Types`` target is a ``PUBLIC`` dependency of ``ClimbingStats``,
downstreams must also find the ``Stats`` package and link to the ``Stats::Types``
library.  The ``Stats`` package should be found in the ``ClimbingStatsConfig.cmake``
file to ensure this.  The ``find_dependency`` macro from the
``CMakeFindDependencyMacro`` helps with this by propagating
whether the package is ``REQUIRED``, or ``QUIET`` etc.  All ``REQUIRED``
dependencies of a package should be found in the ``Config.cmake`` file:

 include(CMakeFindDependencyMacro)
 find_dependency(Stats 2.6.4)

 include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")
 include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake")

The ``find_dependency`` macro also sets ``ClimbingStats_FOUND`` to ``False`` if
the dependency is not found, along with a diagnostic that the ``ClimbingStats``
package can not be used without the ``Stats`` package.

If ``COMPONENTS`` are specified when the downstream uses ``find_package()``,
they are listed in the ``<Package>_FIND_COMPONENTS`` variable. If a particular
component is non-optional, then the ``<Package>_FIND_REQUIRED_<comp>`` will
be true. This can be tested with logic in the package configuration file:

 include(CMakeFindDependencyMacro)
 find_dependency(Stats 2.6.4)

 include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake")
 include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake")

 set(_supported_components Plot Table)

 foreach(_comp ${ClimbingStats_FIND_COMPONENTS})
   if (NOT ";${_supported_components};" MATCHES _comp)
     set(ClimbingStats_FOUND False)
     set(ClimbingStats_NOTFOUND_MESSAGE "Unsupported component: ${_comp}")
   endif()
   include("${CMAKE_CURRENT_LIST_DIR}/ClimbingStats${_comp}Targets.cmake")
 endforeach()

Here, the ``ClimbingStats_NOTFOUND_MESSAGE`` is set to a diagnosis that the package
could not be found because an invalid component was specified.  This message
variable can be set for any case where the ``_FOUND`` variable is set to ``False``,
and will be displayed to the user.

Creating a Package Configuration File for the Build Tree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``export(EXPORT)`` command creates an ``IMPORTED`` targets
definition file which is specific to the build-tree, and is not relocatable.
This can similarly be used with a suitable package configuration file and
package version file to define a package for the build tree which may be used
without installation.  Consumers of the build tree can simply ensure that the
``CMAKE_PREFIX_PATH`` contains the build directory, or set the
``ClimbingStats_DIR`` to ``<build_dir>/ClimbingStats`` in the cache.

Creating Relocatable Packages
-----------------------------

A relocatable package must not reference absolute paths of files on
the machine where the package is built that will not exist on the
machines where the package may be installed.

Packages created by ``install(EXPORT)`` are designed to be relocatable,
using paths relative to the location of the package itself.  When defining
the interface of a target for ``EXPORT``, keep in mind that the include
directories should be specified as relative paths which are relative to the
``CMAKE_INSTALL_PREFIX``:

 target_include_directories(tgt INTERFACE
   # Wrong, not relocatable:
   $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/TgtName>
 )

 target_include_directories(tgt INTERFACE
   # Ok, relocatable:
   $<INSTALL_INTERFACE:include/TgtName>
 )

The ``$<INSTALL_PREFIX>``
``generator expression`` may be used as
a placeholder for the install prefix without resulting in a non-relocatable
package.  This is necessary if complex generator expressions are used:

 target_include_directories(tgt INTERFACE
   # Ok, relocatable:
   $<INSTALL_INTERFACE:$<$<CONFIG:Debug>:$<INSTALL_PREFIX>/include/TgtName>>
 )

This also applies to paths referencing external dependencies.
It is not advisable to populate any properties which may contain
paths, such as ``INTERFACE_INCLUDE_DIRECTORIES`` and
``INTERFACE_LINK_LIBRARIES``, with paths relevant to dependencies.
For example, this code may not work well for a relocatable package:

 target_link_libraries(ClimbingStats INTERFACE
   ${Foo_LIBRARIES} ${Bar_LIBRARIES}
   )
 target_include_directories(ClimbingStats INTERFACE
   "$<INSTALL_INTERFACE:${Foo_INCLUDE_DIRS};${Bar_INCLUDE_DIRS}>"
   )

The referenced variables may contain the absolute paths to libraries
and include directories **as found on the machine the package was made on**.
This would create a package with hard-coded paths to dependencies and not
suitable for relocation.

Ideally such dependencies should be used through their own
:ref:`IMPORTED targets <Imported Targets>` that have their own
``IMPORTED_LOCATION`` and usage requirement properties
such as ``INTERFACE_INCLUDE_DIRECTORIES`` populated
appropriately.  Those imported targets may then be used with
the ``target_link_libraries()`` command for ``ClimbingStats``:

 target_link_libraries(ClimbingStats INTERFACE Foo::Foo Bar::Bar)

With this approach the package references its external dependencies
only through the names of :ref:`IMPORTED targets <Imported Targets>`.
When a consumer uses the installed package, the consumer will run the
appropriate ``find_package()`` commands (via the ``find_dependency``
macro described above) to find the dependencies and populate the
imported targets with appropriate paths on their own machine.

Unfortunately many ``modules`` shipped with
CMake do not yet provide :ref:`IMPORTED targets <Imported Targets>`
because their development pre-dated this approach.  This may improve
incrementally over time.  Workarounds to create relocatable packages
using such modules include:

* When building the package, specify each ``Foo_LIBRARY`` cache
  entry as just a library name, e.g. ``-DFoo_LIBRARY=foo``.  This
  tells the corresponding find module to populate the ``Foo_LIBRARIES``
  with just ``foo`` to ask the linker to search for the library
  instead of hard-coding a path.

* Or, after installing the package content but before creating the
  package installation binary for redistribution, manually replace
  the absolute paths with placeholders for substitution by the
  installation tool when the package is installed.

Package Registry
================

CMake provides two central locations to register packages that have
been built or installed anywhere on a system:

* `User Package Registry`_
* `System Package Registry`_

The registries are especially useful to help projects find packages in
non-standard install locations or directly in their own build trees.
A project may populate either the user or system registry (using its own
means, see below) to refer to its location.
In either case the package should store at the registered location a
`Package Configuration File`_ (``<package>Config.cmake``) and optionally a
`Package Version File`_ (``<package>ConfigVersion.cmake``).

The ``find_package()`` command searches the two package registries
as two of the search steps specified in its documentation.  If it has
sufficient permissions it also removes stale package registry entries
that refer to directories that do not exist or do not contain a matching
package configuration file.

User Package Registry
---------------------

The User Package Registry is stored in a per-user location.
The ``export(PACKAGE)`` command may be used to register a project
build tree in the user package registry.  CMake currently provides no
interface to add install trees to the user package registry.  Installers
must be manually taught to register their packages if desired.

On Windows the user package registry is stored in the Windows registry
under a key in ``HKEY_CURRENT_USER``.

A ``<package>`` may appear under registry key::

 HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\<package>

as a ``REG_SZ`` value, with arbitrary name, that specifies the directory
containing the package configuration file.

On UNIX platforms the user package registry is stored in the user home
directory under ``~/.cmake/packages``.  A ``<package>`` may appear under
the directory::

 ~/.cmake/packages/<package>

as a file, with arbitrary name, whose content specifies the directory
containing the package configuration file.

System Package Registry
-----------------------

The System Package Registry is stored in a system-wide location.
CMake currently provides no interface to add to the system package registry.
Installers must be manually taught to register their packages if desired.

On Windows the system package registry is stored in the Windows registry
under a key in ``HKEY_LOCAL_MACHINE``.  A ``<package>`` may appear under
registry key::

 HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\<package>

as a ``REG_SZ`` value, with arbitrary name, that specifies the directory
containing the package configuration file.

There is no system package registry on non-Windows platforms.

Disabling the Package Registry
------------------------------

In some cases using the Package Registries is not desirable. CMake
allows one to disable them using the following variables:

 * ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` disables the
   ``export(PACKAGE)`` command.
 * ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` disables the
   User Package Registry in all the ``find_package()`` calls.
 * ``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` disables
   the System Package Registry in all the ``find_package()`` calls.

Package Registry Example
------------------------

A simple convention for naming package registry entries is to use content
hashes.  They are deterministic and unlikely to collide
(``export(PACKAGE)`` uses this approach).
The name of an entry referencing a specific directory is simply the content
hash of the directory path itself.

If a project arranges for package registry entries to exist, such as::

 > reg query HKCU\Software\Kitware\CMake\Packages\MyPackage
 HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\MyPackage
  45e7d55f13b87179bb12f907c8de6fc4 REG_SZ c:/Users/Me/Work/lib/cmake/MyPackage
  7b4a9844f681c80ce93190d4e3185db9 REG_SZ c:/Users/Me/Work/MyPackage-build

or::

 $ cat ~/.cmake/packages/MyPackage/7d1fb77e07ce59a81bed093bbee945bd
 /home/me/work/lib/cmake/MyPackage
 $ cat ~/.cmake/packages/MyPackage/f92c1db873a1937f3100706657c63e07
 /home/me/work/MyPackage-build

then the ``CMakeLists.txt`` code:

 find_package(MyPackage)

will search the registered locations for package configuration files
(``MyPackageConfig.cmake``).  The search order among package registry
entries for a single package is unspecified and the entry names
(hashes in this example) have no meaning.  Registered locations may
contain package version files (``MyPackageConfigVersion.cmake``) to
tell ``find_package()`` whether a specific location is suitable
for the version requested.

Package Registry Ownership
--------------------------

Package registry entries are individually owned by the project installations
that they reference.  A package installer is responsible for adding its own
entry and the corresponding uninstaller is responsible for removing it.

The ``export(PACKAGE)`` command populates the user package registry
with the location of a project build tree.  Build trees tend to be deleted by
developers and have no "uninstall" event that could trigger removal of their
entries.  In order to keep the registries clean the ``find_package()``
command automatically removes stale entries it encounters if it has sufficient
permissions.  CMake provides no interface to remove an entry referencing an
existing build tree once ``export(PACKAGE)`` has been invoked.
However, if the project removes its package configuration file from the build
tree then the entry referencing the location will be considered stale.

cmake-policies(7)
*****************

Introduction
============

Policies in CMake are used to preserve backward compatible behavior
across multiple releases.  When a new policy is introduced, newer CMake
versions will begin to warn about the backward compatible behavior.  It
is possible to disable the warning by explicitly requesting the OLD, or
backward compatible behavior using the ``cmake_policy()`` command.
It is also possible to request ``NEW``, or non-backward compatible behavior
for a policy, also avoiding the warning.  Each policy can also be set to
either ``NEW`` or ``OLD`` behavior explicitly on the command line with the
``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` variable.

A policy is a deprecation mechanism and not a reliable feature toggle.
A policy should almost never be set to ``OLD``, except to silence warnings
in an otherwise frozen or stable codebase, or temporarily as part of a
larger migration path. The ``OLD`` behavior of each policy is undesirable
and will be replaced with an error condition in a future release.

The ``cmake_minimum_required()`` command does more than report an
error if a too-old version of CMake is used to build a project.  It
also sets all policies introduced in that CMake version or earlier to
``NEW`` behavior.  To manage policies without increasing the minimum required
CMake version, the ``if(POLICY)`` command may be used:

 if(POLICY CMP0990)
   cmake_policy(SET CMP0990 NEW)
 endif()

This has the effect of using the ``NEW`` behavior with newer CMake releases which
users may be using and not issuing a compatibility warning.

The setting of a policy is confined in some cases to not propagate to the
parent scope.  For example, if the files read by the ``include()`` command
or the ``find_package()`` command contain a use of ``cmake_policy()``,
that policy setting will not affect the caller by default.  Both commands accept
an optional ``NO_POLICY_SCOPE`` keyword to control this behavior.

The ``CMAKE_MINIMUM_REQUIRED_VERSION`` variable may also be used
to determine whether to report an error on use of deprecated macros or
functions.

Policies Introduced by CMake 3.4
================================

CMP0065
-------

Do not add flags to export symbols from executables without
the ``ENABLE_EXPORTS`` target property.

CMake 3.3 and below, for historical reasons, always linked executables
on some platforms with flags like ``-rdynamic`` to export symbols from
the executables for use by any plugins they may load via ``dlopen``.
CMake 3.4 and above prefer to do this only for executables that are
explicitly marked with the ``ENABLE_EXPORTS`` target property.

The ``OLD`` behavior of this policy is to always use the additional link
flags when linking executables regardless of the value of the
``ENABLE_EXPORTS`` target property.

The ``NEW`` behavior of this policy is to only use the additional link
flags when linking executables if the ``ENABLE_EXPORTS`` target
property is set to ``True``.

This policy was introduced in CMake version 3.4.  Unlike most policies,
CMake version 3.6.0 does *not* warn by default when this policy
is not set and simply uses OLD behavior.  See documentation of the
``CMAKE_POLICY_WARNING_CMP0065``
variable to control the warning.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0064
-------

Recognize ``TEST`` as a operator for the ``if()`` command.

The ``TEST`` operator was added to the ``if()`` command to determine if a
given test name was created by the ``add_test()`` command.

The ``OLD`` behavior for this policy is to ignore the ``TEST`` operator.
The ``NEW`` behavior is to interpret the ``TEST`` operator.

This policy was introduced in CMake version 3.4.  CMake version
3.6.0 warns when the policy is not set and uses ``OLD`` behavior.  Use
the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``
explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 3.3
================================

CMP0063
-------

Honor visibility properties for all target types.

The ``<LANG>_VISIBILITY_PRESET`` and
``VISIBILITY_INLINES_HIDDEN`` target properties affect visibility
of symbols during dynamic linking.  When first introduced these properties
affected compilation of sources only in shared libraries, module libraries,
and executables with the ``ENABLE_EXPORTS`` property set.  This
was sufficient for the basic use cases of shared libraries and executables
with plugins.  However, some sources may be compiled as part of static
libraries or object libraries and then linked into a shared library later.
CMake 3.3 and above prefer to honor these properties for sources compiled
in all target types.  This policy preserves compatibility for projects
expecting the properties to work only for some target types.

The ``OLD`` behavior for this policy is to ignore the visibility properties
for static libraries, object libraries, and executables without exports.
The ``NEW`` behavior for this policy is to honor the visibility properties
for all target types.

This policy was introduced in CMake version 3.3.  CMake version
3.6.0 warns when the policy is not set and uses ``OLD`` behavior.  Use
the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``
explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0062
-------

Disallow install() of export() result.

The ``export()`` command generates a file containing
:ref:`Imported Targets`, which is suitable for use from the build
directory.  It is not suitable for installation because it contains absolute
paths to buildsystem locations, and is particular to a single build
configuration.

The ``install(EXPORT)`` generates and installs files which contain
:ref:`Imported Targets`.  These files are generated with relative paths
(unless the user specifies absolute paths), and are designed for
multi-configuration use.  See :ref:`Creating Packages` for more.

CMake 3.3 no longer allows the use of the ``install(FILES)`` command
with the result of the ``export()`` command.

The ``OLD`` behavior for this policy is to allow installing the result of
an ``export()`` command.  The ``NEW`` behavior for this policy is
not to allow installing the result of an ``export()`` command.

This policy was introduced in CMake version 3.3.  CMake version
3.6.0 warns when the policy is not set and uses ``OLD`` behavior.  Use
the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``
explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0061
-------

CTest does not by default tell ``make`` to ignore errors (``-i``).

The ``ctest_build()`` and ``build_command()`` commands no
longer generate build commands for :ref:`Makefile Generators` with
the ``-i`` option.  Previously this was done to help build as much
of tested projects as possible.  However, this behavior is not
consistent with other generators and also causes the return code
of the ``make`` tool to be meaningless.

Of course users may still add this option manually by setting
``CTEST_BUILD_COMMAND`` or the ``MAKECOMMAND`` cache entry.
See the :ref:`CTest Build Step` ``MakeCommand`` setting documentation
for their effects.

The ``OLD`` behavior for this policy is to add ``-i`` to ``make``
calls in CTest.  The ``NEW`` behavior for this policy is to not
add ``-i``.

This policy was introduced in CMake version 3.3.  Unlike most policies,
CMake version 3.6.0 does *not* warn when this policy is not set and
simply uses OLD behavior.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0060
-------

Link libraries by full path even in implicit directories.

Policy ``CMP0003`` was introduced with the intention of always
linking library files by full path when a full path is given to the
``target_link_libraries()`` command.  However, on some platforms
(e.g. HP-UX) the compiler front-end adds alternative library search paths
for the current architecture (e.g. ``/usr/lib/<arch>`` has alternatives
to libraries in ``/usr/lib`` for the current architecture).
On such platforms the ``find_library()`` may find a library such as
``/usr/lib/libfoo.so`` that does not belong to the current architecture.

Prior to policy ``CMP0003`` projects would still build in such
cases because the incorrect library path would be converted to ``-lfoo``
on the link line and the linker would find the proper library in the
arch-specific search path provided by the compiler front-end implicitly.
At the time we chose to remain compatible with such projects by always
converting library files found in implicit link directories to ``-lfoo``
flags to ask the linker to search for them.  This approach allowed existing
projects to continue to build while still linking to libraries outside
implicit link directories via full path (such as those in the build tree).

CMake does allow projects to override this behavior by using an
:ref:`IMPORTED library target <Imported Targets>` with its
``IMPORTED_LOCATION`` property set to the desired full path to
a library file.  In fact, many :ref:`Find Modules` are learning to provide
:ref:`Imported Targets` instead of just the traditional ``Foo_LIBRARIES``
variable listing library files.  However, this makes the link line
generated for a library found by a Find Module depend on whether it
is linked through an imported target or not, which is inconsistent.
Furthermore, this behavior has been a source of confusion because the
generated link line for a library file depends on its location.  It is
also problematic for projects trying to link statically because flags
like ``-Wl,-Bstatic -lfoo -Wl,-Bdynamic`` may be used to help the linker
select ``libfoo.a`` instead of ``libfoo.so`` but then leak dynamic linking
to following libraries.  (See the ``LINK_SEARCH_END_STATIC``
target property for a solution typically used for that problem.)

When the special case for libraries in implicit link directories was first
introduced the list of implicit link directories was simply hard-coded
(e.g. ``/lib``, ``/usr/lib``, and a few others).  Since that time, CMake
has learned to detect the implicit link directories used by the compiler
front-end.  If necessary, the ``find_library()`` command could be
taught to use this information to help find libraries of the proper
architecture.

For these reasons, CMake 3.3 and above prefer to drop the special case
and link libraries by full path even when they are in implicit link
directories.  Policy ``CMP0060`` provides compatibility for existing
projects.

The OLD behavior for this policy is to ask the linker to search for
libraries whose full paths are known to be in implicit link directories.
The NEW behavior for this policy is to link libraries by full path even
if they are in implicit link directories.

This policy was introduced in CMake version 3.3.  Unlike most policies,
CMake version 3.6.0 does *not* warn by default when this policy
is not set and simply uses OLD behavior.  See documentation of the
``CMAKE_POLICY_WARNING_CMP0060``
variable to control the warning.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0059
-------

Do not treat ``DEFINITIONS`` as a built-in directory property.

CMake 3.3 and above no longer make a list of definitions available through
the ``DEFINITIONS`` directory property.  The
``COMPILE_DEFINITIONS`` directory property may be used instead.

The ``OLD`` behavior for this policy is to provide the list of flags given
so far to the ``add_definitions()`` command.  The ``NEW`` behavior is
to behave as a normal user-defined directory property.

This policy was introduced in CMake version 3.3.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set
it to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0058
-------

Ninja requires custom command byproducts to be explicit.

When an intermediate file generated during the build is consumed
by an expensive operation or a large tree of dependents, one may
reduce the work needed for an incremental rebuild by updating the
file timestamp only when its content changes.  With this approach
the generation rule must have a separate output file that is always
updated with a new timestamp that is newer than any dependencies of
the rule so that the build tool re-runs the rule only when the input
changes.  We refer to the separate output file as a rule's *witness*
and the generated file as a rule's *byproduct*.

Byproducts may not be listed as outputs because their timestamps are
allowed to be older than the inputs.  No build tools (like ``make``)
that existed when CMake was designed have a way to express byproducts.
Therefore CMake versions prior to 3.2 had no way to specify them.
Projects typically left byproducts undeclared in the rules that
generate them.  For example:

 add_custom_command(
   OUTPUT witness.txt
   COMMAND ${CMAKE_COMMAND} -E copy_if_different
           ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
           byproduct.txt # timestamp may not change
   COMMAND ${CMAKE_COMMAND} -E touch witness.txt
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
   )
 add_custom_target(Provider DEPENDS witness.txt)
 add_custom_command(
   OUTPUT generated.c
   COMMAND expensive-task -i byproduct.txt -o generated.c
   DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/byproduct.txt
   )
 add_library(Consumer generated.c)
 add_dependencies(Consumer Provider)

This works well for all generators except ``Ninja``.
The Ninja build tool sees a rule listing ``byproduct.txt``
as a dependency and no rule listing it as an output.  Ninja then
complains that there is no way to satisfy the dependency and
stops building even though there are order-only dependencies
that ensure ``byproduct.txt`` will exist before its consumers
need it.  See discussion of this problem in `Ninja Issue 760`_
for further details on why Ninja works this way.

Instead of leaving byproducts undeclared in the rules that generate
them, Ninja expects byproducts to be listed along with other outputs.
Such rules may be marked with a ``restat`` option that tells Ninja
to check the timestamps of outputs after the rules run.  This
prevents byproducts whose timestamps do not change from causing
their dependents to re-build unnecessarily.

Since the above approach does not tell CMake what custom command
generates ``byproduct.txt``, the Ninja generator does not have
enough information to add the byproduct as an output of any rule.
CMake 2.8.12 and above work around this problem and allow projects
using the above approach to build by generating ``phony`` build
rules to tell Ninja to tolerate such missing files.  However, this
workaround prevents Ninja from diagnosing a dependency that is
really missing.  It also works poorly in in-source builds where
every custom command dependency, even on source files, needs to
be treated this way because CMake does not have enough information
to know which files are generated as byproducts of custom commands.

CMake 3.2 introduced the ``BYPRODUCTS`` option to the
``add_custom_command()`` and ``add_custom_target()``
commands.  This option allows byproducts to be specified explicitly:

 add_custom_command(
   OUTPUT witness.txt
   BYPRODUCTS byproduct.txt # explicit byproduct specification
   COMMAND ${CMAKE_COMMAND} -E copy_if_different
           ${CMAKE_CURRENT_SOURCE_DIR}/input.txt
           byproduct.txt # timestamp may not change
 ...

The ``BYPRODUCTS`` option is used by the ``Ninja`` generator
to list byproducts among the outputs of the custom commands that
generate them, and is ignored by other generators.

CMake 3.3 and above prefer to require projects to specify custom
command byproducts explicitly so that it can avoid using the
``phony`` rule workaround altogether.  Policy ``CMP0058`` was
introduced to provide compatibility with existing projects that
still need the workaround.

This policy has no effect on generators other than ``Ninja``.
The ``OLD`` behavior for this policy is to generate Ninja ``phony``
rules for unknown dependencies in the build tree.  The ``NEW``
behavior for this policy is to not generate these and instead
require projects to specify custom command ``BYPRODUCTS`` explicitly.

This policy was introduced in CMake version 3.3.
CMake version 3.6.0 warns when it sees unknown dependencies in
out-of-source build trees if the policy is not set and then uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set
the policy to ``OLD`` or ``NEW`` explicitly.  The policy setting
must be in scope at the end of the top-level ``CMakeLists.txt``
file of the project and has global effect.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0057
-------

Support new ``if()`` IN_LIST operator.

CMake 3.3 adds support for the new IN_LIST operator.

The ``OLD`` behavior for this policy is to ignore the IN_LIST operator.
The ``NEW`` behavior is to interpret the IN_LIST operator.

This policy was introduced in CMake version 3.3.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set
it to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 3.2
================================

CMP0056
-------

Honor link flags in ``try_compile()`` source-file signature.

The ``try_compile()`` command source-file signature generates a
``CMakeLists.txt`` file to build the source file into an executable.
In order to compile the source the same way as it might be compiled
by the calling project, the generated project sets the value of the
``CMAKE_<LANG>_FLAGS`` variable to that in the calling project.
The value of the ``CMAKE_EXE_LINKER_FLAGS`` variable may be
needed in some cases too, but CMake 3.1 and lower did not set it in
the generated project.  CMake 3.2 and above prefer to set it so that
linker flags are honored as well as compiler flags.  This policy
provides compatibility with the pre-3.2 behavior.

The OLD behavior for this policy is to not set the value of the
``CMAKE_EXE_LINKER_FLAGS`` variable in the generated test
project.  The NEW behavior for this policy is to set the value of
the ``CMAKE_EXE_LINKER_FLAGS`` variable in the test project
to the same as it is in the calling project.

If the project code does not set the policy explicitly, users may
set it on the command line by defining the
``CMAKE_POLICY_DEFAULT_CMP0056``
variable in the cache.

This policy was introduced in CMake version 3.2.  Unlike most policies,
CMake version 3.6.0 does *not* warn by default when this policy
is not set and simply uses OLD behavior.  See documentation of the
``CMAKE_POLICY_WARNING_CMP0056``
variable to control the warning.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0055
-------

Strict checking for the ``break()`` command.

CMake 3.1 and lower allowed calls to the ``break()`` command
outside of a loop context and also ignored any given arguments.
This was undefined behavior.

The OLD behavior for this policy is to allow ``break()`` to be placed
outside of loop contexts and ignores any arguments.  The NEW behavior for this
policy is to issue an error if a misplaced break or any arguments are found.

This policy was introduced in CMake version 3.2.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 3.1
================================

CMP0054
-------

Only interpret ``if()`` arguments as variables or keywords when unquoted.

CMake 3.1 and above no longer implicitly dereference variables or
interpret keywords in an ``if()`` command argument when
it is a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.

The ``OLD`` behavior for this policy is to dereference variables and
interpret keywords even if they are quoted or bracketed.
The ``NEW`` behavior is to not dereference variables or interpret keywords
that have been quoted or bracketed.

Given the following partial example:

::

 set(A E)
 set(E "")

 if("${A}" STREQUAL "")
   message("Result is TRUE before CMake 3.1 or when CMP0054 is OLD")
 else()
   message("Result is FALSE in CMake 3.1 and above if CMP0054 is NEW")
 endif()

After explicit expansion of variables this gives:

::

 if("E" STREQUAL "")

With the policy set to ``OLD`` implicit expansion reduces this semantically to:

::

 if("" STREQUAL "")

With the policy set to ``NEW`` the quoted arguments will not be
further dereferenced:

::

 if("E" STREQUAL "")

This policy was introduced in CMake version 3.1.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set
it to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0053
-------

Simplify variable reference and escape sequence evaluation.

CMake 3.1 introduced a much faster implementation of evaluation of the
:ref:`Variable References` and :ref:`Escape Sequences` documented in the
``cmake-language(7)`` manual.  While the behavior is identical
to the legacy implementation in most cases, some corner cases were
cleaned up to simplify the behavior.  Specifically:

* Expansion of ``@VAR@`` reference syntax defined by the
  ``configure_file()`` and ``string(CONFIGURE)``
  commands is no longer performed in other contexts.

* Literal ``${VAR}`` reference syntax may contain only
  alphanumeric characters (``A-Z``, ``a-z``, ``0-9``) and
  the characters ``_``, ``.``, ``/``, ``-``, and ``+``.
  Variables with other characters in their name may still
  be referenced indirectly, e.g.

  .. code-block:: cmake

    set(varname "otherwise & disallowed $ characters")
    message("${${varname}}")

* The setting of policy ``CMP0010`` is not considered,
  so improper variable reference syntax is always an error.

* More characters are allowed to be escaped in variable names.
  Previously, only ``()#" \@^`` were valid characters to
  escape. Now any non-alphanumeric, non-semicolon, non-NUL
  character may be escaped following the ``escape_identity``
  production in the :ref:`Escape Sequences` section of the
  ``cmake-language(7)`` manual.

The ``OLD`` behavior for this policy is to honor the legacy behavior for
variable references and escape sequences.  The ``NEW`` behavior is to
use the simpler variable expansion and escape sequence evaluation rules.

This policy was introduced in CMake version 3.1.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set
it to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0052
-------

Reject source and build dirs in installed INTERFACE_INCLUDE_DIRECTORIES.

CMake 3.0 and lower allowed subdirectories of the source directory or build
directory to be in the ``INTERFACE_INCLUDE_DIRECTORIES`` of
installed and exported targets, if the directory was also a subdirectory of
the installation prefix.  This makes the installation depend on the
existence of the source dir or binary dir, and the installation will be
broken if either are removed after installation.

See :ref:`Include Directories and Usage Requirements` for more on
specifying include directories for targets.

The OLD behavior for this policy is to export the content of the
``INTERFACE_INCLUDE_DIRECTORIES`` with the source or binary
directory.  The NEW behavior for this
policy is to issue an error if such a directory is used.

This policy was introduced in CMake version 3.1.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set it
to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0051
-------

List TARGET_OBJECTS in SOURCES target property.

CMake 3.0 and lower did not include the ``TARGET_OBJECTS``
``generator expression`` when
returning the ``SOURCES`` target property.

Configure-time CMake code is not able to handle generator expressions.  If
using the ``SOURCES`` target property at configure time, it may be
necessary to first remove generator expressions using the
``string(GENEX_STRIP)`` command.  Generate-time CMake code such as
``file(GENERATE)`` can handle the content without stripping.

The ``OLD`` behavior for this policy is to omit ``TARGET_OBJECTS``
expressions from the ``SOURCES`` target property.  The ``NEW``
behavior for this policy is to include ``TARGET_OBJECTS`` expressions
in the output.

This policy was introduced in CMake version 3.1.
CMake version 3.6.0 warns when the policy is not set and uses
``OLD`` behavior.  Use the ``cmake_policy()`` command to set it
to ``OLD`` or ``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 3.0
================================

CMP0050
-------

Disallow add_custom_command SOURCE signatures.

CMake 2.8.12 and lower allowed a signature for ``add_custom_command()``
which specified an input to a command.  This was undocumented behavior.
Modern use of CMake associates custom commands with their output, rather
than their input.

The OLD behavior for this policy is to allow the use of
``add_custom_command()`` SOURCE signatures.  The NEW behavior for this
policy is to issue an error if such a signature is used.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0049
-------

Do not expand variables in target source entries.

CMake 2.8.12 and lower performed and extra layer of variable expansion
when evaluating source file names:

 set(a_source foo.c)
 add_executable(foo \${a_source})

This was undocumented behavior.

The OLD behavior for this policy is to expand such variables when processing
the target sources.  The NEW behavior for this policy is to issue an error
if such variables need to be expanded.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0048
-------

The ``project()`` command manages VERSION variables.

CMake version 3.0 introduced the ``VERSION`` option of the ``project()``
command to specify a project version as well as the name.  In order to keep
``PROJECT_VERSION`` and related variables consistent with variable
``PROJECT_NAME`` it is necessary to set the VERSION variables
to the empty string when no ``VERSION`` is given to ``project()``.
However, this can change behavior for existing projects that set VERSION
variables themselves since ``project()`` may now clear them.
This policy controls the behavior for compatibility with such projects.

The OLD behavior for this policy is to leave VERSION variables untouched.
The NEW behavior for this policy is to set VERSION as documented by the
``project()`` command.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0047
-------

Use ``QCC`` compiler id for the qcc drivers on QNX.

CMake 3.0 and above recognize that the QNX qcc compiler driver is
different from the GNU compiler.
CMake now prefers to present this to projects by setting the
``CMAKE_<LANG>_COMPILER_ID`` variable to ``QCC`` instead
of ``GNU``.  However, existing projects may assume the compiler id for
QNX qcc is just ``GNU`` as it was in CMake versions prior to 3.0.
Therefore this policy determines for QNX qcc which compiler id to
report in the ``CMAKE_<LANG>_COMPILER_ID`` variable after
language ``<LANG>`` is enabled by the ``project()`` or
``enable_language()`` command.  The policy must be set prior
to the invocation of either command.

The OLD behavior for this policy is to use the ``GNU`` compiler id
for the qcc and QCC compiler drivers. The NEW behavior for this policy
is to use the ``QCC`` compiler id for those drivers.

This policy was introduced in CMake version 3.0.  Use the
``cmake_policy()`` command to set this policy to OLD or NEW explicitly.
Unlike most policies, CMake version 3.6.0 does *not* warn
by default when this policy is not set and simply uses OLD behavior.
See documentation of the
``CMAKE_POLICY_WARNING_CMP0047``
variable to control the warning.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0046
-------

Error on non-existent dependency in add_dependencies.

CMake 2.8.12 and lower silently ignored non-existent dependencies
listed in the ``add_dependencies()`` command.

The OLD behavior for this policy is to silently ignore non-existent
dependencies. The NEW behavior for this policy is to report an error
if non-existent dependencies are listed in the ``add_dependencies()``
command.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0045
-------

Error on non-existent target in get_target_property.

In CMake 2.8.12 and lower, the ``get_target_property()`` command accepted
a non-existent target argument without issuing any error or warning.  The
result variable is set to a ``-NOTFOUND`` value.

The OLD behavior for this policy is to issue no warning and set the result
variable to a ``-NOTFOUND`` value.  The NEW behavior
for this policy is to issue a ``FATAL_ERROR`` if the command is called with a
non-existent target.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0044
-------

Case sensitive ``<LANG>_COMPILER_ID`` generator expressions

CMake 2.8.12 introduced the ``<LANG>_COMPILER_ID``
``generator expressions`` to allow
comparison of the ``CMAKE_<LANG>_COMPILER_ID`` with a test value.  The
possible valid values are lowercase, but the comparison with the test value
was performed case-insensitively.

The OLD behavior for this policy is to perform a case-insensitive comparison
with the value in the ``<LANG>_COMPILER_ID`` expression. The NEW behavior
for this policy is to perform a case-sensitive comparison with the value in
the ``<LANG>_COMPILER_ID`` expression.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0043
-------

Ignore COMPILE_DEFINITIONS_<Config> properties

CMake 2.8.12 and lower allowed setting the
``COMPILE_DEFINITIONS_<CONFIG>`` target property and
``COMPILE_DEFINITIONS_<CONFIG>`` directory property to apply
configuration-specific compile definitions.

Since CMake 2.8.10, the ``COMPILE_DEFINITIONS`` property has supported
``generator expressions`` for setting
configuration-dependent content.  The continued existence of the suffixed
variables is redundant, and causes a maintenance burden.  Population of the
``COMPILE_DEFINITIONS_DEBUG`` property
may be replaced with a population of ``COMPILE_DEFINITIONS`` directly
or via ``target_compile_definitions()``:

 # Old Interfaces:
 set_property(TARGET tgt APPEND PROPERTY
   COMPILE_DEFINITIONS_DEBUG DEBUG_MODE
 )
 set_property(DIRECTORY APPEND PROPERTY
   COMPILE_DEFINITIONS_DEBUG DIR_DEBUG_MODE
 )

 # New Interfaces:
 set_property(TARGET tgt APPEND PROPERTY
   COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG_MODE>
 )
 target_compile_definitions(tgt PRIVATE $<$<CONFIG:Debug>:DEBUG_MODE>)
 set_property(DIRECTORY APPEND PROPERTY
   COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DIR_DEBUG_MODE>
 )

The OLD behavior for this policy is to consume the content of the suffixed
``COMPILE_DEFINITIONS_<CONFIG>`` target property when generating the
compilation command. The NEW behavior for this policy is to ignore the content
of the ``COMPILE_DEFINITIONS_<CONFIG>`` target property .

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0042
-------

``MACOSX_RPATH`` is enabled by default.

CMake 2.8.12 and newer has support for using ``@rpath`` in a target's install
name.  This was enabled by setting the target property
``MACOSX_RPATH``.  The ``@rpath`` in an install name is a more
flexible and powerful mechanism than ``@executable_path`` or ``@loader_path``
for locating shared libraries.

CMake 3.0 and later prefer this property to be ON by default.  Projects
wanting ``@rpath`` in a target's install name may remove any setting of
the ``INSTALL_NAME_DIR`` and ``CMAKE_INSTALL_NAME_DIR``
variables.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0041
-------

Error on relative include with generator expression.

Diagnostics in CMake 2.8.12 and lower silently ignored an entry in the
``INTERFACE_INCLUDE_DIRECTORIES`` of a target if it contained a generator
expression at any position.

The path entries in that target property should not be relative. High-level
API should ensure that by adding either a source directory or a install
directory prefix, as appropriate.

As an additional diagnostic, the ``INTERFACE_INCLUDE_DIRECTORIES`` generated
on an ``IMPORTED`` target for the install location should not contain
paths in the source directory or the build directory.

The OLD behavior for this policy is to ignore relative path entries if they
contain a generator expression. The NEW behavior for this policy is to report
an error if a generator expression appears in another location and the path is
relative.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0040
-------

The target in the ``TARGET`` signature of ``add_custom_command()``
must exist and must be defined in current directory.

CMake 2.8.12 and lower silently ignored a custom command created with
the ``TARGET`` signature of ``add_custom_command()``
if the target is unknown or was defined outside the current directory.

The ``OLD`` behavior for this policy is to ignore custom commands
for unknown targets.  The ``NEW`` behavior for this policy is to report
an error if the target referenced in ``add_custom_command()`` is
unknown or was defined outside the current directory.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses ``OLD`` behavior.
Use the ``cmake_policy()`` command to set it to ``OLD`` or
``NEW`` explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0039
-------

Utility targets may not have link dependencies.

CMake 2.8.12 and lower allowed using utility targets in the left hand side
position of the ``target_link_libraries()`` command. This is an indicator
of a bug in user code.

The OLD behavior for this policy is to ignore attempts to set the link
libraries of utility targets.  The NEW behavior for this policy is to
report an error if an attempt is made to set the link libraries of a
utility target.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0038
-------

Targets may not link directly to themselves.

CMake 2.8.12 and lower allowed a build target to link to itself directly with
a ``target_link_libraries()`` call. This is an indicator of a bug in
user code.

The OLD behavior for this policy is to ignore targets which list themselves
in their own link implementation.  The NEW behavior for this policy is to
report an error if a target attempts to link to itself.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0037
-------

Target names should not be reserved and should match a validity pattern.

CMake 2.8.12 and lower allowed creating targets using ``add_library()``,
``add_executable()`` and ``add_custom_target()`` with unrestricted
choice for the target name.  Newer cmake features such
as ``cmake-generator-expressions(7)`` and some
diagnostics expect target names to match a restricted pattern.

Target names may contain upper and lower case letters, numbers, the underscore
character (_), dot(.), plus(+) and minus(-).  As a special case, ALIAS
targets and IMPORTED targets may contain two consequtive colons.

Target names reserved by one or more CMake generators are not allowed.
Among others these include "all", "help" and "test".

The OLD behavior for this policy is to allow creating targets with
reserved names or which do not match the validity pattern.
The NEW behavior for this policy is to report an error
if an add_* command is used with an invalid target name.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0036
-------

The ``build_name()`` command should not be called.

This command was added in May 2001 to compute a name for the current
operating system and compiler combination.  The command has long been
documented as discouraged and replaced by the ``CMAKE_SYSTEM``
and ``CMAKE_<LANG>_COMPILER`` variables.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0035
-------

The ``variable_requires()`` command should not be called.

This command was introduced in November 2001 to perform some conditional
logic.  It has long been replaced by the ``if()`` command.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0034
-------

The ``utility_source()`` command should not be called.

This command was introduced in March 2001 to help build executables used to
generate other files.  This approach has long been replaced by
``add_executable()`` combined with ``add_custom_command()``.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0033
-------

The ``export_library_dependencies()`` command should not be called.

This command was added in January 2003 to export ``<tgt>_LIB_DEPENDS``
internal CMake cache entries to a file for installation with a project.
This was used at the time to allow transitive link dependencies to
work for applications outside of the original build tree of a project.
The functionality has been superseded by the ``export()`` and
``install(EXPORT)`` commands.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0032
-------

The ``output_required_files()`` command should not be called.

This command was added in June 2001 to expose the then-current CMake
implicit dependency scanner.  CMake's real implicit dependency scanner
has evolved since then but is not exposed through this command.  The
scanning capabilities of this command are very limited and this
functionality is better achieved through dedicated outside tools.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0031
-------

The ``load_command()`` command should not be called.

This command was added in August 2002 to allow projects to add
arbitrary commands implemented in C or C++.  However, it does
not work when the toolchain in use does not match the ABI of
the CMake process.  It has been mostly superseded by the
``macro()`` and ``function()`` commands.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0030
-------

The ``use_mangled_mesa()`` command should not be called.

This command was created in September 2001 to support VTK before
modern CMake language and custom command capabilities.  VTK has
not used it in years.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0029
-------

The ``subdir_depends()`` command should not be called.

The implementation of this command has been empty since December 2001
but was kept in CMake for compatibility for a long time.

CMake >= 3.0 prefer that this command never be called.
The OLD behavior for this policy is to allow the command to be called.
The NEW behavior for this policy is to issue a FATAL_ERROR when the
command is called.

This policy was introduced in CMake version 3.0.
CMake version 3.6.0 warns when the policy is not set and uses
OLD behavior.  Use the cmake_policy command to set it to OLD or
NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0028
-------

Double colon in target name means ALIAS or IMPORTED target.

CMake 2.8.12 and lower allowed the use of targets and files with double
colons in target_link_libraries, with some buildsystem generators.

The use of double-colons is a common pattern used to namespace IMPORTED
targets and ALIAS targets.  When computing the link dependencies of a target,
the name of each dependency could either be a target, or a file on disk.
Previously, if a target was not found with a matching name, the name was
considered to refer to a file on disk.  This can lead to confusing error
messages if there is a typo in what should be a target name.

The OLD behavior for this policy is to search for targets, then files on disk,
even if the search term contains double-colons.  The NEW behavior for this
policy is to issue a FATAL_ERROR if a link dependency contains
double-colons but is not an IMPORTED target or an ALIAS target.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0027
-------

Conditionally linked imported targets with missing include directories.

CMake 2.8.11 introduced introduced the concept of
INTERFACE_INCLUDE_DIRECTORIES, and a check at cmake time that the
entries in the INTERFACE_INCLUDE_DIRECTORIES of an IMPORTED target
actually exist.  CMake 2.8.11 also introduced generator expression
support in the target_link_libraries command.  However, if an imported
target is linked as a result of a generator expression evaluation, the
entries in the INTERFACE_INCLUDE_DIRECTORIES of that target were not
checked for existence as they should be.

The OLD behavior of this policy is to report a warning if an entry in
the INTERFACE_INCLUDE_DIRECTORIES of a generator-expression
conditionally linked IMPORTED target does not exist.

The NEW behavior of this policy is to report an error if an entry in
the INTERFACE_INCLUDE_DIRECTORIES of a generator-expression
conditionally linked IMPORTED target does not exist.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0026
-------

Disallow use of the LOCATION property for build targets.

CMake 2.8.12 and lower allowed reading the LOCATION target
property (and configuration-specific variants) to
determine the eventual location of build targets.  This relies on the
assumption that all necessary information is available at
configure-time to determine the final location and filename of the
target.  However, this property is not fully determined until later at
generate-time.  At generate time, the $<TARGET_FILE> generator
expression can be used to determine the eventual LOCATION of a target
output.

Code which reads the LOCATION target property can be ported to use the
$<TARGET_FILE> generator expression together with the file(GENERATE)
subcommand to generate a file containing the target location.

The OLD behavior for this policy is to allow reading the LOCATION
properties from build-targets.  The NEW behavior for this policy is to
not to allow reading the LOCATION properties from build-targets.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0025
-------

Compiler id for Apple Clang is now ``AppleClang``.

CMake 3.0 and above recognize that Apple Clang is a different compiler
than upstream Clang and that they have different version numbers.
CMake now prefers to present this to projects by setting the
``CMAKE_<LANG>_COMPILER_ID`` variable to ``AppleClang`` instead
of ``Clang``.  However, existing projects may assume the compiler id for
Apple Clang is just ``Clang`` as it was in CMake versions prior to 3.0.
Therefore this policy determines for Apple Clang which compiler id to
report in the ``CMAKE_<LANG>_COMPILER_ID`` variable after
language ``<LANG>`` is enabled by the ``project()`` or
``enable_language()`` command.  The policy must be set prior
to the invocation of either command.

The OLD behavior for this policy is to use compiler id ``Clang``.  The
NEW behavior for this policy is to use compiler id ``AppleClang``.

This policy was introduced in CMake version 3.0.  Use the
``cmake_policy()`` command to set this policy to OLD or NEW explicitly.
Unlike most policies, CMake version 3.6.0 does *not* warn
by default when this policy is not set and simply uses OLD behavior.
See documentation of the
``CMAKE_POLICY_WARNING_CMP0025``
variable to control the warning.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0024
-------

Disallow include export result.

CMake 2.8.12 and lower allowed use of the include() command with the
result of the export() command.  This relies on the assumption that
the export() command has an immediate effect at configure-time during
a cmake run.  Certain properties of targets are not fully determined
until later at generate-time, such as the link language and complete
list of link libraries.  Future refactoring will change the effect of
the export() command to be executed at generate-time.  Use ALIAS
targets instead in cases where the goal is to refer to targets by
another name.

The OLD behavior for this policy is to allow including the result of
an export() command.  The NEW behavior for this policy is not to
allow including the result of an export() command.

This policy was introduced in CMake version 3.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 2.8
================================

CMP0023
-------

Plain and keyword target_link_libraries signatures cannot be mixed.

CMake 2.8.12 introduced the target_link_libraries signature using the
PUBLIC, PRIVATE, and INTERFACE keywords to generalize the LINK_PUBLIC
and LINK_PRIVATE keywords introduced in CMake 2.8.7.  Use of
signatures with any of these keywords sets the link interface of a
target explicitly, even if empty.  This produces confusing behavior
when used in combination with the historical behavior of the plain
target_link_libraries signature.  For example, consider the code:

::

 target_link_libraries(mylib A)
 target_link_libraries(mylib PRIVATE B)

After the first line the link interface has not been set explicitly so
CMake would use the link implementation, A, as the link interface.
However, the second line sets the link interface to empty.  In order
to avoid this subtle behavior CMake now prefers to disallow mixing the
plain and keyword signatures of target_link_libraries for a single
target.

The OLD behavior for this policy is to allow keyword and plain
target_link_libraries signatures to be mixed.  The NEW behavior for
this policy is to not to allow mixing of the keyword and plain
signatures.

This policy was introduced in CMake version 2.8.12.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0022
-------

INTERFACE_LINK_LIBRARIES defines the link interface.

CMake 2.8.11 constructed the 'link interface' of a target from
properties matching ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.
The modern way to specify config-sensitive content is to use generator
expressions and the ``IMPORTED_`` prefix makes uniform processing of the
link interface with generator expressions impossible.  The
INTERFACE_LINK_LIBRARIES target property was introduced as a
replacement in CMake 2.8.12.  This new property is named consistently
with the INTERFACE_COMPILE_DEFINITIONS, INTERFACE_INCLUDE_DIRECTORIES
and INTERFACE_COMPILE_OPTIONS properties.  For in-build targets, CMake
will use the INTERFACE_LINK_LIBRARIES property as the source of the
link interface only if policy CMP0022 is NEW.  When exporting a target
which has this policy set to NEW, only the INTERFACE_LINK_LIBRARIES
property will be processed and generated for the IMPORTED target by
default.  A new option to the install(EXPORT) and export commands
allows export of the old-style properties for compatibility with
downstream users of CMake versions older than 2.8.12.  The
target_link_libraries command will no longer populate the properties
matching LINK_INTERFACE_LIBRARIES(_<CONFIG>)? if this policy is NEW.

Warning-free future-compatible code which works with CMake 2.8.7 onwards
can be written by using the ``LINK_PRIVATE`` and ``LINK_PUBLIC`` keywords
of ``target_link_libraries()``.

The OLD behavior for this policy is to ignore the
INTERFACE_LINK_LIBRARIES property for in-build targets.  The NEW
behavior for this policy is to use the INTERFACE_LINK_LIBRARIES
property for in-build targets, and ignore the old properties matching
``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.

This policy was introduced in CMake version 2.8.12.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0021
-------

Fatal error on relative paths in INCLUDE_DIRECTORIES target property.

CMake 2.8.10.2 and lower allowed the INCLUDE_DIRECTORIES target
property to contain relative paths.  The base path for such relative
entries is not well defined.  CMake 2.8.12 issues a FATAL_ERROR if the
INCLUDE_DIRECTORIES property contains a relative path.

The OLD behavior for this policy is not to warn about relative paths
in the INCLUDE_DIRECTORIES target property.  The NEW behavior for this
policy is to issue a FATAL_ERROR if INCLUDE_DIRECTORIES contains a
relative path.

This policy was introduced in CMake version 2.8.12.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0020
-------

Automatically link Qt executables to qtmain target on Windows.

CMake 2.8.10 and lower required users of Qt to always specify a link
dependency to the qtmain.lib static library manually on Windows.
CMake 2.8.11 gained the ability to evaluate generator expressions
while determining the link dependencies from IMPORTED targets.  This
allows CMake itself to automatically link executables which link to Qt
to the qtmain.lib library when using IMPORTED Qt targets.  For
applications already linking to qtmain.lib, this should have little
impact.  For applications which supply their own alternative WinMain
implementation and for applications which use the QAxServer library,
this automatic linking will need to be disabled as per the
documentation.

The OLD behavior for this policy is not to link executables to
qtmain.lib automatically when they link to the QtCore IMPORTED target.
The NEW behavior for this policy is to link executables to qtmain.lib
automatically when they link to QtCore IMPORTED target.

This policy was introduced in CMake version 2.8.11.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0019
-------

Do not re-expand variables in include and link information.

CMake 2.8.10 and lower re-evaluated values given to the
include_directories, link_directories, and link_libraries commands to
expand any leftover variable references at the end of the
configuration step.  This was for strict compatibility with VERY early
CMake versions because all variable references are now normally
evaluated during CMake language processing.  CMake 2.8.11 and higher
prefer to skip the extra evaluation.

The OLD behavior for this policy is to re-evaluate the values for
strict compatibility.  The NEW behavior for this policy is to leave
the values untouched.

This policy was introduced in CMake version 2.8.11.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0018
-------

Ignore CMAKE_SHARED_LIBRARY_<Lang>_FLAGS variable.

CMake 2.8.8 and lower compiled sources in SHARED and MODULE libraries
using the value of the undocumented CMAKE_SHARED_LIBRARY_<Lang>_FLAGS
platform variable.  The variable contained platform-specific flags
needed to compile objects for shared libraries.  Typically it included
a flag such as -fPIC for position independent code but also included
other flags needed on certain platforms.  CMake 2.8.9 and higher
prefer instead to use the POSITION_INDEPENDENT_CODE target property to
determine what targets should be position independent, and new
undocumented platform variables to select flags while ignoring
CMAKE_SHARED_LIBRARY_<Lang>_FLAGS completely.

The default for either approach produces identical compilation flags,
but if a project modifies CMAKE_SHARED_LIBRARY_<Lang>_FLAGS from its
original value this policy determines which approach to use.

The OLD behavior for this policy is to ignore the
POSITION_INDEPENDENT_CODE property for all targets and use the
modified value of CMAKE_SHARED_LIBRARY_<Lang>_FLAGS for SHARED and
MODULE libraries.

The NEW behavior for this policy is to ignore
CMAKE_SHARED_LIBRARY_<Lang>_FLAGS whether it is modified or not and
honor the POSITION_INDEPENDENT_CODE target property.

This policy was introduced in CMake version 2.8.9.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0017
-------

Prefer files from the CMake module directory when including from there.

Starting with CMake 2.8.4, if a cmake-module shipped with CMake (i.e.
located in the CMake module directory) calls include() or
find_package(), the files located in the CMake module directory are
preferred over the files in CMAKE_MODULE_PATH.  This makes sure that
the modules belonging to CMake always get those files included which
they expect, and against which they were developed and tested.  In all
other cases, the files found in CMAKE_MODULE_PATH still take
precedence over the ones in the CMake module directory.  The OLD
behavior is to always prefer files from CMAKE_MODULE_PATH over files
from the CMake modules directory.

This policy was introduced in CMake version 2.8.4.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0016
-------

target_link_libraries() reports error if its only argument is not a target.

In CMake 2.8.2 and lower the target_link_libraries() command silently
ignored if it was called with only one argument, and this argument
wasn't a valid target.  In CMake 2.8.3 and above it reports an error
in this case.

This policy was introduced in CMake version 2.8.3.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0015
-------

link_directories() treats paths relative to the source dir.

In CMake 2.8.0 and lower the link_directories() command passed
relative paths unchanged to the linker.  In CMake 2.8.1 and above the
link_directories() command prefers to interpret relative paths with
respect to CMAKE_CURRENT_SOURCE_DIR, which is consistent with
include_directories() and other commands.  The OLD behavior for this
policy is to use relative paths verbatim in the linker command.  The
NEW behavior for this policy is to convert relative paths to absolute
paths by appending the relative path to CMAKE_CURRENT_SOURCE_DIR.

This policy was introduced in CMake version 2.8.1.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0014
-------

Input directories must have CMakeLists.txt.

CMake versions before 2.8 silently ignored missing CMakeLists.txt
files in directories referenced by add_subdirectory() or subdirs(),
treating them as if present but empty.  In CMake 2.8.0 and above this
policy determines whether or not the case is an error.  The OLD
behavior for this policy is to silently ignore the problem.  The NEW
behavior for this policy is to report an error.

This policy was introduced in CMake version 2.8.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0013
-------

Duplicate binary directories are not allowed.

CMake 2.6.3 and below silently permitted add_subdirectory() calls to
create the same binary directory multiple times.  During build system
generation files would be written and then overwritten in the build
tree and could lead to strange behavior.  CMake 2.6.4 and above
explicitly detect duplicate binary directories.  CMake 2.6.4 always
considers this case an error.  In CMake 2.8.0 and above this policy
determines whether or not the case is an error.  The OLD behavior for
this policy is to allow duplicate binary directories.  The NEW
behavior for this policy is to disallow duplicate binary directories
with an error.

This policy was introduced in CMake version 2.8.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0012
-------

if() recognizes numbers and boolean constants.

In CMake versions 2.6.4 and lower the if() command implicitly
dereferenced arguments corresponding to variables, even those named
like numbers or boolean constants, except for 0 and 1.  Numbers and
boolean constants such as true, false, yes, no, on, off, y, n,
notfound, ignore (all case insensitive) were recognized in some cases
but not all.  For example, the code "if(TRUE)" might have evaluated as
false.  Numbers such as 2 were recognized only in boolean expressions
like "if(NOT 2)" (leading to false) but not as a single-argument like
"if(2)" (also leading to false).  Later versions of CMake prefer to
treat numbers and boolean constants literally, so they should not be
used as variable names.

The OLD behavior for this policy is to implicitly dereference
variables named like numbers and boolean constants.  The NEW behavior
for this policy is to recognize numbers and boolean constants without
dereferencing variables with such names.

This policy was introduced in CMake version 2.8.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

Policies Introduced by CMake 2.6
================================

CMP0011
-------

Included scripts do automatic cmake_policy PUSH and POP.

In CMake 2.6.2 and below, CMake Policy settings in scripts loaded by
the include() and find_package() commands would affect the includer.
Explicit invocations of cmake_policy(PUSH) and cmake_policy(POP) were
required to isolate policy changes and protect the includer.  While
some scripts intend to affect the policies of their includer, most do
not.  In CMake 2.6.3 and above, include() and find_package() by
default PUSH and POP an entry on the policy stack around an included
script, but provide a NO_POLICY_SCOPE option to disable it.  This
policy determines whether or not to imply NO_POLICY_SCOPE for
compatibility.  The OLD behavior for this policy is to imply
NO_POLICY_SCOPE for include() and find_package() commands.  The NEW
behavior for this policy is to allow the commands to do their default
cmake_policy PUSH and POP.

This policy was introduced in CMake version 2.6.3.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0010
-------

Bad variable reference syntax is an error.

In CMake 2.6.2 and below, incorrect variable reference syntax such as
a missing close-brace ("${FOO") was reported but did not stop
processing of CMake code.  This policy determines whether a bad
variable reference is an error.  The OLD behavior for this policy is
to warn about the error, leave the string untouched, and continue.
The NEW behavior for this policy is to report an error.

If ``CMP0053`` is set to ``NEW``, this policy has no effect
and is treated as always being ``NEW``.

This policy was introduced in CMake version 2.6.3.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0009
-------

FILE GLOB_RECURSE calls should not follow symlinks by default.

In CMake 2.6.1 and below, FILE GLOB_RECURSE calls would follow through
symlinks, sometimes coming up with unexpectedly large result sets
because of symlinks to top level directories that contain hundreds of
thousands of files.

This policy determines whether or not to follow symlinks encountered
during a FILE GLOB_RECURSE call.  The OLD behavior for this policy is
to follow the symlinks.  The NEW behavior for this policy is not to
follow the symlinks by default, but only if FOLLOW_SYMLINKS is given
as an additional argument to the FILE command.

This policy was introduced in CMake version 2.6.2.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0008
-------

Libraries linked by full-path must have a valid library file name.

In CMake 2.4 and below it is possible to write code like

::

 target_link_libraries(myexe /full/path/to/somelib)

where "somelib" is supposed to be a valid library file name such as
"libsomelib.a" or "somelib.lib".  For Makefile generators this
produces an error at build time because the dependency on the full
path cannot be found.  For VS IDE and Xcode generators this used to
work by accident because CMake would always split off the library
directory and ask the linker to search for the library by name
(-lsomelib or somelib.lib).  Despite the failure with Makefiles, some
projects have code like this and build only with VS and/or Xcode.
This version of CMake prefers to pass the full path directly to the
native build tool, which will fail in this case because it does not
name a valid library file.

This policy determines what to do with full paths that do not appear
to name a valid library file.  The OLD behavior for this policy is to
split the library name from the path and ask the linker to search for
it.  The NEW behavior for this policy is to trust the given path and
pass it directly to the native build tool unchanged.

This policy was introduced in CMake version 2.6.1.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0007
-------

list command no longer ignores empty elements.

This policy determines whether the list command will ignore empty
elements in the list.  CMake 2.4 and below list commands ignored all
empty elements in the list.  For example, a;b;;c would have length 3
and not 4.  The OLD behavior for this policy is to ignore empty list
elements.  The NEW behavior for this policy is to correctly count
empty elements in a list.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0006
-------

Installing MACOSX_BUNDLE targets requires a BUNDLE DESTINATION.

This policy determines whether the install(TARGETS) command must be
given a BUNDLE DESTINATION when asked to install a target with the
MACOSX_BUNDLE property set.  CMake 2.4 and below did not distinguish
application bundles from normal executables when installing targets.
CMake 2.6 provides a BUNDLE option to the install(TARGETS) command
that specifies rules specific to application bundles on the Mac.
Projects should use this option when installing a target with the
MACOSX_BUNDLE property set.

The OLD behavior for this policy is to fall back to the RUNTIME
DESTINATION if a BUNDLE DESTINATION is not given.  The NEW behavior
for this policy is to produce an error if a bundle target is installed
without a BUNDLE DESTINATION.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0005
-------

Preprocessor definition values are now escaped automatically.

This policy determines whether or not CMake should generate escaped
preprocessor definition values added via add_definitions.  CMake
versions 2.4 and below assumed that only trivial values would be given
for macros in add_definitions calls.  It did not attempt to escape
non-trivial values such as string literals in generated build rules.
CMake versions 2.6 and above support escaping of most values, but
cannot assume the user has not added escapes already in an attempt to
work around limitations in earlier versions.

The OLD behavior for this policy is to place definition values given
to add_definitions directly in the generated build rules without
attempting to escape anything.  The NEW behavior for this policy is to
generate correct escapes for all native build tools automatically.
See documentation of the COMPILE_DEFINITIONS target property for
limitations of the escaping implementation.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0004
-------

Libraries linked may not have leading or trailing whitespace.

CMake versions 2.4 and below silently removed leading and trailing
whitespace from libraries linked with code like

::

 target_link_libraries(myexe " A ")

This could lead to subtle errors in user projects.

The OLD behavior for this policy is to silently remove leading and
trailing whitespace.  The NEW behavior for this policy is to diagnose
the existence of such whitespace as an error.  The setting for this
policy used when checking the library names is that in effect when the
target is created by an add_executable or add_library command.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0003
-------

Libraries linked via full path no longer produce linker search paths.

This policy affects how libraries whose full paths are NOT known are
found at link time, but was created due to a change in how CMake deals
with libraries whose full paths are known.  Consider the code

::

 target_link_libraries(myexe /path/to/libA.so)

CMake 2.4 and below implemented linking to libraries whose full paths
are known by splitting them on the link line into separate components
consisting of the linker search path and the library name.  The
example code might have produced something like

::

 ... -L/path/to -lA ...

in order to link to library A.  An analysis was performed to order
multiple link directories such that the linker would find library A in
the desired location, but there are cases in which this does not work.
CMake versions 2.6 and above use the more reliable approach of passing
the full path to libraries directly to the linker in most cases.  The
example code now produces something like

::

 ... /path/to/libA.so ....

Unfortunately this change can break code like

::

 target_link_libraries(myexe /path/to/libA.so B)

where "B" is meant to find "/path/to/libB.so".  This code is wrong
because the user is asking the linker to find library B but has not
provided a linker search path (which may be added with the
link_directories command).  However, with the old linking
implementation the code would work accidentally because the linker
search path added for library A allowed library B to be found.

In order to support projects depending on linker search paths added by
linking to libraries with known full paths, the OLD behavior for this
policy will add the linker search paths even though they are not
needed for their own libraries.  When this policy is set to OLD, CMake
will produce a link line such as

::

 ... -L/path/to /path/to/libA.so -lB ...

which will allow library B to be found as it was previously.  When
this policy is set to NEW, CMake will produce a link line such as

::

 ... /path/to/libA.so -lB ...

which more accurately matches what the project specified.

The setting for this policy used when generating the link line is that
in effect when the target is created by an add_executable or
add_library command.  For the example described above, the code

::

 cmake_policy(SET CMP0003 OLD) # or cmake_policy(VERSION 2.4)
 add_executable(myexe myexe.c)
 target_link_libraries(myexe /path/to/libA.so B)

will work and suppress the warning for this policy.  It may also be
updated to work with the corrected linking approach:

::

 cmake_policy(SET CMP0003 NEW) # or cmake_policy(VERSION 2.6)
 link_directories(/path/to) # needed to find library B
 add_executable(myexe myexe.c)
 target_link_libraries(myexe /path/to/libA.so B)

Even better, library B may be specified with a full path:

::

 add_executable(myexe myexe.c)
 target_link_libraries(myexe /path/to/libA.so /path/to/libB.so)

When all items on the link line have known paths CMake does not check
this policy so it has no effect.

Note that the warning for this policy will be issued for at most one
target.  This avoids flooding users with messages for every target
when setting the policy once will probably fix all targets.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0002
-------

Logical target names must be globally unique.

Targets names created with add_executable, add_library, or
add_custom_target are logical build target names.  Logical target
names must be globally unique because:

::

 - Unique names may be referenced unambiguously both in CMake
   code and on make tool command lines.
 - Logical names are used by Xcode and VS IDE generators
   to produce meaningful project names for the targets.

The logical name of executable and library targets does not have to
correspond to the physical file names built.  Consider using the
OUTPUT_NAME target property to create two targets with the same
physical name while keeping logical names distinct.  Custom targets
must simply have globally unique names (unless one uses the global
property ALLOW_DUPLICATE_CUSTOM_TARGETS with a Makefiles generator).

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0001
-------

CMAKE_BACKWARDS_COMPATIBILITY should no longer be used.

The OLD behavior is to check CMAKE_BACKWARDS_COMPATIBILITY and present
it to the user.  The NEW behavior is to ignore
CMAKE_BACKWARDS_COMPATIBILITY completely.

In CMake 2.4 and below the variable CMAKE_BACKWARDS_COMPATIBILITY was
used to request compatibility with earlier versions of CMake.  In
CMake 2.6 and above all compatibility issues are handled by policies
and the cmake_policy command.  However, CMake must still check
CMAKE_BACKWARDS_COMPATIBILITY for projects written for CMake 2.4 and
below.

This policy was introduced in CMake version 2.6.0.  CMake version
3.6.0 warns when the policy is not set and uses OLD behavior.  Use
the cmake_policy command to set it to OLD or NEW explicitly.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

CMP0000
-------

A minimum required CMake version must be specified.

CMake requires that projects specify the version of CMake to which
they have been written.  This policy has been put in place so users
trying to build the project may be told when they need to update their
CMake.  Specifying a version also helps the project build with CMake
versions newer than that specified.  Use the cmake_minimum_required
command at the top of your main CMakeLists.txt file:

::

 cmake_minimum_required(VERSION <major>.<minor>)

where "<major>.<minor>" is the version of CMake you want to support
(such as "2.6").  The command will ensure that at least the given
version of CMake is running and help newer versions be compatible with
the project.  See documentation of cmake_minimum_required for details.

Note that the command invocation must appear in the CMakeLists.txt
file itself; a call in an included file is not sufficient.  However,
the cmake_policy command may be called to set policy CMP0000 to OLD or
NEW behavior explicitly.  The OLD behavior is to silently ignore the
missing invocation.  The NEW behavior is to issue an error instead of
a warning.  An included file may set CMP0000 explicitly to affect how
this policy is enforced for the main CMakeLists.txt file.

This policy was introduced in CMake version 2.6.0.

.. note::
  The ``OLD`` behavior of a policy is
  ``deprecated by definition``
  and may be removed in a future version of CMake.

cmake-properties(7)
*******************

Properties of Global Scope
==========================

ALLOW_DUPLICATE_CUSTOM_TARGETS
------------------------------

Allow duplicate custom targets to be created.

Normally CMake requires that all targets built in a project have
globally unique logical names (see policy CMP0002).  This is necessary
to generate meaningful project file names in Xcode and VS IDE
generators.  It also allows the target names to be referenced
unambiguously.

Makefile generators are capable of supporting duplicate custom target
names.  For projects that care only about Makefile generators and do
not wish to support Xcode or VS IDE generators, one may set this
property to true to allow duplicate custom targets.  The property
allows multiple add_custom_target command calls in different
directories to specify the same target name.  However, setting this
property will cause non-Makefile generators to produce an error and
refuse to generate the project.

AUTOGEN_TARGETS_FOLDER
----------------------

Name of ``FOLDER`` for ``*_automoc`` targets that are added automatically by
CMake for targets for which ``AUTOMOC`` is enabled.

If not set, CMake uses the ``FOLDER`` property of the parent target as a
default value for this property.  See also the documentation for the
``FOLDER`` target property and the ``AUTOMOC`` target property.

AUTOMOC_TARGETS_FOLDER
----------------------

Name of ``FOLDER`` for ``*_automoc`` targets that are added automatically by
CMake for targets for which ``AUTOMOC`` is enabled.

This property is obsolete.  Use ``AUTOGEN_TARGETS_FOLDER`` instead.

If not set, CMake uses the ``FOLDER`` property of the parent target as a
default value for this property.  See also the documentation for the
``FOLDER`` target property and the ``AUTOMOC`` target property.

CMAKE_C_KNOWN_FEATURES
----------------------

List of C features known to this version of CMake.

The features listed in this global property may be known to be available to the
C compiler.  If the feature is available with the C compiler, it will
be listed in the ``CMAKE_C_COMPILE_FEATURES`` variable.

The features listed here may be used with the ``target_compile_features()``
command.  See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

The features known to this version of CMake are:

``c_function_prototypes``
  Function prototypes, as defined in ``ISO/IEC 9899:1990``.

``c_restrict``
  ``restrict`` keyword, as defined in ``ISO/IEC 9899:1999``.

``c_static_assert``
  Static assert, as defined in ``ISO/IEC 9899:2011``.

``c_variadic_macros``
  Variadic macros, as defined in ``ISO/IEC 9899:1999``.

CMAKE_CXX_KNOWN_FEATURES
------------------------

List of C++ features known to this version of CMake.

The features listed in this global property may be known to be available to the
C++ compiler.  If the feature is available with the C++ compiler, it will
be listed in the ``CMAKE_CXX_COMPILE_FEATURES`` variable.

The features listed here may be used with the ``target_compile_features()``
command.  See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.


The features known to this version of CMake are:

``cxx_aggregate_default_initializers``
  Aggregate default initializers, as defined in N3605_.

  .. _N3605: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html

``cxx_alias_templates``
  Template aliases, as defined in N2258_.

  .. _N2258: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf

``cxx_alignas``
  Alignment control ``alignas``, as defined in N2341_.

  .. _N2341: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf

``cxx_alignof``
  Alignment control ``alignof``, as defined in N2341_.

  .. _N2341: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf

``cxx_attributes``
  Generic attributes, as defined in N2761_.

  .. _N2761: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf

``cxx_attribute_deprecated``
  ``[[deprecated]]`` attribute, as defined in N3760_.

  .. _N3760: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html

``cxx_auto_type``
  Automatic type deduction, as defined in N1984_.

  .. _N1984: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf

``cxx_binary_literals``
  Binary literals, as defined in N3472_.

  .. _N3472: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf

``cxx_constexpr``
  Constant expressions, as defined in N2235_.

  .. _N2235: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf

``cxx_contextual_conversions``
  Contextual conversions, as defined in N3323_.

  .. _N3323: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3323.pdf

``cxx_decltype_incomplete_return_types``
  Decltype on incomplete return types, as defined in N3276_.

  .. _N3276 : http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf

``cxx_decltype``
  Decltype, as defined in N2343_.

  .. _N2343: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf

``cxx_decltype_auto``
  ``decltype(auto)`` semantics, as defined in N3638_.

  .. _N3638: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html

``cxx_default_function_template_args``
  Default template arguments for function templates, as defined in DR226_

  .. _DR226: http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#226

``cxx_defaulted_functions``
  Defaulted functions, as defined in N2346_.

  .. _N2346: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm

``cxx_defaulted_move_initializers``
  Defaulted move initializers, as defined in N3053_.

  .. _N3053: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html

``cxx_delegating_constructors``
  Delegating constructors, as defined in N1986_.

  .. _N1986: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf

``cxx_deleted_functions``
  Deleted functions, as defined in N2346_.

  .. _N2346: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm

``cxx_digit_separators``
  Digit separators, as defined in N3781_.

  .. _N3781: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3781.pdf

``cxx_enum_forward_declarations``
  Enum forward declarations, as defined in N2764_.

  .. _N2764: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf

``cxx_explicit_conversions``
  Explicit conversion operators, as defined in N2437_.

  .. _N2437: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf

``cxx_extended_friend_declarations``
  Extended friend declarations, as defined in N1791_.

  .. _N1791: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf

``cxx_extern_templates``
  Extern templates, as defined in N1987_.

  .. _N1987: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm

``cxx_final``
  Override control ``final`` keyword, as defined in N2928_, N3206_ and N3272_.

  .. _N2928: http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm
  .. _N3206: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm
  .. _N3272: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm

``cxx_func_identifier``
  Predefined ``__func__`` identifier, as defined in N2340_.

  .. _N2340: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2340.htm

``cxx_generalized_initializers``
  Initializer lists, as defined in N2672_.

  .. _N2672: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm

``cxx_generic_lambdas``
  Generic lambdas, as defined in N3649_.

  .. _N3649: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html

``cxx_inheriting_constructors``
  Inheriting constructors, as defined in N2540_.

  .. _N2540: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm

``cxx_inline_namespaces``
  Inline namespaces, as defined in N2535_.

  .. _N2535: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm

``cxx_lambdas``
  Lambda functions, as defined in N2927_.

  .. _N2927: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf

``cxx_lambda_init_captures``
  Initialized lambda captures, as defined in N3648_.

  .. _N3648: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html

``cxx_local_type_template_args``
  Local and unnamed types as template arguments, as defined in N2657_.

  .. _N2657: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm

``cxx_long_long_type``
  ``long long`` type, as defined in N1811_.

  .. _N1811: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf

``cxx_noexcept``
  Exception specifications, as defined in N3050_.

  .. _N3050: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html

``cxx_nonstatic_member_init``
  Non-static data member initialization, as defined in N2756_.

  .. _N2756: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2756.htm

``cxx_nullptr``
  Null pointer, as defined in N2431_.

  .. _N2431: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf

``cxx_override``
  Override control ``override`` keyword, as defined in N2928_, N3206_
  and N3272_.

  .. _N2928: http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm
  .. _N3206: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm
  .. _N3272: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm

``cxx_range_for``
  Range-based for, as defined in N2930_.

  .. _N2930: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html

``cxx_raw_string_literals``
  Raw string literals, as defined in N2442_.

  .. _N2442: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm

``cxx_reference_qualified_functions``
  Reference qualified functions, as defined in N2439_.

  .. _N2439: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm

``cxx_relaxed_constexpr``
  Relaxed constexpr, as defined in N3652_.

  .. _N3652: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html

``cxx_return_type_deduction``
  Return type deduction on normal functions, as defined in N3386_.

  .. _N3386: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3386.html

``cxx_right_angle_brackets``
  Right angle bracket parsing, as defined in N1757_.

  .. _N1757: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html

``cxx_rvalue_references``
  R-value references, as defined in N2118_.

  .. _N2118: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2118.html

``cxx_sizeof_member``
  Size of non-static data members, as defined in N2253_.

  .. _N2253: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html

``cxx_static_assert``
  Static assert, as defined in N1720_.

  .. _N1720: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html

``cxx_strong_enums``
  Strongly typed enums, as defined in N2347_.

  .. _N2347: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf

``cxx_thread_local``
  Thread-local variables, as defined in N2659_.

  .. _N2659: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm

``cxx_trailing_return_types``
  Automatic function return type, as defined in N2541_.

  .. _N2541: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2541.htm

``cxx_unicode_literals``
  Unicode string literals, as defined in N2442_.

  .. _N2442: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm

``cxx_uniform_initialization``
  Uniform initialization, as defined in N2640_.

  .. _N2640: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf

``cxx_unrestricted_unions``
  Unrestricted unions, as defined in N2544_.

  .. _N2544: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf

``cxx_user_literals``
  User-defined literals, as defined in N2765_.

  .. _N2765: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf

``cxx_variable_templates``
  Variable templates, as defined in N3651_.

  .. _N3651: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3651.pdf

``cxx_variadic_macros``
  Variadic macros, as defined in N1653_.

  .. _N1653: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm

``cxx_variadic_templates``
  Variadic templates, as defined in N2242_.

  .. _N2242: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf

``cxx_template_template_parameters``
  Template template parameters, as defined in ``ISO/IEC 14882:1998``.

DEBUG_CONFIGURATIONS
--------------------

Specify which configurations are for debugging.

The value must be a semi-colon separated list of configuration names.
Currently this property is used only by the target_link_libraries
command (see its documentation for details).  Additional uses may be
defined in the future.

This property must be set at the top level of the project and before
the first target_link_libraries command invocation.  If any entry in
the list does not match a valid configuration for the project the
behavior is undefined.

DISABLED_FEATURES
-----------------

List of features which are disabled during the CMake run.

List of features which are disabled during the CMake run.  By default
it contains the names of all packages which were not found.  This is
determined using the <NAME>_FOUND variables.  Packages which are
searched QUIET are not listed.  A project can add its own features to
this list.  This property is used by the macros in
FeatureSummary.cmake.

ENABLED_FEATURES
----------------

List of features which are enabled during the CMake run.

List of features which are enabled during the CMake run.  By default
it contains the names of all packages which were found.  This is
determined using the <NAME>_FOUND variables.  Packages which are
searched QUIET are not listed.  A project can add its own features to
this list.  This property is used by the macros in
FeatureSummary.cmake.

ENABLED_LANGUAGES
-----------------

Read-only property that contains the list of currently enabled languages

Set to list of currently enabled languages.

FIND_LIBRARY_USE_LIB64_PATHS
----------------------------

Whether ``find_library()`` should automatically search lib64
directories.

FIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the
``find_library()`` command should automatically search the lib64
variant of directories called lib in the search path when building
64-bit binaries.

FIND_LIBRARY_USE_OPENBSD_VERSIONING
-----------------------------------

Whether ``find_library()`` should find OpenBSD-style shared
libraries.

This property is a boolean specifying whether the
``find_library()`` command should find shared libraries with
OpenBSD-style versioned extension: ".so.<major>.<minor>".  The
property is set to true on OpenBSD and false on other platforms.

GLOBAL_DEPENDS_DEBUG_MODE
-------------------------

Enable global target dependency graph debug mode.

CMake automatically analyzes the global inter-target dependency graph
at the beginning of native build system generation.  This property
causes it to display details of its analysis to stderr.

GLOBAL_DEPENDS_NO_CYCLES
------------------------

Disallow global target dependency graph cycles.

CMake automatically analyzes the global inter-target dependency graph
at the beginning of native build system generation.  It reports an
error if the dependency graph contains a cycle that does not consist
of all STATIC library targets.  This property tells CMake to disallow
all cycles completely, even among static libraries.

IN_TRY_COMPILE
--------------

Read-only property that is true during a try-compile configuration.

True when building a project inside a ``try_compile()`` or
``try_run()`` command.

PACKAGES_FOUND
--------------

List of packages which were found during the CMake run.

List of packages which were found during the CMake run.  Whether a
package has been found is determined using the <NAME>_FOUND variables.

PACKAGES_NOT_FOUND
------------------

List of packages which were not found during the CMake run.

List of packages which were not found during the CMake run.  Whether a
package has been found is determined using the <NAME>_FOUND variables.

JOB_POOLS
---------

Ninja only: List of available pools.

A pool is a named integer property and defines the maximum number
of concurrent jobs which can be started by a rule assigned to the pool.
The ``JOB_POOLS`` property is a semicolon-separated list of
pairs using the syntax NAME=integer (without a space after the equality sign).

For instance:

 set_property(GLOBAL PROPERTY JOB_POOLS two_jobs=2 ten_jobs=10)

Defined pools could be used globally by setting
``CMAKE_JOB_POOL_COMPILE`` and ``CMAKE_JOB_POOL_LINK``
or per target by setting the target properties
``JOB_POOL_COMPILE`` and ``JOB_POOL_LINK``.

Build targets provided by CMake that are meant for individual interactive
use, such as ``install``, are placed in the ``console`` pool automatically.

PREDEFINED_TARGETS_FOLDER
-------------------------

Name of FOLDER for targets that are added automatically by CMake.

If not set, CMake uses "CMakePredefinedTargets" as a default value for
this property.  Targets such as INSTALL, PACKAGE and RUN_TESTS will be
organized into this FOLDER.  See also the documentation for the
``FOLDER`` target property.

ECLIPSE_EXTRA_NATURES
---------------------

List of natures to add to the generated Eclipse project file.

Eclipse projects specify language plugins by using natures. This property
should be set to the unique identifier for a nature (which looks like a Java
package name).

REPORT_UNDEFINED_PROPERTIES
---------------------------

If set, report any undefined properties to this file.

If this property is set to a filename then when CMake runs it will
report any properties or variables that were accessed but not defined
into the filename specified in this property.

RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

:ref:`Makefile Generators` and the ``Ninja`` generator prefix
compiler commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.

RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

:ref:`Makefile Generators` and the ``Ninja`` generator prefix
custom commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.

RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

:ref:`Makefile Generators` and the ``Ninja`` generator prefix
link and archive commands with the given launcher command line.
This is intended to allow launchers to intercept build problems
with high granularity.  Other generators ignore this property
because their underlying build systems provide no hook to wrap
individual commands with a launcher.

RULE_MESSAGES
-------------

Specify whether to report a message for each make rule.

This property specifies whether Makefile generators should add a
progress message describing what each build rule does.  If the
property is not set the default is ON.  Set the property to OFF to
disable granular messages and report only as each target completes.
This is intended to allow scripted builds to avoid the build time cost
of detailed reports.  If a ``CMAKE_RULE_MESSAGES`` cache entry exists
its value initializes the value of this property.  Non-Makefile
generators currently ignore this property.

TARGET_ARCHIVES_MAY_BE_SHARED_LIBS
----------------------------------

Set if shared libraries may be named like archives.

On AIX shared libraries may be named "lib<name>.a".  This property is
set to true on such platforms.

TARGET_MESSAGES
---------------

Specify whether to report the completion of each target.

This property specifies whether :ref:`Makefile Generators` should
add a progress message describing that each target has been completed.
If the property is not set the default is ``ON``.  Set the property
to ``OFF`` to disable target completion messages.

This option is intended to reduce build output when little or no
work needs to be done to bring the build tree up to date.

If a ``CMAKE_TARGET_MESSAGES`` cache entry exists its value
initializes the value of this property.

Non-Makefile generators currently ignore this property.

See the counterpart property ``RULE_MESSAGES`` to disable
everything except for target completion messages.

TARGET_SUPPORTS_SHARED_LIBS
---------------------------

Does the target platform support shared libraries.

TARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target
platform supports shared libraries.  Basically all current general
general purpose OS do so, the exception are usually embedded systems
with no or special OSs.

USE_FOLDERS
-----------

Use the ``FOLDER`` target property to organize targets into
folders.

If not set, CMake treats this property as OFF by default.  CMake
generators that are capable of organizing into a hierarchy of folders
use the values of the ``FOLDER`` target property to name those
folders. See also the documentation for the FOLDER target property.

Properties on Directories
=========================

ADDITIONAL_MAKE_CLEAN_FILES
---------------------------

Additional files to clean during the make clean stage.

A list of files that will be cleaned as a part of the "make clean"
stage.

CACHE_VARIABLES
---------------

List of cache variables available in the current directory.

This read-only property specifies the list of CMake cache variables
currently defined.  It is intended for debugging purposes.

CLEAN_NO_CUSTOM
---------------

Set to true to tell :ref:`Makefile Generators` not to remove the outputs of
custom commands for this directory during the ``make clean`` operation.
This is ignored on other generators because it is not possible to implement.

CMAKE_CONFIGURE_DEPENDS
-----------------------

Tell CMake about additional input files to the configuration process.
If any named file is modified the build system will re-run CMake to
re-configure the file and generate the build system again.

Specify files as a semicolon-separated list of paths.  Relative paths
are interpreted as relative to the current source directory.

COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a directory's sources.

This property specifies the list of options given so far to the
``add_definitions()`` command.

The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated
list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).

This property will be initialized in each directory by its value in the
directory's parent.

CMake will automatically drop some definitions that are not supported
by the native build tool.

Disclaimer: Most native build tools have poor support for escaping
certain values.  CMake has work-arounds for many cases but some values
may just not be possible to pass correctly.  If a value does not seem
to be escaped correctly, do not attempt to work-around the problem by
adding escape sequences to the value.  Your work-around may break in a
future version of CMake that has improved escape support.  Instead
consider defining the macro in a (configured) header file.  Then
report the limitation.  Known limitations include::

 #          - broken almost everywhere
 ;          - broken in VS IDE 7.0 and Borland Makefiles
 ,          - broken in VS IDE
 %          - broken in some cases in NMake
 & |        - broken in some cases on MinGW
 ^ < > \"   - broken in most Make tools on Windows

CMake does not reject these values outright because they do work in
some cases.  Use with caution.

Contents of ``COMPILE_DEFINITIONS`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

The corresponding ``COMPILE_DEFINITIONS_<CONFIG>`` property may
be set to specify per-configuration definitions.  Generator expressions
should be preferred instead of setting the alternative property.

COMPILE_OPTIONS
---------------

List of options to pass to the compiler.

This property holds a :ref:`;-list <CMake Language Lists>` of options
given so far to the ``add_compile_options()`` command.

This property is used to initialize the ``COMPILE_OPTIONS`` target
property when a target is created, which is used by the generators to set
the options for the compiler.

Contents of ``COMPILE_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual
for available expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

DEFINITIONS
-----------

For CMake 2.4 compatibility only.  Use ``COMPILE_DEFINITIONS``
instead.

This read-only property specifies the list of flags given so far to
the ``add_definitions()`` command.  It is intended for debugging
purposes.  Use the ``COMPILE_DEFINITIONS`` directory property
instead.

This built-in read-only property does not exist if policy
``CMP0059`` is set to ``NEW``.

EXCLUDE_FROM_ALL
----------------

Exclude the directory from the all target of its parent.

A property on a directory that indicates if its targets are excluded
from the default build target.  If it is not, then with a Makefile for
example typing make will cause the targets to be built.  The same
concept applies to the default build of other generators.

IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
----------------------------------

Specify #include line transforms for dependencies in a directory.

This property specifies rules to transform macro-like #include lines
during implicit dependency scanning of C and C++ source files.  The
list of rules must be semicolon-separated with each entry of the form
"A_MACRO(%)=value-with-%" (the % must be literal).  During dependency
scanning occurrences of A_MACRO(...) on #include lines will be
replaced by the value given with the macro argument substituted for
'%'.  For example, the entry

::

 MYDIR(%)=<mydir/%>

will convert lines of the form

::

 #include MYDIR(myheader.h)

to

::

 #include <mydir/myheader.h>

allowing the dependency to be followed.

This property applies to sources in all targets within a directory.
The property value is initialized in each directory by its value in
the directory's parent.

INCLUDE_DIRECTORIES
-------------------

List of preprocessor include file search directories.

This property specifies the list of directories given so far to the
``include_directories()`` command.

This property is used to populate the ``INCLUDE_DIRECTORIES``
target property, which is used by the generators to set the include
directories for the compiler.

In addition to accepting values from that command, values may be set
directly on any directory using the ``set_property()`` command.  A
directory gets its initial value from its parent directory if it has one.
The initial value of the ``INCLUDE_DIRECTORIES`` target property
comes from the value of this property.  Both directory and target property
values are adjusted by calls to the ``include_directories()`` command.

The target property values are used by the generators to set the
include paths for the compiler.

Contents of ``INCLUDE_DIRECTORIES`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

INCLUDE_REGULAR_EXPRESSION
--------------------------

Include file scanning regular expression.

This property specifies the regular expression used during
dependency scanning to match include files that should be followed.
See the ``include_regular_expression()`` command for a high-level
interface to set this property.

INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
-------------------------------------

Per-configuration interprocedural optimization for a directory.

This is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.
If set, this property overrides the generic property for the named
configuration.

INTERPROCEDURAL_OPTIMIZATION
----------------------------

Enable interprocedural optimization for targets in a directory.

If set to true, enables interprocedural optimizations if they are
known to be supported by the compiler.

LINK_DIRECTORIES
----------------

List of linker search directories.

This read-only property specifies the list of directories given so far
to the link_directories command.  It is intended for debugging
purposes.

LISTFILE_STACK
--------------

The current stack of listfiles being processed.

This property is mainly useful when trying to debug errors in your
CMake scripts.  It returns a list of what list files are currently
being processed, in order.  So if one listfile does an
``include()`` command then that is effectively pushing the
included listfile onto the stack.

MACROS
------

List of macro commands available in the current directory.

This read-only property specifies the list of CMake macros currently
defined.  It is intended for debugging purposes.  See the macro
command.

PARENT_DIRECTORY
----------------

Source directory that added current subdirectory.

This read-only property specifies the source directory that added the
current source directory as a subdirectory of the build.  In the
top-level directory the value is the empty-string.

RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

See the global property of the same name for details.  This overrides
the global property for a directory.

RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

See the global property of the same name for details.  This overrides
the global property for a directory.

RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

See the global property of the same name for details.  This overrides
the global property for a directory.

TEST_INCLUDE_FILE
-----------------

A cmake file that will be included when ctest is run.

If you specify TEST_INCLUDE_FILE, that file will be included and
processed when ctest is run on the directory.

VARIABLES
---------

List of variables defined in the current directory.

This read-only property specifies the list of CMake variables
currently defined.  It is intended for debugging purposes.

VS_GLOBAL_SECTION_POST_<section>
--------------------------------

Specify a postSolution global section in Visual Studio.

Setting a property like this generates an entry of the following form
in the solution file:

::

 GlobalSection(<section>) = postSolution
   <contents based on property value>
 EndGlobalSection

The property must be set to a semicolon-separated list of key=value
pairs.  Each such pair will be transformed into an entry in the
solution global section.  Whitespace around key and value is ignored.
List elements which do not contain an equal sign are skipped.

This property only works for Visual Studio 7 and above; it is ignored
on other generators.  The property only applies when set on a
directory whose CMakeLists.txt contains a project() command.

Note that CMake generates postSolution sections ExtensibilityGlobals
and ExtensibilityAddIns by default.  If you set the corresponding
property, it will override the default section.  For example, setting
VS_GLOBAL_SECTION_POST_ExtensibilityGlobals will override the default
contents of the ExtensibilityGlobals section, while keeping
ExtensibilityAddIns on its default.

VS_GLOBAL_SECTION_PRE_<section>
-------------------------------

Specify a preSolution global section in Visual Studio.

Setting a property like this generates an entry of the following form
in the solution file:

::

 GlobalSection(<section>) = preSolution
   <contents based on property value>
 EndGlobalSection

The property must be set to a semicolon-separated list of key=value
pairs.  Each such pair will be transformed into an entry in the
solution global section.  Whitespace around key and value is ignored.
List elements which do not contain an equal sign are skipped.

This property only works for Visual Studio 7 and above; it is ignored
on other generators.  The property only applies when set on a
directory whose CMakeLists.txt contains a project() command.

VS_STARTUP_PROJECT
------------------

Specify the default startup project in a Visual Studio solution.

The :ref:`Visual Studio Generators` create a ``.sln`` file for each directory
whose ``CMakeLists.txt`` file calls the ``project()`` command.  Set this
property in the same directory as a ``project()`` command call (e.g. in
the top-level ``CMakeLists.txt`` file) to specify the default startup project
for the correpsonding solution file.

The property must be set to the name of an existing target.  This
will cause that project to be listed first in the generated solution
file causing Visual Studio to make it the startup project if the
solution has never been opened before.

If this property is not specified, then the ``ALL_BUILD`` project
will be the default.

Properties on Targets
=====================

ALIASED_TARGET
--------------

Name of target aliased by this target.

If this is an :ref:`Alias Target <Alias Targets>`, this property contains
the name of the target aliased.

ANDROID_ANT_ADDITIONAL_OPTIONS
------------------------------

Set the additional options for Android Ant build system. This is
a string value containing all command line options for the Ant build.
This property is initialized by the value of the
``CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS`` variable if it is
set when a target is created.

ANDROID_API
-----------

Set the Android Target API version (e.g. ``15``).  The version number
must be a positive decimal integer.  This property is initialized by
the value of the ``CMAKE_ANDROID_API`` variable if it is set
when a target is created.

ANDROID_API_MIN
---------------

Set the Android MIN API version (e.g. ``9``).  The version number
must be a positive decimal integer.  This property is initialized by
the value of the ``CMAKE_ANDROID_API_MIN`` variable if it is set
when a target is created.  Native code builds using this API version.

ANDROID_ARCH
------------

Set the Android target architecture.

This is a string property that could be set to the one of
the following values:

* ``armv7-a``: "ARMv7-A (armv7-a)"
* ``armv7-a-hard``: "ARMv7-A, hard-float ABI (armv7-a)"
* ``arm64-v8a``: "ARMv8-A, 64bit (arm64-v8a)"
* ``x86``: "x86 (x86)"
* ``x86_64``: "x86_64 (x86_64)"

This property is initialized by the value of the
``CMAKE_ANDROID_ARCH`` variable if it is set
when a target is created.

ANDROID_ASSETS_DIRECTORIES
--------------------------

Set the Android assets directories to copy into the main assets
folder before build. This a string property that contains the
directory paths separated by semicolon.
This property is initialized by the value of the
``CMAKE_ANDROID_ASSETS_DIRECTORIES`` variable if it is set when
a target is created.

ANDROID_GUI
-----------

Build an executable as an application package on Android.

When this property is set to true the executable when built for Android
will be created as an application package.  This property is initialized
by the value of the ``CMAKE_ANDROID_GUI`` variable if it is set
when a target is created.

Add the ``AndroidManifest.xml`` source file explicitly to the
target ``add_executable()`` command invocation to specify the
root directory of the application package source.

ANDROID_JAR_DEPENDENCIES
------------------------

Set the Android property that specifies JAR dependencies.
This is a string value property. This property is initialized
by the value of the ``CMAKE_ANDROID_JAR_DEPENDENCIES``
variable if it is set when a target is created.

ANDROID_JAR_DIRECTORIES
-----------------------

Set the Android property that specifies directories to search for
the JAR libraries.

This a string property that contains the directory paths separated by
semicolons. This property is initialized by the value of the
``CMAKE_ANDROID_JAR_DIRECTORIES`` variable if it is set when
a target is created.

Contents of ``ANDROID_JAR_DIRECTORIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.

ANDROID_JAVA_SOURCE_DIR
-----------------------

Set the Android property that defines the Java source code root directories.
This a string property that contains the directory paths separated by semicolon.
This property is initialized by the value of the
``CMAKE_ANDROID_JAVA_SOURCE_DIR`` variable if it is set
when a target is created.

ANDROID_NATIVE_LIB_DEPENDENCIES
-------------------------------

Set the Android property that specifies the .so dependencies.
This is a string property.

This property is initialized by the value of the
``CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES`` variable if it is set
when a target is created.

Contents of ``ANDROID_NATIVE_LIB_DEPENDENCIES`` may use
"generator expressions" with the syntax ``$<...>``. See the
``cmake-generator-expressions(7)`` manual for
available expressions.

ANDROID_NATIVE_LIB_DIRECTORIES
------------------------------

Set the Android property that specifies directories to search for the
.so libraries.

This a string property that contains the directory paths separated
by semicolons.

This property is initialized by the value of the
``CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES`` variable if it is set when a
target is created.

Contents of ``ANDROID_NATIVE_LIB_DIRECTORIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.

ANDROID_PROCESS_MAX
-------------------

Set the Android property that defines the maximum number of a
parallel Android NDK compiler processes (e.g. ``4``).
This property is initialized by the value of the
``CMAKE_ANDROID_PROCESS_MAX`` variable if it is set
when a target is created.

ANDROID_PROGUARD
----------------

When this property is set to true that enables the ProGuard tool to shrink,
optimize, and obfuscate the code by removing unused code and renaming
classes, fields, and methods with semantically obscure names.
This property is initialized by the value of the
``CMAKE_ANDROID_PROGUARD`` variable if it is set
when a target is created.

ANDROID_PROGUARD_CONFIG_PATH
----------------------------

Set the Android property that specifies the location of the ProGuard
config file. Leave empty to use the default one.
This a string property that contains the path to ProGuard config file.
This property is initialized by the value of the
``CMAKE_ANDROID_PROGUARD_CONFIG_PATH`` variable if it is set
when a target is created.

ANDROID_SECURE_PROPS_PATH
-------------------------

Set the Android property that states the location of the secure properties file.
This is a string property that contains the file path.
This property is initialized by the value of the
``CMAKE_ANDROID_SECURE_PROPS_PATH`` variable
if it is set when a target is created.

ANDROID_SKIP_ANT_STEP
---------------------

Set the Android property that defines whether or not to skip the Ant build step.
This is a boolean property initialized by the value of the
``CMAKE_ANDROID_SKIP_ANT_STEP`` variable if it is set when a target is created.

ANDROID_STL_TYPE
----------------

Set the Android property that defines the type of STL support for the project.
This is a string property that could set to the one of the following values:
``none``           e.g. "No C++ Support"
``system``         e.g. "Minimal C++ without STL"
``gabi++_static``  e.g. "GAbi++ Static"
``gabi++_shared``  e.g. "GAbi++ Shared"
``gnustl_static``  e.g. "GNU libstdc++ Static"
``gnustl_shared``  e.g. "GNU libstdc++ Shared"
``stlport_static`` e.g. "STLport Static"
``stlport_shared`` e.g. "STLport Shared"
This property is initialized by the value of the
variable:`CMAKE_ANDROID_STL_TYPE` variable if it is set when a target is created.

ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`ARCHIVE <Archive Output Artifacts>` target files.

This is a per-configuration version of the
``ARCHIVE_OUTPUT_DIRECTORY`` target property, but
multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
``CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` variable if
it is set when a target is created.

Contents of ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` may use
``generator expressions``.

ARCHIVE_OUTPUT_DIRECTORY
------------------------

Output directory in which to build :ref:`ARCHIVE <Archive Output Artifacts>` target files.

This property specifies the directory into which archive target files
should be built.  The property value may use
``generator expressions``.
Multi-configuration generators (VS, Xcode) append a per-configuration
subdirectory to the specified directory unless a generator expression
is used.

This property is initialized by the value of the variable
CMAKE_ARCHIVE_OUTPUT_DIRECTORY if it is set when a target is created.

See also the ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` target property.

ARCHIVE_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`ARCHIVE <Archive Output Artifacts>` target files.

This is the configuration-specific version of the
``ARCHIVE_OUTPUT_NAME`` target property.

ARCHIVE_OUTPUT_NAME
-------------------

Output name for :ref:`ARCHIVE <Archive Output Artifacts>` target files.

This property specifies the base name for archive target files.  It
overrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``
properties.

See also the ``ARCHIVE_OUTPUT_NAME_<CONFIG>`` target property.

AUTOGEN_TARGET_DEPENDS
----------------------

Target dependencies of the corresponding ``_automoc`` target.

Targets which have their ``AUTOMOC`` target ``ON`` have a
corresponding ``_automoc`` target which is used to autogenerate generate moc
files.  As this ``_automoc`` target is created at generate-time, it is not
possible to define dependencies of it, such as to create inputs for the ``moc``
executable.

The ``AUTOGEN_TARGET_DEPENDS`` target property can be set instead to a list of
dependencies for the ``_automoc`` target.  The buildsystem will be generated to
depend on its contents.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTOMOC_MOC_OPTIONS
-------------------

Additional options for moc when using ``AUTOMOC``

This property is only used if the ``AUTOMOC`` property is ``ON``
for this target.  In this case, it holds additional command line
options which will be used when ``moc`` is executed during the build, i.e.
it is equivalent to the optional ``OPTIONS`` argument of the
``qt4_wrap_cpp()`` macro.

By default it is empty.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTOMOC
-------

Should the target be processed with automoc (for Qt projects).

AUTOMOC is a boolean specifying whether CMake will handle the Qt ``moc``
preprocessor automatically, i.e.  without having to use the
``QT4_WRAP_CPP()`` or QT5_WRAP_CPP() macro.  Currently Qt4 and Qt5 are
supported.

When this property is set ``ON``, CMake will scan the
source files at build time and invoke moc accordingly.

* If an ``#include`` statement like ``#include "moc_foo.cpp"`` is found,
  the ``Q_OBJECT`` class declaration is expected in the header, and
  ``moc`` is run on the header file.  A ``moc_foo.cpp`` file will be
  generated from the source's header into the
  ``CMAKE_CURRENT_BINARY_DIR`` directory.  This allows the
  compiler to find the included ``moc_foo.cpp`` file regardless of the
  location the original source.  However, if multiple source files
  in different directories do this then their generated moc files would
  collide.  In this case a diagnostic will be issued.

* If an ``#include`` statement like ``#include "foo.moc"`` is found,
  then a ``Q_OBJECT`` is expected in the current source file and ``moc``
  is run on the file itself.  Additionally, header files with the same
  base name (like ``foo.h``) or ``_p`` appended to the base name (like
  ``foo_p.h``) are parsed for ``Q_OBJECT`` macros, and if found, ``moc``
  is also executed on those files.  ``AUTOMOC`` checks multiple header
  alternative extensions, such as ``hpp``, ``hxx`` etc when searching
  for headers.  The resulting moc files, which are not included as shown
  above in any of the source files are included in a generated
  ``<targetname>_automoc.cpp`` file, which is compiled as part of the
  target.

This property is initialized by the value of the ``CMAKE_AUTOMOC``
variable if it is set when a target is created.

Additional command line options for moc can be set via the
``AUTOMOC_MOC_OPTIONS`` property.

By enabling the ``CMAKE_AUTOMOC_RELAXED_MODE`` variable the
rules for searching the files which will be processed by moc can be relaxed.
See the documentation for this variable for more details.

The global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group the
automoc targets together in an IDE, e.g.  in MSVS.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTOUIC
-------

Should the target be processed with autouic (for Qt projects).

``AUTOUIC`` is a boolean specifying whether CMake will handle
the Qt ``uic`` code generator automatically, i.e. without having to use
the ``QT4_WRAP_UI()`` or ``QT5_WRAP_UI()`` macro. Currently
Qt4 and Qt5 are supported.

When this property is ``ON``, CMake will scan the source files at build time
and invoke ``uic`` accordingly.  If an ``#include`` statement like
``#include "ui_foo.h"`` is found in ``foo.cpp``, a ``foo.ui`` file is
expected next to ``foo.cpp``, and ``uic`` is run on the ``foo.ui`` file.
This property is initialized by the value of the ``CMAKE_AUTOUIC``
variable if it is set when a target is created.

Additional command line options for ``uic`` can be set via the
``AUTOUIC_OPTIONS`` source file property on the ``foo.ui`` file.
The global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group the
autouic targets together in an IDE, e.g. in MSVS.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTOUIC_OPTIONS
---------------

Additional options for uic when using ``AUTOUIC``

This property holds additional command line options which will be used when
``uic`` is executed during the build via ``AUTOUIC``, i.e. it is
equivalent to the optional ``OPTIONS`` argument of the
``qt4_wrap_ui()`` macro.

By default it is empty.

This property is initialized by the value of the
``CMAKE_AUTOUIC_OPTIONS`` variable if it is set when a target is
created.

The options set on the target may be overridden by ``AUTOUIC_OPTIONS``
set on the ``.ui`` source file.

This property may use "generator expressions" with the syntax ``$<...>``.
See the ``cmake-generator-expressions(7)`` manual for available
expressions.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTORCC
-------

Should the target be processed with autorcc (for Qt projects).

``AUTORCC`` is a boolean specifying whether CMake will handle
the Qt ``rcc`` code generator automatically, i.e. without having to use
the ``QT4_ADD_RESOURCES()`` or ``QT5_ADD_RESOURCES()``
macro.  Currently Qt4 and Qt5 are supported.

When this property is ``ON``, CMake will handle ``.qrc`` files added
as target sources at build time and invoke ``rcc`` accordingly.
This property is initialized by the value of the ``CMAKE_AUTORCC``
variable if it is set when a target is created.

Additional command line options for rcc can be set via the
``AUTORCC_OPTIONS`` source file property on the ``.qrc`` file.

The global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group
the autorcc targets together in an IDE, e.g. in MSVS.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

AUTORCC_OPTIONS
---------------

Additional options for ``rcc`` when using ``AUTORCC``

This property holds additional command line options which will be used
when ``rcc`` is executed during the build via ``AUTORCC``,
i.e. it is equivalent to the optional ``OPTIONS`` argument of the
``qt4_add_resources()`` macro.

By default it is empty.

This property is initialized by the value of the
``CMAKE_AUTORCC_OPTIONS`` variable if it is set when a target is
created.

The options set on the target may be overridden by ``AUTORCC_OPTIONS``
set on the ``.qrc`` source file.

See the ``cmake-qt(7)`` manual for more information on using CMake
with Qt.

BINARY_DIR
----------

This read-only property reports the value of the
``CMAKE_CURRENT_BINARY_DIR`` variable in the directory in which
the target was defined.

BUILD_WITH_INSTALL_RPATH
------------------------

Should build tree targets have install tree rpaths.

BUILD_WITH_INSTALL_RPATH is a boolean specifying whether to link the
target in the build tree with the INSTALL_RPATH.  This takes
precedence over SKIP_BUILD_RPATH and avoids the need for relinking
before installation.  This property is initialized by the value of the
variable CMAKE_BUILD_WITH_INSTALL_RPATH if it is set when a target is
created.

BUNDLE_EXTENSION
----------------

The file extension used to name a ``BUNDLE`` target on the OS X and iOS.

The default value is ``bundle`` - you can also use ``plugin`` or whatever
file extension is required by the host app for your bundle.

BUNDLE
------

This target is a ``CFBundle`` on the OS X.

If a module library target has this property set to true it will be
built as a ``CFBundle`` when built on the mac.  It will have the directory
structure required for a ``CFBundle`` and will be suitable to be used for
creating Browser Plugins or other application resources.

C_EXTENSIONS
------------

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This
property is ``ON`` by default. The basic C standard level is
controlled by the ``C_STANDARD`` target property.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_C_EXTENSIONS`` variable if it is set when a target
is created.

C_STANDARD
----------

The C standard whose features are requested to build this target.

This property specifies the C standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu11`` to the compile line.  For compilers that
have no notion of a standard level, such as MSVC, this has no effect.

Supported values are ``90``, ``99`` and ``11``.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

 set_property(TARGET tgt PROPERTY C_STANDARD 11)

with a compiler which does not support ``-std=gnu11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This "decay" behavior may
be controlled with the ``C_STANDARD_REQUIRED`` target property.
Additionally, the ``C_EXTENSIONS`` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_C_STANDARD`` variable if it is set when a target
is created.

C_STANDARD_REQUIRED
-------------------

Boolean describing whether the value of ``C_STANDARD`` is a requirement.

If this property is set to ``ON``, then the value of the
``C_STANDARD`` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the ``C_STANDARD`` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.  For compilers that have no notion of a standard level, such as
MSVC, this has no effect.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_C_STANDARD_REQUIRED`` variable if it is set when a
target is created.

COMPATIBLE_INTERFACE_BOOL
-------------------------

Properties which must be compatible with their link interface

The ``COMPATIBLE_INTERFACE_BOOL`` property may contain a list of
properties for this target which must be consistent when evaluated as a
boolean with the ``INTERFACE`` variant of the property in all linked
dependees.  For example, if a property ``FOO`` appears in the list, then
for each dependee, the ``INTERFACE_FOO`` property content in all of its
dependencies must be consistent with each other, and with the ``FOO``
property in the depender.

Consistency in this sense has the meaning that if the property is set,
then it must have the same boolean value as all others, and if the
property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.

COMPATIBLE_INTERFACE_NUMBER_MAX
-------------------------------

Properties whose maximum value from the link interface will be used.

The ``COMPATIBLE_INTERFACE_NUMBER_MAX`` property may contain a list of
properties for this target whose maximum value may be read at generate
time when evaluated in the ``INTERFACE`` variant of the property in all
linked dependees.  For example, if a property ``FOO`` appears in the list,
then for each dependee, the ``INTERFACE_FOO`` property content in all of
its dependencies will be compared with each other and with the ``FOO``
property in the depender.  When reading the ``FOO`` property at generate
time, the maximum value will be returned. If the property is not set,
then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.

COMPATIBLE_INTERFACE_NUMBER_MIN
-------------------------------

Properties whose maximum value from the link interface will be used.

The ``COMPATIBLE_INTERFACE_NUMBER_MIN`` property may contain a list of
properties for this target whose minimum value may be read at generate
time when evaluated in the ``INTERFACE`` variant of the property of all
linked dependees.  For example, if a
property ``FOO`` appears in the list, then for each dependee, the
``INTERFACE_FOO`` property content in all of its dependencies will be
compared with each other and with the ``FOO`` property in the depender.
When reading the ``FOO`` property at generate time, the minimum value
will be returned.  If the property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.

COMPATIBLE_INTERFACE_STRING
---------------------------

Properties which must be string-compatible with their link interface

The ``COMPATIBLE_INTERFACE_STRING`` property may contain a list of
properties for this target which must be the same when evaluated as a
string in the ``INTERFACE`` variant of the property all linked dependees.
For example, if a property ``FOO`` appears in the list, then for each
dependee, the ``INTERFACE_FOO`` property content in all of its
dependencies must be equal with each other, and with the ``FOO`` property
in the depender.  If the property is not set, then it is ignored.

Note that for each dependee, the set of properties specified in this
property must not intersect with the set specified in any of the other
:ref:`Compatible Interface Properties`.

COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a target's sources.

The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated
list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).

CMake will automatically drop some definitions that are not supported
by the native build tool.

Disclaimer: Most native build tools have poor support for escaping
certain values.  CMake has work-arounds for many cases but some values
may just not be possible to pass correctly.  If a value does not seem
to be escaped correctly, do not attempt to work-around the problem by
adding escape sequences to the value.  Your work-around may break in a
future version of CMake that has improved escape support.  Instead
consider defining the macro in a (configured) header file.  Then
report the limitation.  Known limitations include::

 #          - broken almost everywhere
 ;          - broken in VS IDE 7.0 and Borland Makefiles
 ,          - broken in VS IDE
 %          - broken in some cases in NMake
 & |        - broken in some cases on MinGW
 ^ < > \"   - broken in most Make tools on Windows

CMake does not reject these values outright because they do work in
some cases.  Use with caution.

Contents of ``COMPILE_DEFINITIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual
for available expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

The corresponding ``COMPILE_DEFINITIONS_<CONFIG>`` property may
be set to specify per-configuration definitions.  Generator expressions
should be preferred instead of setting the alternative property.

COMPILE_FEATURES
----------------

Compiler features enabled for this target.

The list of features in this property are a subset of the features listed
in the ``CMAKE_CXX_COMPILE_FEATURES`` variable.

Contents of ``COMPILE_FEATURES`` may use "generator expressions" with the
syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual for
available expressions.  See the ``cmake-compile-features(7)`` manual
for information on compile features and a list of supported compilers.

COMPILE_FLAGS
-------------

Additional flags to use when compiling this target's sources.

The ``COMPILE_FLAGS`` property sets additional compiler flags used to
build sources within the target.  Use ``COMPILE_DEFINITIONS``
to pass additional preprocessor definitions.

This property is deprecated.  Use the ``COMPILE_OPTIONS``
property or the command:`target_compile_options` command instead.

COMPILE_OPTIONS
---------------

List of options to pass to the compiler.

This property holds a :ref:`;-list <CMake Language Lists>` of options
specified so far for its target.  Use the ``target_compile_options()``
command to append more options.

This property is initialized by the ``COMPILE_OPTIONS`` directory
property when a target is created, and is used by the generators to set
the options for the compiler.

Contents of ``COMPILE_OPTIONS`` may use "generator expressions" with the
syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual
for available expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

COMPILE_PDB_NAME
----------------

Output name for the MS debug symbol ``.pdb`` file generated by the
compiler while building source files.

This property specifies the base name for the debug symbols file.
If not set, the default is unspecified.

.. note::
 The compiler-generated program database files are specified by the
 ``/Fd`` compiler flag and are not the same as linker-generated
 program database files specified by the ``/pdb`` linker flag.
 Use the ``PDB_NAME`` property to specify the latter.

COMPILE_PDB_NAME_<CONFIG>
-------------------------

Per-configuration output name for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This is the configuration-specific version of ``COMPILE_PDB_NAME``.

.. note::
 The compiler-generated program database files are specified by the
 ``/Fd`` compiler flag and are not the same as linker-generated
 program database files specified by the ``/pdb`` linker flag.
 Use the ``PDB_NAME_<CONFIG>`` property to specify the latter.

COMPILE_PDB_OUTPUT_DIRECTORY
----------------------------

Output directory for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This property specifies the directory into which the MS debug symbols
will be placed by the compiler.  This property is initialized by the
value of the ``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY`` variable
if it is set when a target is created.

.. note::
 The compiler-generated program database files are specified by the
 ``/Fd`` compiler flag and are not the same as linker-generated
 program database files specified by the ``/pdb`` linker flag.
 Use the ``PDB_OUTPUT_DIRECTORY`` property to specify the latter.

COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-------------------------------------

Per-configuration output directory for the MS debug symbol ``.pdb`` file
generated by the compiler while building source files.

This is a per-configuration version of
``COMPILE_PDB_OUTPUT_DIRECTORY``,
but multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable
if it is set when a target is created.

.. note::
 The compiler-generated program database files are specified by the
 ``/Fd`` compiler flag and are not the same as linker-generated
 program database files specified by the ``/pdb`` linker flag.
 Use the ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.

<CONFIG>_OUTPUT_NAME
--------------------

Old per-configuration target file base name.
Use ``OUTPUT_NAME_<CONFIG>`` instead.

This is a configuration-specific version of the ``OUTPUT_NAME``
target property.

<CONFIG>_POSTFIX
----------------

Postfix to append to the target file name for configuration <CONFIG>.

When building with configuration <CONFIG> the value of this property
is appended to the target file name built on disk.  For non-executable
targets, this property is initialized by the value of the variable
CMAKE_<CONFIG>_POSTFIX if it is set when a target is created.  This
property is ignored on the Mac for Frameworks and App Bundles.

CROSSCOMPILING_EMULATOR
-----------------------

Use the given emulator to run executables created when crosscompiling.
This command will be added as a prefix to ``add_test()``,
``add_custom_command()``, and ``add_custom_target()`` commands
for built target system executables.

CXX_EXTENSIONS
--------------

Boolean specifying whether compiler specific extensions are requested.

This property specifies whether compiler specific extensions should be
used.  For some compilers, this results in adding a flag such
as ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This
property is ``ON`` by default. The basic C++ standard level is
controlled by the ``CXX_STANDARD`` target property.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_CXX_EXTENSIONS`` variable if it is set when a target
is created.

CXX_STANDARD
------------

The C++ standard whose features are requested to build this target.

This property specifies the C++ standard whose features are requested
to build this target.  For some compilers, this results in adding a
flag such as ``-std=gnu++11`` to the compile line.  For compilers that
have no notion of a standard level, such as MSVC, this has no effect.

Supported values are ``98``, ``11`` and ``14``.

If the value requested does not result in a compile flag being added for
the compiler in use, a previous standard flag will be added instead.  This
means that using:

 set_property(TARGET tgt PROPERTY CXX_STANDARD 11)

with a compiler which does not support ``-std=gnu++11`` or an equivalent
flag will not result in an error or warning, but will instead add the
``-std=gnu++98`` flag if supported.  This "decay" behavior may be controlled
with the ``CXX_STANDARD_REQUIRED`` target property.
Additionally, the ``CXX_EXTENSIONS`` target property may be used to
control whether compiler-specific extensions are enabled on a per-target basis.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_CXX_STANDARD`` variable if it is set when a target
is created.

CXX_STANDARD_REQUIRED
---------------------

Boolean describing whether the value of ``CXX_STANDARD`` is a requirement.

If this property is set to ``ON``, then the value of the
``CXX_STANDARD`` target property is treated as a requirement.  If this
property is ``OFF`` or unset, the ``CXX_STANDARD`` target property is
treated as optional and may "decay" to a previous standard if the requested is
not available.  For compilers that have no notion of a standard level, such as
MSVC, this has no effect.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

This property is initialized by the value of
the ``CMAKE_CXX_STANDARD_REQUIRED`` variable if it is set when a
target is created.

DEBUG_POSTFIX
-------------

See target property <CONFIG>_POSTFIX.

This property is a special case of the more-general <CONFIG>_POSTFIX
property for the DEBUG configuration.

DEFINE_SYMBOL
-------------

Define a symbol when compiling this target's sources.

DEFINE_SYMBOL sets the name of the preprocessor symbol defined when
compiling sources in a shared library.  If not set here then it is set
to target_EXPORTS by default (with some substitutions if the target is
not a valid C identifier).  This is useful for headers to know whether
they are being included from inside their library or outside to
properly setup dllexport/dllimport decorations.

DEPLOYMENT_REMOTE_DIRECTORY
---------------------------

Set the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and
``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated
by the ``Visual Studio 9 2008`` and ``Visual Studio 8 2005``
generators.  This is useful when you want to debug on remote WinCE device.
For example:

 set_property(TARGET ${TARGET} PROPERTY
   DEPLOYMENT_REMOTE_DIRECTORY "\\FlashStorage")

produces::

 <DeploymentTool RemoteDirectory="\FlashStorage" ... />
 <DebuggerTool RemoteExecutable="\FlashStorage\target_file" ... />

EchoString
----------

A message to be displayed when the target is built.

A message to display on some generators (such as makefiles) when the
target is built.

ENABLE_EXPORTS
--------------

Specify whether an executable exports symbols for loadable modules.

Normally an executable does not export any symbols because it is the
final program.  It is possible for an executable to export symbols to
be used by loadable modules.  When this property is set to true CMake
will allow other targets to "link" to the executable with the
``TARGET_LINK_LIBRARIES()`` command.  On all platforms a target-level
dependency on the executable is created for targets that link to it.
For DLL platforms an import library will be created for the exported
symbols and then used for linking.  All Windows-based systems
including Cygwin are DLL platforms.  For non-DLL platforms that
require all symbols to be resolved at link time, such as OS X, the
module will "link" to the executable using a flag like
``-bundle_loader``.  For other non-DLL platforms the link rule is simply
ignored since the dynamic loader will automatically bind symbols when
the module is loaded.

This property is initialized by the value of the variable
``CMAKE_ENABLE_EXPORTS`` if it is set when a target is created.

EXCLUDE_FROM_ALL
----------------

Exclude the target from the all target.

A property on a target that indicates if the target is excluded from
the default build target.  If it is not, then with a Makefile for
example typing make will cause this target to be built.  The same
concept applies to the default build of other generators.  Installing
a target with EXCLUDE_FROM_ALL set to true has undefined behavior.

EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>
-----------------------------------

Per-configuration version of target exclusion from "Build Solution".

This is the configuration-specific version of
EXCLUDE_FROM_DEFAULT_BUILD.  If the generic EXCLUDE_FROM_DEFAULT_BUILD
is also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> takes
precedence in configurations for which it has a value.

EXCLUDE_FROM_DEFAULT_BUILD
--------------------------

Exclude target from "Build Solution".

This property is only used by Visual Studio generators 7 and above.
When set to TRUE, the target will not be built when you press "Build
Solution".

EXPORT_NAME
-----------

Exported name for target files.

This sets the name for the IMPORTED target generated when it this
target is is exported.  If not set, the logical target name is used by
default.

FOLDER
------

Set the folder name. Use to organize targets in an IDE.

Targets with no FOLDER property will appear as top level entities in
IDEs like Visual Studio.  Targets with the same FOLDER property value
will appear next to each other in a folder of that name.  To nest
folders, use FOLDER values such as 'GUI/Dialogs' with '/' characters
separating folder levels.

Fortran_FORMAT
--------------

Set to FIXED or FREE to indicate the Fortran source layout.

This property tells CMake whether the Fortran source files in a target
use fixed-format or free-format.  CMake will pass the corresponding
format flag to the compiler.  Use the source-specific Fortran_FORMAT
property to change the format of a specific source file.  If the
variable CMAKE_Fortran_FORMAT is set when a target is created its
value is used to initialize this property.

Fortran_MODULE_DIRECTORY
------------------------

Specify output directory for Fortran modules provided by the target.

If the target contains Fortran source files that provide modules and
the compiler supports a module output directory this specifies the
directory in which the modules will be placed.  When this property is
not set the modules will be placed in the build directory
corresponding to the target's source directory.  If the variable
CMAKE_Fortran_MODULE_DIRECTORY is set when a target is created its
value is used to initialize this property.

Note that some compilers will automatically search the module output
directory for modules USEd during compilation but others will not.  If
your sources USE modules their location must be specified by
INCLUDE_DIRECTORIES regardless of this property.

FRAMEWORK
---------

Build ``SHARED`` library as Framework Bundle on the OS X and iOS.

If a ``SHARED`` library target has this property set to ``TRUE`` it will be
built as a framework when built on the OS X and iOS.  It will have the
directory structure required for a framework and will be suitable to
be used with the ``-framework`` option

To customize ``Info.plist`` file in the framework, use
``MACOSX_FRAMEWORK_INFO_PLIST`` target property.

For OS X see also the ``FRAMEWORK_VERSION`` target property.

Example of creation ``dynamicFramework``:

 add_library(dynamicFramework SHARED
             dynamicFramework.c
             dynamicFramework.h
 )
 set_target_properties(dynamicFramework PROPERTIES
   FRAMEWORK TRUE
   FRAMEWORK_VERSION C
   MACOSX_FRAMEWORK_IDENTIFIER com.cmake.dynamicFramework
   MACOSX_FRAMEWORK_INFO_PLIST Info.plist
   # "current version" in semantic format in Mach-O binary file
   VERSION 16.4.0
   # "compatibility version" in semantic format in Mach-O binary file
   SOVERSION 1.0.0
   PUBLIC_HEADER dynamicFramework.h
   XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer"
 )

FRAMEWORK_VERSION
-----------------

Version of a framework created using the ``FRAMEWORK`` target
property (e.g. ``A``).

This property only affects OS X, as iOS doesn't have versioned
directory structure.

GENERATOR_FILE_NAME
-------------------

Generator's file for this target.

An internal property used by some generators to record the name of the
project or dsp file associated with this target.  Note that at
configure time, this property is only set for targets created by
include_external_msproject().

GNUtoMS
-------

Convert GNU import library (.dll.a) to MS format (.lib).

When linking a shared library or executable that exports symbols using
GNU tools on Windows (MinGW/MSYS) with Visual Studio installed convert
the import library (.dll.a) from GNU to MS format (.lib).  Both import
libraries will be installed by install(TARGETS) and exported by
install(EXPORT) and export() to be linked by applications with either
GNU- or MS-compatible tools.

If the variable CMAKE_GNUtoMS is set when a target is created its
value is used to initialize this property.  The variable must be set
prior to the first command that enables a language such as project()
or enable_language().  CMake provides the variable as an option to the
user automatically when configuring on Windows with GNU tools.

HAS_CXX
-------

Link the target using the C++ linker tool (obsolete).

This is equivalent to setting the LINKER_LANGUAGE property to CXX.
See that property's documentation for details.

IMPLICIT_DEPENDS_INCLUDE_TRANSFORM
----------------------------------

Specify #include line transforms for dependencies in a target.

This property specifies rules to transform macro-like #include lines
during implicit dependency scanning of C and C++ source files.  The
list of rules must be semicolon-separated with each entry of the form
"A_MACRO(%)=value-with-%" (the % must be literal).  During dependency
scanning occurrences of A_MACRO(...) on #include lines will be
replaced by the value given with the macro argument substituted for
'%'.  For example, the entry

::

 MYDIR(%)=<mydir/%>

will convert lines of the form

::

 #include MYDIR(myheader.h)

to

::

 #include <mydir/myheader.h>

allowing the dependency to be followed.

This property applies to sources in the target on which it is set.

IMPORTED_CONFIGURATIONS
-----------------------

Configurations provided for an IMPORTED target.

Set this to the list of configuration names available for an IMPORTED
target.  The names correspond to configurations defined in the project
from which the target is imported.  If the importing project uses a
different set of configurations the names may be mapped using the
MAP_IMPORTED_CONFIG_<CONFIG> property.  Ignored for non-imported
targets.

IMPORTED_IMPLIB_<CONFIG>
------------------------

<CONFIG>-specific version of IMPORTED_IMPLIB property.

Configuration names correspond to those provided by the project from
which the target is imported.

IMPORTED_IMPLIB
---------------

Full path to the import library for an IMPORTED target.

Set this to the location of the ".lib" part of a windows DLL.  Ignored
for non-imported targets.

IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.

IMPORTED_LINK_DEPENDENT_LIBRARIES
---------------------------------

Dependent shared libraries of an imported shared library.

Shared libraries may be linked to other shared libraries as part of
their implementation.  On some platforms the linker searches for the
dependent libraries of shared libraries they are including in the
link.  Set this property to the list of dependent shared libraries of
an imported library.  The list should be disjoint from the list of
interface libraries in the INTERFACE_LINK_LIBRARIES property.  On
platforms requiring dependent shared libraries to be found at link
time CMake uses this list to add appropriate files or paths to the
link command line.  Ignored for non-imported targets.

IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.

IMPORTED_LINK_INTERFACE_LANGUAGES
---------------------------------

Languages compiled into an IMPORTED static library.

Set this to the list of languages of source files compiled to produce
a STATIC IMPORTED library (such as "C" or "CXX").  CMake accounts for
these languages when computing how to link a target to the imported
library.  For example, when a C executable links to an imported C++
static library CMake chooses the C++ linker to satisfy language
runtime dependencies of the static library.

This property is ignored for targets that are not STATIC libraries.
This property is ignored for non-imported targets.

IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>
------------------------------------------

<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.

Configuration names correspond to those provided by the project from
which the target is imported.  If set, this property completely
overrides the generic property for the named configuration.

This property is ignored if the target also has a non-empty
INTERFACE_LINK_LIBRARIES property.

This property is deprecated.  Use INTERFACE_LINK_LIBRARIES instead.

IMPORTED_LINK_INTERFACE_LIBRARIES
---------------------------------

Transitive link interface of an IMPORTED target.

Set this to the list of libraries whose interface is included when an
IMPORTED library target is linked to another target.  The libraries
will be included on the link line for the target.  Unlike the
LINK_INTERFACE_LIBRARIES property, this property applies to all
imported target types, including STATIC libraries.  This property is
ignored for non-imported targets.

This property is ignored if the target also has a non-empty
INTERFACE_LINK_LIBRARIES property.

This property is deprecated.  Use INTERFACE_LINK_LIBRARIES instead.

IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>
---------------------------------------------

<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.

If set, this property completely overrides the generic property for
the named configuration.

IMPORTED_LINK_INTERFACE_MULTIPLICITY
------------------------------------

Repetition count for cycles of IMPORTED static libraries.

This is LINK_INTERFACE_MULTIPLICITY for IMPORTED targets.

IMPORTED_LOCATION_<CONFIG>
--------------------------

<CONFIG>-specific version of IMPORTED_LOCATION property.

Configuration names correspond to those provided by the project from
which the target is imported.

IMPORTED_LOCATION
-----------------

Full path to the main file on disk for an IMPORTED target.

Set this to the location of an IMPORTED target file on disk.  For
executables this is the location of the executable file.  For bundles
on OS X this is the location of the executable file inside
Contents/MacOS under the application bundle folder.  For static
libraries and modules this is the location of the library or module.
For shared libraries on non-DLL platforms this is the location of the
shared library.  For frameworks on OS X this is the location of the
library file symlink just inside the framework folder.  For DLLs this
is the location of the ".dll" part of the library.  For UNKNOWN
libraries this is the location of the file to be linked.  Ignored for
non-imported targets.

Projects may skip IMPORTED_LOCATION if the configuration-specific
property IMPORTED_LOCATION_<CONFIG> is set.  To get the location of an
imported target read one of the LOCATION or LOCATION_<CONFIG>
properties.

IMPORTED_NO_SONAME_<CONFIG>
---------------------------

<CONFIG>-specific version of IMPORTED_NO_SONAME property.

Configuration names correspond to those provided by the project from
which the target is imported.

IMPORTED_NO_SONAME
------------------

Specifies that an IMPORTED shared library target has no "soname".

Set this property to true for an imported shared library file that has
no "soname" field.  CMake may adjust generated link commands for some
platforms to prevent the linker from using the path to the library in
place of its missing soname.  Ignored for non-imported targets.

IMPORTED
--------

Read-only indication of whether a target is IMPORTED.

The boolean value of this property is ``True`` for targets created with
the IMPORTED option to ``add_executable()`` or ``add_library()``.
It is ``False`` for targets built within the project.

IMPORTED_SONAME_<CONFIG>
------------------------

<CONFIG>-specific version of IMPORTED_SONAME property.

Configuration names correspond to those provided by the project from
which the target is imported.

IMPORTED_SONAME
---------------

The "soname" of an IMPORTED target of shared library type.

Set this to the "soname" embedded in an imported shared library.  This
is meaningful only on platforms supporting the feature.  Ignored for
non-imported targets.

IMPORT_PREFIX
-------------

What comes before the import library name.

Similar to the target property PREFIX, but used for import libraries
(typically corresponding to a DLL) instead of regular libraries.  A
target property that can be set to override the prefix (such as "lib")
on an import library name.

IMPORT_SUFFIX
-------------

What comes after the import library name.

Similar to the target property SUFFIX, but used for import libraries
(typically corresponding to a DLL) instead of regular libraries.  A
target property that can be set to override the suffix (such as
".lib") on an import library name.

INCLUDE_DIRECTORIES
-------------------

List of preprocessor include file search directories.

This property specifies the list of directories given so far to the
``target_include_directories()`` command.  In addition to accepting
values from that command, values may be set directly on any
target using the ``set_property()`` command.  A target gets its
initial value for this property from the value of the
``INCLUDE_DIRECTORIES`` directory property.  Both directory and
target property values are adjusted by calls to the
``include_directories()`` command.

The value of this property is used by the generators to set the include
paths for the compiler.

Relative paths should not be added to this property directly. Use one of
the commands above instead to handle relative paths.

Contents of ``INCLUDE_DIRECTORIES`` may use "generator expressions" with
the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

INSTALL_NAME_DIR
----------------

Mac OSX directory name for installed targets.

INSTALL_NAME_DIR is a string specifying the directory portion of the
"install_name" field of shared libraries on Mac OSX to use in the
installed targets.

INSTALL_RPATH
-------------

The rpath to use for installed targets.

A semicolon-separated list specifying the rpath to use in installed
targets (for platforms that support it).  This property is initialized
by the value of the variable CMAKE_INSTALL_RPATH if it is set when a
target is created.

INSTALL_RPATH_USE_LINK_PATH
---------------------------

Add paths to linker search and installed rpath.

INSTALL_RPATH_USE_LINK_PATH is a boolean that if set to true will
append directories in the linker search path and outside the project
to the INSTALL_RPATH.  This property is initialized by the value of
the variable CMAKE_INSTALL_RPATH_USE_LINK_PATH if it is set when a
target is created.

INTERFACE_AUTOUIC_OPTIONS
-------------------------

List of interface options to pass to uic.

Targets may populate this property to publish the options
required to use when invoking ``uic``.  Consuming targets can add entries to their
own ``AUTOUIC_OPTIONS`` property such as
``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` to use the uic options
specified in the interface of ``foo``. This is done automatically by
the ``target_link_libraries()`` command.

This property supports generator expressions.  See the
``cmake-generator-expressions(7)`` manual for available expressions.

INTERFACE_COMPILE_DEFINITIONS
-----------------------------


List of public compile definitions requirements for a library.

Targets may populate this property to publish the compile definitions
required to compile against the headers for the target.  The ``target_compile_definitions()``
command populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to determine the
build properties of the consumer.

Contents of ``INTERFACE_COMPILE_DEFINITIONS`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
-manual for more on defining buildsystem properties.

INTERFACE_COMPILE_FEATURES
--------------------------


List of public compile features requirements for a library.

Targets may populate this property to publish the compile features
required to compile against the headers for the target.  The ``target_compile_features()``
command populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to determine the
build properties of the consumer.

Contents of ``INTERFACE_COMPILE_FEATURES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
-manual for more on defining buildsystem properties.

See the ``cmake-compile-features(7)`` manual for information on compile
features and a list of supported compilers.

INTERFACE_COMPILE_OPTIONS
-------------------------


List of public compile options requirements for a library.

Targets may populate this property to publish the compile options
required to compile against the headers for the target.  The ``target_compile_options()``
command populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to determine the
build properties of the consumer.

Contents of ``INTERFACE_COMPILE_OPTIONS`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
-manual for more on defining buildsystem properties.

INTERFACE_INCLUDE_DIRECTORIES
-----------------------------


List of public include directories requirements for a library.

Targets may populate this property to publish the include directories
required to compile against the headers for the target.  The ``target_include_directories()``
command populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to determine the
build properties of the consumer.

Contents of ``INTERFACE_INCLUDE_DIRECTORIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
-manual for more on defining buildsystem properties.

Include directories usage requirements commonly differ between the build-tree
and the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``
generator expressions can be used to describe separate usage requirements
based on the usage location.  Relative paths are allowed within the
``INSTALL_INTERFACE`` expression and are interpreted relative to the
installation prefix.  For example:

 target_include_directories(mylib INTERFACE
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>
   $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib
 )

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the ``INSTALL_INTERFACE`` of the
``INTERFACE_INCLUDE_DIRECTORIES`` of a target with absolute paths to the include
directories of dependencies.  That would hard-code into installed packages
the include directory paths for dependencies
**as found on the machine the package was made on**.

The ``INSTALL_INTERFACE`` of the ``INTERFACE_INCLUDE_DIRECTORIES`` is only
suitable for specifying the required include directories for headers
provided with the target itself, not those provided by the transitive
dependencies listed in its ``INTERFACE_LINK_LIBRARIES`` target
property.  Those dependencies should themselves be targets that specify
their own header locations in ``INTERFACE_INCLUDE_DIRECTORIES``.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

INTERFACE_LINK_LIBRARIES
------------------------

List public interface libraries for a library.

This property contains the list of transitive link dependencies.  When
the target is linked into another target using the
``target_link_libraries()`` command, the libraries listed (and
recursively their link interface libraries) will be provided to the
other target also.  This property is overridden by the
``LINK_INTERFACE_LIBRARIES`` or
``LINK_INTERFACE_LIBRARIES_<CONFIG>`` property if policy
``CMP0022`` is ``OLD`` or unset.

Contents of ``INTERFACE_LINK_LIBRARIES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the
``INTERFACE_LINK_LIBRARIES`` of a target with absolute paths to dependencies.
That would hard-code into installed packages the library file paths
for dependencies **as found on the machine the package was made on**.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

INTERFACE_POSITION_INDEPENDENT_CODE
-----------------------------------

Whether consumers need to create a position-independent target

The ``INTERFACE_POSITION_INDEPENDENT_CODE`` property informs consumers of
this target whether they must set their
``POSITION_INDEPENDENT_CODE`` property to ``ON``.  If this
property is set to ``ON``, then the ``POSITION_INDEPENDENT_CODE``
property on  all consumers will be set to ``ON``. Similarly, if this
property is set to ``OFF``, then the ``POSITION_INDEPENDENT_CODE``
property on all consumers will be set to ``OFF``.  If this property is
undefined, then consumers will determine their
``POSITION_INDEPENDENT_CODE`` property by other means.  Consumers
must ensure that the targets that they link to have a consistent
requirement for their ``INTERFACE_POSITION_INDEPENDENT_CODE`` property.

INTERFACE_SOURCES
-----------------

List of interface sources to compile into consuming targets.

Targets may populate this property to publish the sources
for consuming targets to compile.  The ``target_sources()`` command
populates this property with values given to the ``PUBLIC`` and
``INTERFACE`` keywords.  Projects may also get and set the property directly.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to determine the
sources of the consumer.

Contents of ``INTERFACE_SOURCES`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
------------------------------------

List of public system include directories for a library.

Targets may populate this property to publish the include directories
which contain system headers, and therefore should not result in
compiler warnings.  The ``target_include_directories(SYSTEM)``
command signature populates this property with values given to the
``PUBLIC`` and ``INTERFACE`` keywords.

Projects may also get and set the property directly, but must be aware that
adding directories to this property does not make those directories used
during compilation.  Adding directories to this property marks directories
as ``SYSTEM`` which otherwise would be used in a non-``SYSTEM`` manner.  This
can appear similar to 'duplication', so prefer the
high-level ``target_include_directories(SYSTEM)`` command and avoid
setting the property by low-level means.

When target dependencies are specified using ``target_link_libraries()``,
CMake will read this property from all target dependencies to mark the
same include directories as containing system headers.

Contents of ``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` may use "generator
expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available expressions.
See the ``cmake-buildsystem(7)`` manual for more on defining
buildsystem properties.

INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
-------------------------------------

Per-configuration interprocedural optimization for a target.

This is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.
If set, this property overrides the generic property for the named
configuration.

INTERPROCEDURAL_OPTIMIZATION
----------------------------

Enable interprocedural optimization for a target.

If set to true, enables interprocedural optimizations if they are
known to be supported by the compiler.

IOS_INSTALL_COMBINED
--------------------

Build a combined (device and simulator) target when installing.

When this property is set to set to false (which is the default) then it will
either be built with the device SDK or the simulator SDK depending on the SDK
set. But if this property is set to true then the target will at install time
also be built for the corresponding SDK and combined into one library.

This feature requires at least Xcode version 6.

JOB_POOL_COMPILE
----------------

Ninja only: Pool used for compiling.

The number of parallel compile processes could be limited by defining
pools with the global ``JOB_POOLS``
property and then specifying here the pool name.

For instance:

 set_property(TARGET myexe PROPERTY JOB_POOL_COMPILE ten_jobs)

This property is initialized by the value of
``CMAKE_JOB_POOL_COMPILE``.

JOB_POOL_LINK
-------------

Ninja only: Pool used for linking.

The number of parallel link processes could be limited by defining
pools with the global ``JOB_POOLS``
property and then specifying here the pool name.

For instance:

 set_property(TARGET myexe PROPERTY JOB_POOL_LINK two_jobs)

This property is initialized by the value of ``CMAKE_JOB_POOL_LINK``.

LABELS
------

Specify a list of text labels associated with a target.

Target label semantics are currently unspecified.

<LANG>_CLANG_TIDY
-----------------

This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`;-list <CMake Language Lists>` containing a command
line for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`
and the ``Ninja`` generator will run this tool along with the
compiler and report a warning if the tool reports any problems.

This property is initialized by the value of
the ``CMAKE_<LANG>_CLANG_TIDY`` variable if it is set
when a target is created.

<LANG>_COMPILER_LAUNCHER
------------------------

This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`;-list <CMake Language Lists>` containing a command line
for a compiler launching tool. The :ref:`Makefile Generators` and the
``Ninja`` generator will run this tool and pass the compiler and
its arguments to the tool. Some example tools are distcc and ccache.

This property is initialized by the value of
the ``CMAKE_<LANG>_COMPILER_LAUNCHER`` variable if it is set
when a target is created.

<LANG>_INCLUDE_WHAT_YOU_USE
---------------------------

This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.

Specify a :ref:`;-list <CMake Language Lists>` containing a command
line for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`
and the ``Ninja`` generator will run this tool along with the
compiler and report a warning if the tool reports any problems.

This property is initialized by the value of
the ``CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE`` variable if it is set
when a target is created.

<LANG>_VISIBILITY_PRESET
------------------------

Value for symbol visibility compile flags

The ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a
visibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.
This property affects compilation in sources of all types of targets
(subject to policy ``CMP0063``).

This property is initialized by the value of the
``CMAKE_<LANG>_VISIBILITY_PRESET`` variable if it is set when a
target is created.

LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`LIBRARY <Library Output Artifacts>` target files.

This is a per-configuration version of the
``LIBRARY_OUTPUT_DIRECTORY`` target property, but
multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
``CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` variable if
it is set when a target is created.

Contents of ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` may use
``generator expressions``.

LIBRARY_OUTPUT_DIRECTORY
------------------------

Output directory in which to build :ref:`LIBRARY <Library Output Artifacts>` target files.

This property specifies the directory into which library target files
should be built.  The property value may use
``generator expressions``.
Multi-configuration generators (VS, Xcode) append a per-configuration
subdirectory to the specified directory unless a generator expression
is used.

This property is initialized by the value of the variable
CMAKE_LIBRARY_OUTPUT_DIRECTORY if it is set when a target is created.

See also the ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` target property.

LIBRARY_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`LIBRARY <Library Output Artifacts>` target files.

This is the configuration-specific version of the
``LIBRARY_OUTPUT_NAME`` target property.

LIBRARY_OUTPUT_NAME
-------------------

Output name for :ref:`LIBRARY <Library Output Artifacts>` target files.

This property specifies the base name for library target files.  It
overrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``
properties.

See also the ``LIBRARY_OUTPUT_NAME_<CONFIG>`` target property.

LINK_DEPENDS_NO_SHARED
----------------------

Do not depend on linked shared library files.

Set this property to true to tell CMake generators not to add
file-level dependencies on the shared library files linked by this
target.  Modification to the shared libraries will not be sufficient
to re-link this target.  Logical target-level dependencies will not be
affected so the linked shared libraries will still be brought up to
date before this target is built.

This property is initialized by the value of the variable
CMAKE_LINK_DEPENDS_NO_SHARED if it is set when a target is created.

LINK_DEPENDS
------------

Additional files on which a target binary depends for linking.

Specifies a semicolon-separated list of full-paths to files on which
the link rule for this target depends.  The target binary will be
linked if any of the named files is newer than it.

This property is ignored by non-Makefile generators.  It is intended
to specify dependencies on "linker scripts" for custom Makefile link
rules.

LINKER_LANGUAGE
---------------

Specifies language whose compiler will invoke the linker.

For executables, shared libraries, and modules, this sets the language
whose compiler is used to link the target (such as "C" or "CXX").  A
typical value for an executable is the language of the source file
providing the program entry point (main).  If not set, the language
with the highest linker preference value is the default.  See
documentation of CMAKE_<LANG>_LINKER_PREFERENCE variables.

If this property is not set by the user, it will be calculated at
generate-time by CMake.

LINK_FLAGS_<CONFIG>
-------------------

Per-configuration linker flags for a target.

This is the configuration-specific version of LINK_FLAGS.

LINK_FLAGS
----------

Additional flags to use when linking this target.

The LINK_FLAGS property can be used to add extra flags to the link
step of a target.  LINK_FLAGS_<CONFIG> will add to the configuration
<CONFIG>, for example, DEBUG, RELEASE, MINSIZEREL, RELWITHDEBINFO.

LINK_INTERFACE_LIBRARIES_<CONFIG>
---------------------------------

Per-configuration list of public interface libraries for a target.

This is the configuration-specific version of
``LINK_INTERFACE_LIBRARIES``.  If set, this property completely
overrides the generic property for the named configuration.

This property is overridden by the ``INTERFACE_LINK_LIBRARIES``
property if policy ``CMP0022`` is ``NEW``.

This property is deprecated.  Use ``INTERFACE_LINK_LIBRARIES``
instead.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the
``LINK_INTERFACE_LIBRARIES_<CONFIG>`` of a target with absolute paths to dependencies.
That would hard-code into installed packages the library file paths
for dependencies **as found on the machine the package was made on**.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

LINK_INTERFACE_LIBRARIES
------------------------

List public interface libraries for a shared library or executable.

By default linking to a shared library target transitively links to
targets with which the library itself was linked.  For an executable
with exports (see the ``ENABLE_EXPORTS`` target property) no
default transitive link dependencies are used.  This property replaces the default
transitive link dependencies with an explicit list.  When the target
is linked into another target using the ``target_link_libraries()``
command, the libraries listed (and recursively
their link interface libraries) will be provided to the other target
also.  If the list is empty then no transitive link dependencies will
be incorporated when this target is linked into another target even if
the default set is non-empty.  This property is initialized by the
value of the ``CMAKE_LINK_INTERFACE_LIBRARIES`` variable if it is
set when a target is created.  This property is ignored for ``STATIC``
libraries.

This property is overridden by the ``INTERFACE_LINK_LIBRARIES``
property if policy ``CMP0022`` is ``NEW``.

This property is deprecated.  Use ``INTERFACE_LINK_LIBRARIES``
instead.

Creating Relocatable Packages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Note that it is not advisable to populate the
``LINK_INTERFACE_LIBRARIES`` of a target with absolute paths to dependencies.
That would hard-code into installed packages the library file paths
for dependencies **as found on the machine the package was made on**.

See the :ref:`Creating Relocatable Packages` section of the
``cmake-packages(7)`` manual for discussion of additional care
that must be taken when specifying usage requirements while creating
packages for redistribution.

LINK_INTERFACE_MULTIPLICITY_<CONFIG>
------------------------------------

Per-configuration repetition count for cycles of STATIC libraries.

This is the configuration-specific version of
LINK_INTERFACE_MULTIPLICITY.  If set, this property completely
overrides the generic property for the named configuration.

LINK_INTERFACE_MULTIPLICITY
---------------------------

Repetition count for STATIC libraries with cyclic dependencies.

When linking to a STATIC library target with cyclic dependencies the
linker may need to scan more than once through the archives in the
strongly connected component of the dependency graph.  CMake by
default constructs the link line so that the linker will scan through
the component at least twice.  This property specifies the minimum
number of scans if it is larger than the default.  CMake uses the
largest value specified by any target in a component.

LINK_LIBRARIES
--------------

List of direct link dependencies.

This property specifies the list of libraries or targets which will be
used for linking.  In addition to accepting values from the
``target_link_libraries()`` command, values may be set directly on
any target using the ``set_property()`` command.

The value of this property is used by the generators to set the link
libraries for the compiler.

Contents of ``LINK_LIBRARIES`` may use "generator expressions" with the
syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual
for available expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

LINK_SEARCH_END_STATIC
----------------------

End a link line such that static system libraries are used.

Some linkers support switches such as -Bstatic and -Bdynamic to
determine whether to use static or shared libraries for -lXXX options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default CMake adds an option at the
end of the library list (if necessary) to set the linker search type
back to its starting type.  This property switches the final linker
search type to -Bstatic regardless of how it started.

This property is initialized by the value of the variable
CMAKE_LINK_SEARCH_END_STATIC if it is set when a target is created.

See also LINK_SEARCH_START_STATIC.

LINK_SEARCH_START_STATIC
------------------------

Assume the linker looks for static libraries by default.

Some linkers support switches such as -Bstatic and -Bdynamic to
determine whether to use static or shared libraries for -lXXX options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default the linker search type is
assumed to be -Bdynamic at the beginning of the library list.  This
property switches the assumption to -Bstatic.  It is intended for use
when linking an executable statically (e.g.  with the GNU -static
option).

This property is initialized by the value of the variable
CMAKE_LINK_SEARCH_START_STATIC if it is set when a target is created.

See also LINK_SEARCH_END_STATIC.

LOCATION_<CONFIG>
-----------------

Read-only property providing a target location on disk.

A read-only property that indicates where a target's main file is
located on disk for the configuration <CONFIG>.  The property is
defined only for library and executable targets.  An imported target
may provide a set of configurations different from that of the
importing project.  By default CMake looks for an exact-match but
otherwise uses an arbitrary available configuration.  Use the
MAP_IMPORTED_CONFIG_<CONFIG> property to map imported configurations
explicitly.

Do not set properties that affect the location of a target after
reading this property.  These include properties whose names match
"(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?",
``(IMPLIB_)?(PREFIX|SUFFIX)``, or "LINKER_LANGUAGE".  Failure to follow
this rule is not diagnosed and leaves the location of the target
undefined.

LOCATION
--------

Read-only location of a target on disk.

For an imported target, this read-only property returns the value of
the LOCATION_<CONFIG> property for an unspecified configuration
<CONFIG> provided by the target.

For a non-imported target, this property is provided for compatibility
with CMake 2.4 and below.  It was meant to get the location of an
executable target's output file for use in add_custom_command.  The
path may contain a build-system-specific portion that is replaced at
build time with the configuration getting built (such as
"$(ConfigurationName)" in VS).  In CMake 2.6 and above
add_custom_command automatically recognizes a target name in its
COMMAND and DEPENDS options and computes the target location.  In
CMake 2.8.4 and above add_custom_command recognizes generator
expressions to refer to target locations anywhere in the command.
Therefore this property is not needed for creating custom commands.

Do not set properties that affect the location of a target after
reading this property.  These include properties whose names match
"(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?",
``(IMPLIB_)?(PREFIX|SUFFIX)``, or "LINKER_LANGUAGE".  Failure to follow
this rule is not diagnosed and leaves the location of the target
undefined.

MACOSX_BUNDLE_INFO_PLIST
------------------------

Specify a custom ``Info.plist`` template for a OS X and iOS Application Bundle.

An executable target with ``MACOSX_BUNDLE`` enabled will be built as an
application bundle on OS X.  By default its ``Info.plist`` file is created
by configuring a template called ``MacOSXBundleInfo.plist.in`` located in the
``CMAKE_MODULE_PATH``.  This property specifies an alternative template
file name which may be a full path.

The following target properties may be set to specify content to be
configured into the file:

``MACOSX_BUNDLE_BUNDLE_NAME``
  Sets ``CFBundleName``.
``MACOSX_BUNDLE_BUNDLE_VERSION``
  Sets ``CFBundleVersion``.
``MACOSX_BUNDLE_COPYRIGHT``
  Sets ``NSHumanReadableCopyright``.
``MACOSX_BUNDLE_GUI_IDENTIFIER``
  Sets ``CFBundleIdentifier``.
``MACOSX_BUNDLE_ICON_FILE``
  Sets ``CFBundleIconFile``.
``MACOSX_BUNDLE_INFO_STRING``
  Sets ``CFBundleGetInfoString``.
``MACOSX_BUNDLE_LONG_VERSION_STRING``
  Sets ``CFBundleLongVersionString``.
``MACOSX_BUNDLE_SHORT_VERSION_STRING``
  Sets ``CFBundleShortVersionString``.

CMake variables of the same name may be set to affect all targets in a
directory that do not have each specific property set.  If a custom
``Info.plist`` is specified by this property it may of course hard-code
all the settings instead of using the target properties.

MACOSX_BUNDLE
-------------

Build an executable as an Application Bundle on OS X or iOS.

When this property is set to ``TRUE`` the executable when built on OS X
or iOS will be created as an application bundle.  This makes it
a GUI executable that can be launched from the Finder.  See the
``MACOSX_FRAMEWORK_INFO_PLIST`` target property for information about
creation of the ``Info.plist`` file for the application bundle.
This property is initialized by the value of the variable
``CMAKE_MACOSX_BUNDLE`` if it is set when a target is created.

MACOSX_FRAMEWORK_INFO_PLIST
---------------------------

Specify a custom ``Info.plist`` template for a OS X and iOS Framework.

A library target with ``FRAMEWORK`` enabled will be built as a
framework on OS X.  By default its ``Info.plist`` file is created by
configuring a template called ``MacOSXFrameworkInfo.plist.in`` located in the
``CMAKE_MODULE_PATH``.  This property specifies an alternative template
file name which may be a full path.

The following target properties may be set to specify content to be
configured into the file:

``MACOSX_FRAMEWORK_BUNDLE_VERSION``
  Sets ``CFBundleVersion``.
``MACOSX_FRAMEWORK_ICON_FILE``
  Sets ``CFBundleIconFile``.
``MACOSX_FRAMEWORK_IDENTIFIER``
  Sets ``CFBundleIdentifier``.
``MACOSX_FRAMEWORK_SHORT_VERSION_STRING``
  Sets ``CFBundleShortVersionString``.

CMake variables of the same name may be set to affect all targets in a
directory that do not have each specific property set.  If a custom
``Info.plist`` is specified by this property it may of course hard-code
all the settings instead of using the target properties.

MACOSX_RPATH
------------

Whether this target on OS X or iOS is located at runtime using rpaths.

When this property is set to ``TRUE``, the directory portion of
the ``install_name`` field of this shared library will be ``@rpath``
unless overridden by ``INSTALL_NAME_DIR``.  This indicates
the shared library is to be found at runtime using runtime
paths (rpaths).

This property is initialized by the value of the variable
``CMAKE_MACOSX_RPATH`` if it is set when a target is
created.

Runtime paths will also be embedded in binaries using this target and
can be controlled by the ``INSTALL_RPATH`` target property on
the target linking to this target.

Policy ``CMP0042`` was introduced to change the default value of
``MACOSX_RPATH`` to ``TRUE``.  This is because use of ``@rpath`` is a
more flexible and powerful alternative to ``@executable_path`` and
``@loader_path``.

MAP_IMPORTED_CONFIG_<CONFIG>
----------------------------

Map from project configuration to IMPORTED target's configuration.

Set this to the list of configurations of an imported target that may
be used for the current project's <CONFIG> configuration.  Targets
imported from another project may not provide the same set of
configuration names available in the current project.  Setting this
property tells CMake what imported configurations are suitable for use
when building the <CONFIG> configuration.  The first configuration in
the list found to be provided by the imported target is selected.  If
this property is set and no matching configurations are available,
then the imported target is considered to be not found.  This property
is ignored for non-imported targets.

This property is initialized by the value of the variable
CMAKE_MAP_IMPORTED_CONFIG_<CONFIG> if it is set when a target is
created.

NAME
----

Logical name for the target.

Read-only logical name for the target as used by CMake.

NO_SONAME
---------

Whether to set "soname" when linking a shared library.

Enable this boolean property if a generated shared library
should not have "soname" set.  Default is to set "soname" on all
shared libraries as long as the platform supports it.
Generally, use this property only for leaf private libraries or
plugins.  If you use it on normal shared libraries which other targets
link against, on some platforms a linker will insert a full path to
the library (as specified at link time) into the dynamic section of
the dependent binary.  Therefore, once installed, dynamic loader may
eventually fail to locate the library for the binary.

NO_SYSTEM_FROM_IMPORTED
-----------------------

Do not treat includes from IMPORTED target interfaces as SYSTEM.

The contents of the INTERFACE_INCLUDE_DIRECTORIES of IMPORTED targets
are treated as SYSTEM includes by default.  If this property is
enabled, the contents of the INTERFACE_INCLUDE_DIRECTORIES of IMPORTED
targets are not treated as system includes.  This property is
initialized by the value of the variable CMAKE_NO_SYSTEM_FROM_IMPORTED
if it is set when a target is created.

OSX_ARCHITECTURES_<CONFIG>
--------------------------

Per-configuration OS X and iOS binary architectures for a target.

This property is the configuration-specific version of
``OSX_ARCHITECTURES``.

OSX_ARCHITECTURES
-----------------

Target specific architectures for OS X.

The ``OSX_ARCHITECTURES`` property sets the target binary architecture for
targets on OS X (``-arch``).  This property is initialized by the value of the
variable ``CMAKE_OSX_ARCHITECTURES`` if it is set when a target is
created.  Use ``OSX_ARCHITECTURES_<CONFIG>`` to set the binary
architectures on a per-configuration basis, where ``<CONFIG>`` is an
upper-case name (e.g. ``OSX_ARCHITECTURES_DEBUG``).

OUTPUT_NAME_<CONFIG>
--------------------

Per-configuration target file base name.

This is the configuration-specific version of the ``OUTPUT_NAME``
target property.

OUTPUT_NAME
-----------

Output name for target files.

This sets the base name for output files created for an executable or
library target.  If not set, the logical target name is used by
default.

Contents of ``OUTPUT_NAME`` and the variants listed below may use
``generator expressions``.

See also the variants:

* ``OUTPUT_NAME_<CONFIG>``
* ``ARCHIVE_OUTPUT_NAME_<CONFIG>``
* ``ARCHIVE_OUTPUT_NAME``
* ``LIBRARY_OUTPUT_NAME_<CONFIG>``
* ``LIBRARY_OUTPUT_NAME``
* ``RUNTIME_OUTPUT_NAME_<CONFIG>``
* ``RUNTIME_OUTPUT_NAME``

PDB_NAME_<CONFIG>
-----------------

Per-configuration output name for the MS debug symbol ``.pdb`` file
generated by the linker for an executable or shared library target.

This is the configuration-specific version of ``PDB_NAME``.

.. note::
 This property does not apply to STATIC library targets because no linker
 is invoked to produce them so they have no linker-generated ``.pdb`` file
 containing debug symbols.

 The linker-generated program database files are specified by the
 ``/pdb`` linker flag and are not the same as compiler-generated
 program database files specified by the ``/Fd`` compiler flag.
 Use the ``COMPILE_PDB_NAME_<CONFIG>`` property to specify the latter.

PDB_NAME
--------

Output name for the MS debug symbol ``.pdb`` file generated by the
linker for an executable or shared library target.

This property specifies the base name for the debug symbols file.
If not set, the ``OUTPUT_NAME`` target property value or
logical target name is used by default.

.. note::
 This property does not apply to STATIC library targets because no linker
 is invoked to produce them so they have no linker-generated ``.pdb`` file
 containing debug symbols.

 The linker-generated program database files are specified by the
 ``/pdb`` linker flag and are not the same as compiler-generated
 program database files specified by the ``/Fd`` compiler flag.
 Use the ``COMPILE_PDB_NAME`` property to specify the latter.

PDB_OUTPUT_DIRECTORY_<CONFIG>
-----------------------------

Per-configuration output directory for the MS debug symbol ``.pdb`` file
generated by the linker for an executable or shared library target.

This is a per-configuration version of ``PDB_OUTPUT_DIRECTORY``,
but multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
``CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable if it is
set when a target is created.

.. note::
 This property does not apply to STATIC library targets because no linker
 is invoked to produce them so they have no linker-generated ``.pdb`` file
 containing debug symbols.

 The linker-generated program database files are specified by the
 ``/pdb`` linker flag and are not the same as compiler-generated
 program database files specified by the ``/Fd`` compiler flag.
 Use the ``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.

PDB_OUTPUT_DIRECTORY
--------------------

Output directory for the MS debug symbols ``.pdb`` file
generated by the linker for an executable or shared library target.

This property specifies the directory into which the MS debug symbols
will be placed by the linker.  This property is initialized by the
value of the ``CMAKE_PDB_OUTPUT_DIRECTORY`` variable if it is
set when a target is created.

.. note::
 This property does not apply to STATIC library targets because no linker
 is invoked to produce them so they have no linker-generated ``.pdb`` file
 containing debug symbols.

 The linker-generated program database files are specified by the
 ``/pdb`` linker flag and are not the same as compiler-generated
 program database files specified by the ``/Fd`` compiler flag.
 Use the ``COMPILE_PDB_OUTPUT_DIRECTORY`` property to specify the latter.

POSITION_INDEPENDENT_CODE
-------------------------

Whether to create a position-independent target

The ``POSITION_INDEPENDENT_CODE`` property determines whether position
independent executables or shared libraries will be created.  This
property is ``True`` by default for ``SHARED`` and ``MODULE`` library
targets and ``False`` otherwise.  This property is initialized by the value
of the ``CMAKE_POSITION_INDEPENDENT_CODE`` variable  if it is set
when a target is created.

PREFIX
------

What comes before the library name.

A target property that can be set to override the prefix (such as
"lib") on a library name.

PRIVATE_HEADER
--------------

Specify private header files in a ``FRAMEWORK`` shared library target.

Shared library targets marked with the ``FRAMEWORK`` property generate
frameworks on OS X, iOS and normal shared libraries on other platforms.
This property may be set to a list of header files to be placed in the
PrivateHeaders directory inside the framework folder.  On non-Apple
platforms these headers may be installed using the ``PRIVATE_HEADER``
option to the ``install(TARGETS)`` command.

PROJECT_LABEL
-------------

Change the name of a target in an IDE.

Can be used to change the name of the target in an IDE like Visual
Studio.

PUBLIC_HEADER
-------------

Specify public header files in a ``FRAMEWORK`` shared library target.

Shared library targets marked with the ``FRAMEWORK`` property generate
frameworks on OS X, iOS and normal shared libraries on other platforms.
This property may be set to a list of header files to be placed in the
``Headers`` directory inside the framework folder.  On non-Apple platforms
these headers may be installed using the ``PUBLIC_HEADER`` option to the
``install(TARGETS)`` command.

RESOURCE
--------

Specify resource files in a ``FRAMEWORK`` or ``BUNDLE``.

Target marked with the ``FRAMEWORK`` or ``BUNDLE`` property
generate framework or application bundle (both OS X and iOS is supported)
or normal shared libraries on other platforms.
This property may be set to a list of files to be placed in the corresponding
directory (eg. ``Resources`` directory for OS X) inside the bundle.
On non-Apple platforms these files may be installed using the ``RESOURCE``
option to the ``install(TARGETS)`` command.

Following example of Application Bundle:

 add_executable(ExecutableTarget
   addDemo.c
   resourcefile.txt
   appresourcedir/appres.txt
 )

 target_link_libraries(ExecutableTarget heymath mul)

 set(RESOURCE_FILES
   resourcefile.txt
   appresourcedir/appres.txt
 )

 set_target_properties(ExecutableTarget PROPERTIES
   MACOSX_BUNDLE TRUE
   MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget
   RESOURCE "${RESOURCE_FILES}"
 )

will produce flat structure for iOS systems::

 ExecutableTarget.app
   appres.txt
   ExecutableTarget
   Info.plist
   resourcefile.txt

For OS X systems it will produce following directory structure::

 ExecutableTarget.app/
   Contents
     Info.plist
     MacOS
       ExecutableTarget
     Resources
       appres.txt
       resourcefile.txt

For Linux, such cmake script produce following files::

 ExecutableTarget
 Resources
   appres.txt
   resourcefile.txt

RULE_LAUNCH_COMPILE
-------------------

Specify a launcher for compile rules.

See the global property of the same name for details.  This overrides
the global and directory property for a target.

RULE_LAUNCH_CUSTOM
------------------

Specify a launcher for custom rules.

See the global property of the same name for details.  This overrides
the global and directory property for a target.

RULE_LAUNCH_LINK
----------------

Specify a launcher for link rules.

See the global property of the same name for details.  This overrides
the global and directory property for a target.

RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------

Per-configuration output directory for
:ref:`RUNTIME <Runtime Output Artifacts>` target files.

This is a per-configuration version of the
``RUNTIME_OUTPUT_DIRECTORY`` target property, but
multi-configuration generators (VS, Xcode) do NOT append a
per-configuration subdirectory to the specified directory.  This
property is initialized by the value of the
``CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` variable if
it is set when a target is created.

Contents of ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` may use
``generator expressions``.

RUNTIME_OUTPUT_DIRECTORY
------------------------

Output directory in which to build :ref:`RUNTIME <Runtime Output Artifacts>` target files.

This property specifies the directory into which runtime target files
should be built.  The property value may use
``generator expressions``.
Multi-configuration generators (VS, Xcode) append a per-configuration
subdirectory to the specified directory unless a generator expression
is used.

This property is initialized by the value of the variable
CMAKE_RUNTIME_OUTPUT_DIRECTORY if it is set when a target is created.

See also the ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` target property.

RUNTIME_OUTPUT_NAME_<CONFIG>
----------------------------

Per-configuration output name for
:ref:`RUNTIME <Runtime Output Artifacts>` target files.

This is the configuration-specific version of the
``RUNTIME_OUTPUT_NAME`` target property.

RUNTIME_OUTPUT_NAME
-------------------

Output name for :ref:`RUNTIME <Runtime Output Artifacts>` target files.

This property specifies the base name for runtime target files.  It
overrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``
properties.

See also the ``RUNTIME_OUTPUT_NAME_<CONFIG>`` target property.

SKIP_BUILD_RPATH
----------------

Should rpaths be used for the build tree.

SKIP_BUILD_RPATH is a boolean specifying whether to skip automatic
generation of an rpath allowing the target to run from the build tree.
This property is initialized by the value of the variable
CMAKE_SKIP_BUILD_RPATH if it is set when a target is created.

SOURCE_DIR
----------

This read-only property reports the value of the
``CMAKE_CURRENT_SOURCE_DIR`` variable in the directory in which
the target was defined.

SOURCES
-------

Source names specified for a target.

List of sources specified for a target.

SOVERSION
---------

What version number is this target.

For shared libraries ``VERSION`` and ``SOVERSION`` can be used to
specify the build version and API version respectively.  When building or
installing appropriate symlinks are created if the platform supports
symlinks and the linker supports so-names.  If only one of both is
specified the missing is assumed to have the same version number.
``SOVERSION`` is ignored if ``NO_SONAME`` property is set.

Windows Versions
^^^^^^^^^^^^^^^^

For shared libraries and executables on Windows the ``VERSION``
attribute is parsed to extract a ``<major>.<minor>`` version number.
These numbers are used as the image version of the binary.

Mach-O Versions
^^^^^^^^^^^^^^^

For shared libraries and executables on Mach-O systems (e.g. OS X, iOS),
the ``SOVERSION`` property corresponds to *compatibility version* and
``VERSION`` to *current version*.  See the ``FRAMEWORK`` target
property for an example.  Versions of Mach-O binaries may be checked with the
``otool -L <binary>`` command.

STATIC_LIBRARY_FLAGS_<CONFIG>
-----------------------------

Per-configuration flags for creating a static library.

This is the configuration-specific version of STATIC_LIBRARY_FLAGS.

STATIC_LIBRARY_FLAGS
--------------------

Extra flags to use when linking static libraries.

Extra flags to use when linking a static library.

SUFFIX
------

What comes after the target name.

A target property that can be set to override the suffix (such as
".so" or ".exe") on the name of a library, module or executable.

TYPE
----

The type of the target.

This read-only property can be used to test the type of the given
target.  It will be one of STATIC_LIBRARY, MODULE_LIBRARY,
SHARED_LIBRARY, INTERFACE_LIBRARY, EXECUTABLE or one of the internal
target types.

VERSION
-------

What version number is this target.

For shared libraries ``VERSION`` and ``SOVERSION`` can be used
to specify the build version and API version respectively.  When building or
installing appropriate symlinks are created if the platform supports
symlinks and the linker supports so-names.  If only one of both is
specified the missing is assumed to have the same version number.  For
executables ``VERSION`` can be used to specify the build version.  When
building or installing appropriate symlinks are created if the
platform supports symlinks.

Windows Versions
^^^^^^^^^^^^^^^^

For shared libraries and executables on Windows the ``VERSION``
attribute is parsed to extract a ``<major>.<minor>`` version number.
These numbers are used as the image version of the binary.

Mach-O Versions
^^^^^^^^^^^^^^^

For shared libraries and executables on Mach-O systems (e.g. OS X, iOS),
the ``SOVERSION`` property correspond to *compatibility version* and
``VERSION`` to *current version*.  See the ``FRAMEWORK`` target
property for an example.  Versions of Mach-O binaries may be checked with the
``otool -L <binary>`` command.

VISIBILITY_INLINES_HIDDEN
-------------------------

Whether to add a compile flag to hide symbols of inline functions

The ``VISIBILITY_INLINES_HIDDEN`` property determines whether a flag for
hiding symbols for inline functions, such as ``-fvisibility-inlines-hidden``,
should be used when invoking the compiler.  This property affects compilation
in sources of all types of targets (subject to policy ``CMP0063``).

This property is initialized by
the value of the ``CMAKE_VISIBILITY_INLINES_HIDDEN`` variable if it
is set when a target is created.

VS_CONFIGURATION_TYPE
---------------------

Visual Studio project configuration type.

Sets the ``ConfigurationType`` attribute for a generated Visual Studio project.
If this property is set, it overrides the default setting that is based on the
target type (e.g. ``StaticLibrary``, ``Application``, ...).

Supported on :ref:`Visual Studio Generators` for VS 2010 and higher.

VS_DESKTOP_EXTENSIONS_VERSION
-----------------------------

Visual Studio Windows 10 Desktop Extensions Version

Specifies the version of the Desktop Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the Desktop
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.

VS_DOTNET_REFERENCES
--------------------

Visual Studio managed project .NET references

Adds one or more semicolon-delimited .NET references to a generated
Visual Studio project.  For example, "System;System.Windows.Forms".

VS_DOTNET_TARGET_FRAMEWORK_VERSION
----------------------------------

Specify the .NET target framework version.

Used to specify the .NET target framework version for C++/CLI.  For
example, "v4.5".

VS_GLOBAL_KEYWORD
-----------------

Visual Studio project keyword for VS 10 (2010) and newer.

Sets the "keyword" attribute for a generated Visual Studio project.
Defaults to "Win32Proj".  You may wish to override this value with
"ManagedCProj", for example, in a Visual Studio managed C++ unit test
project.

Use the ``VS_KEYWORD`` target property to set the
keyword for Visual Studio 9 (2008) and older.

VS_GLOBAL_PROJECT_TYPES
-----------------------

Visual Studio project type(s).

Can be set to one or more UUIDs recognized by Visual Studio to
indicate the type of project.  This value is copied verbatim into the
generated project file.  Example for a managed C++ unit testing
project:

::

 {3AC096D0-A1C2-E12C-1390-A8335801FDAB};{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}

UUIDs are semicolon-delimited.

VS_GLOBAL_ROOTNAMESPACE
-----------------------

Visual Studio project root namespace.

Sets the "RootNamespace" attribute for a generated Visual Studio
project.  The attribute will be generated only if this is set.

VS_GLOBAL_<variable>
--------------------

Visual Studio project-specific global variable.

Tell the Visual Studio generator to set the global variable
'<variable>' to a given value in the generated Visual Studio project.
Ignored on other generators.  Qt integration works better if
VS_GLOBAL_QtVersion is set to the version FindQt4.cmake found.  For
example, "4.7.3"

VS_IOT_EXTENSIONS_VERSION
-------------------------

Visual Studio Windows 10 IoT Extensions Version

Specifies the version of the IoT Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the IoT
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.

VS_IOT_STARTUP_TASK
-------------------

Visual Studio Windows 10 IoT Continuous Background Task

Specifies that the target should be compiled as a Continuous Background Task library.

VS_KEYWORD
----------

Visual Studio project keyword for VS 9 (2008) and older.

Can be set to change the visual studio keyword, for example Qt
integration works better if this is set to Qt4VSv1.0.

Use the ``VS_GLOBAL_KEYWORD`` target property to set the
keyword for Visual Studio 10 (2010) and newer.

VS_MOBILE_EXTENSIONS_VERSION
----------------------------

Visual Studio Windows 10 Mobile Extensions Version

Specifies the version of the Mobile Extensions that should be included in the
target. For example ``10.0.10240.0``. If the value is not specified, the Mobile
Extensions will not be included. To use the same version of the extensions as
the Windows 10 SDK that is being used, you can use the
``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.

VS_SCC_AUXPATH
--------------

Visual Studio Source Code Control Aux Path.

Can be set to change the visual studio source code control auxpath
property.

VS_SCC_LOCALPATH
----------------

Visual Studio Source Code Control Local Path.

Can be set to change the visual studio source code control local path
property.

VS_SCC_PROJECTNAME
------------------

Visual Studio Source Code Control Project.

Can be set to change the visual studio source code control project
name property.

VS_SCC_PROVIDER
---------------

Visual Studio Source Code Control Provider.

Can be set to change the visual studio source code control provider
property.

VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION
--------------------------------------

Visual Studio Windows Target Platform Minimum Version

For Windows 10. Specifies the minimum version of the OS that is being
targeted. For example ``10.0.10240.0``. If the value is not specified, the
value of ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` will be used on
WindowsStore projects otherwise the target platform minimum version will not
be specified for the project.

VS_WINRT_COMPONENT
------------------

Mark a target as a Windows Runtime component for the Visual Studio generator.
Compile the target with ``C++/CX`` language extensions for Windows Runtime.
For ``SHARED`` and ``MODULE`` libraries, this also defines the
``_WINRT_DLL`` preprocessor macro.

.. note::
  Currently this is implemented only by Visual Studio generators.
  Support may be added to other generators in the future.

VS_WINRT_EXTENSIONS
-------------------

Deprecated.  Use ``VS_WINRT_COMPONENT`` instead.
This property was an experimental partial implementation of that one.

VS_WINRT_REFERENCES
-------------------

Visual Studio project Windows Runtime Metadata references

Adds one or more semicolon-delimited WinRT references to a generated
Visual Studio project.  For example, "Windows;Windows.UI.Core".

WIN32_EXECUTABLE
----------------

Build an executable with a WinMain entry point on windows.

When this property is set to true the executable when linked on
Windows will be created with a WinMain() entry point instead of just
main().  This makes it a GUI executable instead of a console
application.  See the CMAKE_MFC_FLAG variable documentation to
configure use of MFC for WinMain executables.  This property is
initialized by the value of the variable CMAKE_WIN32_EXECUTABLE if it
is set when a target is created.

WINDOWS_EXPORT_ALL_SYMBOLS
--------------------------

This property is implemented only for MS-compatible tools on Windows.

Enable this boolean property to automatically create a module definition
(``.def``) file with all global symbols found in the input ``.obj`` files
for a ``SHARED`` library on Windows.  The module definition file will be
passed to the linker causing all symbols to be exported from the ``.dll``.
For global *data* symbols, ``__declspec(dllimport)`` must still be used when
compiling against the code in the ``.dll``.  All other function symbols will
be automatically exported and imported by callers.  This simplifies porting
projects to Windows by reducing the need for explicit ``dllexport`` markup,
even in ``C++`` classes.

This property is initialized by the value of
the ``CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`` variable if it is set
when a target is created.

XCODE_ATTRIBUTE_<an-attribute>
------------------------------

Set Xcode target attributes directly.

Tell the Xcode generator to set '<an-attribute>' to a given value in
the generated Xcode project.  Ignored on other generators.

See the ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` variable
to set attributes on all targets in a directory tree.

Contents of ``XCODE_ATTRIBUTE_<an-attribute>`` may use
"generator expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available
expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

XCTEST
------

This target is a XCTest CFBundle on the Mac.

This property will usually get set via the ``xctest_add_bundle()``
macro in ``FindXCTest`` module.

If a module library target has this property set to true it will be
built as a CFBundle when built on the Mac.  It will have the directory
structure required for a CFBundle.

This property depends on ``BUNDLE`` to be effective.

Properties on Tests
===================

ATTACHED_FILES_ON_FAIL
----------------------

Attach a list of files to a dashboard submission if the test fails.

Same as ``ATTACHED_FILES``, but these files will only be
included if the test does not pass.

ATTACHED_FILES
--------------

Attach a list of files to a dashboard submission.

Set this property to a list of files that will be encoded and
submitted to the dashboard as an addition to the test result.

COST
----

Set this to a floating point value. Tests in a test set will be run in descending order of cost.

This property describes the cost of a test.  You can explicitly set
this value; tests with higher COST values will run first.

DEPENDS
-------

Specifies that this test should only be run after the specified list of tests.

Set this to a list of tests that must finish before this test is run.

ENVIRONMENT
-----------

Specify environment variables that should be defined for running a test.

If set to a list of environment variables and values of the form
MYVAR=value those environment variables will be defined while running
the test.  The environment is restored to its previous state after the
test is done.

FAIL_REGULAR_EXPRESSION
-----------------------

If the output matches this regular expression the test will fail.

If set, if the output matches one of specified regular expressions,
the test will fail.  Example:

 set_tests_properties(mytest PROPERTIES
   FAIL_REGULAR_EXPRESSION "[^a-z]Error;ERROR;Failed"
 )

``FAIL_REGULAR_EXPRESSION`` expects a list of regular expressions.

LABELS
------

Specify a list of text labels associated with a test.

The list is reported in dashboard submissions.

MEASUREMENT
-----------

Specify a CDASH measurement and value to be reported for a test.

If set to a name then that name will be reported to CDASH as a named
measurement with a value of 1.  You may also specify a value by
setting MEASUREMENT to "measurement=value".

PASS_REGULAR_EXPRESSION
-----------------------

The output must match this regular expression for the test to pass.

If set, the test output will be checked against the specified regular
expressions and at least one of the regular expressions has to match,
otherwise the test will fail.  Example:

 set_tests_properties(mytest PROPERTIES
   PASS_REGULAR_EXPRESSION "TestPassed;All ok"
 )

``PASS_REGULAR_EXPRESSION`` expects a list of regular expressions.

PROCESSORS
----------

How many process slots this test requires

Denotes the number of processors that this test will require.  This is
typically used for MPI tests, and should be used in conjunction with
the ctest_test PARALLEL_LEVEL option.

REQUIRED_FILES
--------------

List of files required to run the test.

If set to a list of files, the test will not be run unless all of the
files exist.

RESOURCE_LOCK
-------------

Specify a list of resources that are locked by this test.

If multiple tests specify the same resource lock, they are guaranteed
not to run concurrently.

RUN_SERIAL
----------

Do not run this test in parallel with any other test.

Use this option in conjunction with the ctest_test PARALLEL_LEVEL
option to specify that this test should not be run in parallel with
any other tests.

SKIP_RETURN_CODE
----------------

Return code to mark a test as skipped.

Sometimes only a test itself can determine if all requirements for the
test are met. If such a situation should not be considered a hard failure
a return code of the process can be specified that will mark the test as
"Not Run" if it is encountered.

TIMEOUT
-------

How many seconds to allow for this test.

This property if set will limit a test to not take more than the
specified number of seconds to run.  If it exceeds that the test
process will be killed and ctest will move to the next test.  This
setting takes precedence over ``CTEST_TEST_TIMEOUT``.

TIMEOUT_AFTER_MATCH
-------------------

Change a test's timeout duration after a matching line is encountered
in its output.

Usage
^^^^^

 add_test(mytest ...)
 set_property(TEST mytest PROPERTY TIMEOUT_AFTER_MATCH "${seconds}" "${regex}")

Description
^^^^^^^^^^^

Allow a test ``seconds`` to complete after ``regex`` is encountered in
its output.

When the test outputs a line that matches ``regex`` its start time is
reset to the current time and its timeout duration is changed to
``seconds``.  Prior to this, the timeout duration is determined by the
``TIMEOUT`` property or the ``CTEST_TEST_TIMEOUT``
variable if either of these are set.

``TIMEOUT_AFTER_MATCH`` is useful for avoiding spurious
timeouts when your test must wait for some system resource to become
available before it can execute.  Set ``TIMEOUT`` to a longer
duration that accounts for resource acquisition and use
``TIMEOUT_AFTER_MATCH`` to control how long the actual test
is allowed to run.

If the required resource can be controlled by CTest you should use
``RESOURCE_LOCK`` instead of ``TIMEOUT_AFTER_MATCH``.
This property should be used when only the test itself can determine
when its required resources are available.

WILL_FAIL
---------

If set to true, this will invert the pass/fail flag of the test.

This property can be used for tests that are expected to fail and
return a non zero return code.

WORKING_DIRECTORY
-----------------

The directory from which the test executable will be called.

If this is not set it is called from the directory the test executable
is located in.

Properties on Source Files
==========================

ABSTRACT
--------

Is this source file an abstract class.

A property on a source file that indicates if the source file
represents a class that is abstract.  This only makes sense for
languages that have a notion of an abstract class and it is only used
by some tools that wrap classes into other languages.

AUTOUIC_OPTIONS
---------------

Additional options for ``uic`` when using ``AUTOUIC``

This property holds additional command line options
which will be used when ``uic`` is executed during the build via ``AUTOUIC``,
i.e. it is equivalent to the optional ``OPTIONS`` argument of the
``qt4_wrap_ui()`` macro.

By default it is empty.

The options set on the ``.ui`` source file may override ``AUTOUIC_OPTIONS`` set
on the target.

AUTORCC_OPTIONS
---------------

Additional options for ``rcc`` when using ``AUTORCC``

This property holds additional command line options which will be used when
``rcc`` is executed during the build via ``AUTORCC``, i.e. it is equivalent to the
optional ``OPTIONS`` argument of the ``qt4_add_resources()`` macro.

By default it is empty.

The options set on the ``.qrc`` source file may override ``AUTORCC_OPTIONS`` set
on the target.

COMPILE_DEFINITIONS
-------------------

Preprocessor definitions for compiling a source file.

The COMPILE_DEFINITIONS property may be set to a semicolon-separated
list of preprocessor definitions using the syntax VAR or VAR=value.
Function-style definitions are not supported.  CMake will
automatically escape the value correctly for the native build system
(note that CMake language syntax may require escapes to specify some
values).  This property may be set on a per-configuration basis using
the name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> is an upper-case
name (ex.  "COMPILE_DEFINITIONS_DEBUG").

CMake will automatically drop some definitions that are not supported
by the native build tool.  Xcode does not support per-configuration
definitions on source files.

Disclaimer: Most native build tools have poor support for escaping
certain values.  CMake has work-arounds for many cases but some values
may just not be possible to pass correctly.  If a value does not seem
to be escaped correctly, do not attempt to work-around the problem by
adding escape sequences to the value.  Your work-around may break in a
future version of CMake that has improved escape support.  Instead
consider defining the macro in a (configured) header file.  Then
report the limitation.  Known limitations include::

 #          - broken almost everywhere
 ;          - broken in VS IDE 7.0 and Borland Makefiles
 ,          - broken in VS IDE
 %          - broken in some cases in NMake
 & |        - broken in some cases on MinGW
 ^ < > \"   - broken in most Make tools on Windows

CMake does not reject these values outright because they do work in
some cases.  Use with caution.

COMPILE_FLAGS
-------------

Additional flags to be added when compiling this source file.

These flags will be added to the list of compile flags when this
source file builds.  Use ``COMPILE_DEFINITIONS`` to pass
additional preprocessor definitions.

EXTERNAL_OBJECT
---------------

If set to true then this is an object file.

If this property is set to true then the source file is really an
object file and should not be compiled.  It will still be linked into
the target though.

Fortran_FORMAT
--------------

Set to FIXED or FREE to indicate the Fortran source layout.

This property tells CMake whether a given Fortran source file uses
fixed-format or free-format.  CMake will pass the corresponding format
flag to the compiler.  Consider using the target-wide Fortran_FORMAT
property if all source files in a target share the same format.

GENERATED
---------

Is this source file generated as part of the build process.

If a source file is generated by the build process CMake will handle
it differently in terms of dependency checking etc.  Otherwise having
a non-existent source file could create problems.

HEADER_FILE_ONLY
----------------

Is this source file only a header file.

A property on a source file that indicates if the source file is a
header file with no associated implementation.  This is set
automatically based on the file extension and is used by CMake to
determine if certain dependency information should be computed.

KEEP_EXTENSION
--------------

Make the output file have the same extension as the source file.

If this property is set then the file extension of the output file
will be the same as that of the source file.  Normally the output file
extension is computed based on the language of the source file, for
example .cxx will go to a .o extension.

LABELS
------

Specify a list of text labels associated with a source file.

This property has meaning only when the source file is listed in a
target whose LABELS property is also set.  No other semantics are
currently specified.

LANGUAGE
--------

What programming language is the file.

A property that can be set to indicate what programming language the
source file is.  If it is not set the language is determined based on
the file extension.  Typical values are CXX C etc.  Setting this
property for a file means this file will be compiled.  Do not set this
for headers or files that should not be compiled.

LOCATION
--------

The full path to a source file.

A read only property on a SOURCE FILE that contains the full path to
the source file.

MACOSX_PACKAGE_LOCATION
-----------------------

Place a source file inside a Application Bundle
(``MACOSX_BUNDLE``), Core Foundation Bundle (``BUNDLE``),
or Framework Bundle (``FRAMEWORK``).  It is applicable for OS X
and iOS.

Executable targets with the ``MACOSX_BUNDLE`` property set are
built as OS X or iOS application bundles on Apple platforms.  Shared
library targets with the ``FRAMEWORK`` property set are built as
OS X or iOS frameworks on Apple platforms.  Module library targets with
the ``BUNDLE`` property set are built as OS X ``CFBundle`` bundles
on Apple platforms.  Source files listed in the target with this property
set will be copied to a directory inside the bundle or framework content
folder specified by the property value.  For OS X Application Bundles the
content folder is ``<name>.app/Contents``.  For OS X Frameworks the
content folder is ``<name>.framework/Versions/<version>``.  For OS X
CFBundles the content folder is ``<name>.bundle/Contents`` (unless the
extension is changed).  See the ``PUBLIC_HEADER``,
``PRIVATE_HEADER``, and ``RESOURCE`` target properties for
specifying files meant for ``Headers``, ``PrivateHeaders``, or
``Resources`` directories.

OBJECT_DEPENDS
--------------

Additional files on which a compiled object file depends.

Specifies a :ref:`;-list <CMake Language Lists>` of full-paths to
files on which any object files compiled from this source file depend.
On :ref:`Makefile Generators` and the ``Ninja`` generator an
object file will be recompiled if any of the named files is newer than it.
:ref:`Visual Studio Generators` and the ``Xcode`` generator
cannot implement such compilation dependencies.

This property need not be used to specify the dependency of a source
file on a generated header file that it includes.  Although the
property was originally introduced for this purpose, it is no longer
necessary.  If the generated header file is created by a custom
command in the same target as the source file, the automatic
dependency scanning process will recognize the dependency.  If the
generated header file is created by another target, an inter-target
dependency should be created with the ``add_dependencies()``
command (if one does not already exist due to linking relationships).

OBJECT_OUTPUTS
--------------

Additional outputs for a Makefile rule.

Additional outputs created by compilation of this source file.  If any
of these outputs is missing the object will be recompiled.  This is
supported only on Makefile generators and will be ignored on other
generators.

SYMBOLIC
--------

Is this just a name for a rule.

If SYMBOLIC (boolean) is set to true the build system will be informed
that the source file is not actually created on disk but instead used
as a symbolic name for a build rule.

VS_DEPLOYMENT_CONTENT
---------------------

Mark a source file as content for deployment with a Windows Phone or
Windows Store application when built with a Visual Studio generator.
The value must evaluate to either ``1`` or ``0`` and may use
``generator expressions``
to make the choice based on the build configuration.
The ``.vcxproj`` file entry for the source file will be
marked either ``DeploymentContent`` or ``ExcludedFromBuild``
for values ``1`` and ``0``, respectively.

VS_DEPLOYMENT_LOCATION
----------------------

Specifies the deployment location for a content source file with a Windows
Phone or Windows Store application when built with a Visual Studio generator.
This property is only applicable when using ``VS_DEPLOYMENT_CONTENT``.
The value represent the path relative to the app package and applies to all
configurations.

VS_SHADER_ENTRYPOINT
--------------------

Specifies the name of the entry point for the shader of a ``.hlsl`` source
file.

VS_SHADER_FLAGS
---------------

Set additional VS shader flags of a ``.hlsl`` source file.

VS_SHADER_MODEL
---------------

Specifies the shader model of a ``.hlsl`` source file. Some shader types can
only be used with recent shader models

VS_SHADER_TYPE
--------------

Set the VS shader type of a ``.hlsl`` source file.

VS_XAML_TYPE
------------

Mark a XAML source file as a different type than the default ``Page``.
The most common usage would be to set the default App.xaml file as
ApplicationDefinition.

WRAP_EXCLUDE
------------

Exclude this source file from any code wrapping techniques.

Some packages can wrap source files into alternate languages to
provide additional functionality.  For example, C++ code can be
wrapped into Java or Python etc using SWIG etc.  If WRAP_EXCLUDE is
set to true (1 etc) that indicates that this source file should not be
wrapped.

XCODE_EXPLICIT_FILE_TYPE
------------------------

Set the Xcode ``explicitFileType`` attribute on its reference to a
source file.  CMake computes a default based on file extension but
can be told explicitly with this property.

See also ``XCODE_LAST_KNOWN_FILE_TYPE``.

XCODE_LAST_KNOWN_FILE_TYPE
--------------------------

Set the Xcode ``lastKnownFileType`` attribute on its reference to a
source file.  CMake computes a default based on file extension but
can be told explicitly with this property.

See also ``XCODE_EXPLICIT_FILE_TYPE``, which is preferred
over this property if set.

Properties on Cache Entries
===========================

ADVANCED
--------

True if entry should be hidden by default in GUIs.

This is a boolean value indicating whether the entry is considered
interesting only for advanced configuration.  The mark_as_advanced()
command modifies this property.

HELPSTRING
----------

Help associated with entry in GUIs.

This string summarizes the purpose of an entry to help users set it
through a CMake GUI.

MODIFIED
--------

Internal management property.  Do not set or get.

This is an internal cache entry property managed by CMake to track
interactive user modification of entries.  Ignore it.

STRINGS
-------

Enumerate possible STRING entry values for GUI selection.

For cache entries with type STRING, this enumerates a set of values.
CMake GUIs may use this to provide a selection widget instead of a
generic string entry field.  This is for convenience only.  CMake does
not enforce that the value matches one of those listed.

TYPE
----

Widget type for entry in GUIs.

Cache entry values are always strings, but CMake GUIs present widgets
to help users set values.  The GUIs use this property as a hint to
determine the widget type.  Valid TYPE values are:

::

 BOOL          = Boolean ON/OFF value.
 PATH          = Path to a directory.
 FILEPATH      = Path to a file.
 STRING        = Generic string value.
 INTERNAL      = Do not present in GUI at all.
 STATIC        = Value managed by CMake, do not change.
 UNINITIALIZED = Type not yet specified.

Generally the TYPE of a cache entry should be set by the command which
creates it (set, option, find_library, etc.).

VALUE
-----

Value of a cache entry.

This property maps to the actual value of a cache entry.  Setting this
property always sets the value without checking, so use with care.

Properties on Installed Files
=============================

Deprecated Properties on Directories
====================================

COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy ``CMP0043``.

Per-configuration preprocessor definitions in a directory.

This is the configuration-specific version of ``COMPILE_DEFINITIONS``
where ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).

This property will be initialized in each directory by its value in
the directory's parent.

Contents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

Generator expressions should be preferred instead of setting this property.

Deprecated Properties on Targets
================================

COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy ``CMP0043``.

Per-configuration preprocessor definitions on a target.

This is the configuration-specific version of ``COMPILE_DEFINITIONS``
where ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).

Contents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use "generator expressions"
with the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``
manual for available expressions.  See the ``cmake-buildsystem(7)``
manual for more on defining buildsystem properties.

Generator expressions should be preferred instead of setting this property.

POST_INSTALL_SCRIPT
-------------------

Deprecated install support.

The PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old
way to specify CMake scripts to run before and after installing a
target.  They are used only when the old INSTALL_TARGETS command is
used to install the target.  Use the INSTALL command instead.

PRE_INSTALL_SCRIPT
------------------

Deprecated install support.

The PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old
way to specify CMake scripts to run before and after installing a
target.  They are used only when the old INSTALL_TARGETS command is
used to install the target.  Use the INSTALL command instead.

Deprecated Properties on Source Files
=====================================

COMPILE_DEFINITIONS_<CONFIG>
----------------------------

Ignored.  See CMake Policy ``CMP0043``.

Per-configuration preprocessor definitions on a source file.

This is the configuration-specific version of COMPILE_DEFINITIONS.
Note that Xcode does not support per-configuration source file flags
so this property will be ignored by the Xcode generator.

cmake-qt(7)
***********

Introduction
============

CMake can find and use Qt 4 and Qt 5 libraries.  The Qt 4 libraries are found
by the ``FindQt4`` find-module shipped with CMake, whereas the
Qt 5 libraries are found using "Config-file Packages" shipped with Qt 5. See
``cmake-packages(7)`` for more information about CMake packages, and
see `the Qt cmake manual <http://qt-project.org/doc/qt-5/cmake-manual.html>`_
for your Qt version.

Qt 4 and Qt 5 may be used together in the same
``CMake buildsystem``:

 cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)

 project(Qt4And5)

 set(CMAKE_AUTOMOC ON)
 set(CMAKE_INCLUDE_CURRENT_DIR ON)

 find_package(Qt5Widgets REQUIRED)
 add_executable(publisher publisher.cpp)
 target_link_libraries(publisher Qt5::Widgets Qt5::DBus)

 find_package(Qt4 REQUIRED)
 add_executable(subscriber subscriber.cpp)
 target_link_libraries(subscriber Qt4::QtGui Qt4::QtDBus)

A CMake target may not link to both Qt 4 and Qt 5.  A diagnostic is issued if
this is attempted or results from transitive target dependency evaluation.

Qt Build Tools
==============

Qt relies on some bundled tools for code generation, such as ``moc`` for
meta-object code generation, ``uic`` for widget layout and population,
and ``rcc`` for virtual filesystem content generation.  These tools may be
automatically invoked by ``cmake(1)`` if the appropriate conditions
are met.  The automatic tool invocation may be used with both Qt 4 and Qt 5.

The tools are executed as part of a synthesized custom target generated by
CMake.  Target dependencies may be added to that custom target by adding them
to the ``AUTOGEN_TARGET_DEPENDS`` target property.

AUTOMOC
^^^^^^^

The ``AUTOMOC`` target property controls whether ``cmake(1)``
inspects the C++ files in the target to determine if they require ``moc`` to
be run, and to create rules to execute ``moc`` at the appropriate time.

If a ``Q_OBJECT`` or ``Q_GADGET`` macro is found in a header file, ``moc``
will be run on the file.  The result will be put into a file named according
to ``moc_<basename>.cpp``.  If the macro is found in a C++ implementation
file, the moc output will be put into a file named according to
``<basename>.moc``, following the Qt conventions.  The ``moc file`` may be
included by the user in the C++ implementation file with a preprocessor
``#include``.  If it is not so included, it will be added to a separate file
which is compiled into the target.

The ``moc`` command line will consume the ``COMPILE_DEFINITIONS`` and
``INCLUDE_DIRECTORIES`` target properties from the target it is being
invoked for, and for the appropriate build configuration.

Generated ``moc_*.cpp`` and ``*.moc`` files are placed in the build directory
so it is convenient to set the ``CMAKE_INCLUDE_CURRENT_DIR``
variable.  The ``AUTOMOC`` target property may be pre-set for all
following targets by setting the ``CMAKE_AUTOMOC`` variable.  The
``AUTOMOC_MOC_OPTIONS`` target property may be populated to set
options to pass to ``moc``. The ``CMAKE_AUTOMOC_MOC_OPTIONS``
variable may be populated to pre-set the options for all following targets.

AUTOUIC
^^^^^^^

The ``AUTOUIC`` target property controls whether ``cmake(1)``
inspects the C++ files in the target to determine if they require ``uic`` to
be run, and to create rules to execute ``uic`` at the appropriate time.

If a preprocessor ``#include`` directive is found which matches
``ui_<basename>.h``, and a ``<basename>.ui`` file exists, then ``uic`` will
be executed to generate the appropriate file.

Generated ``ui_*.h`` files are placed in the build directory so it is
convenient to set the ``CMAKE_INCLUDE_CURRENT_DIR`` variable.  The
``AUTOUIC`` target property may be pre-set for all following targets
by setting the ``CMAKE_AUTOUIC`` variable.  The
``AUTOUIC_OPTIONS`` target property may be populated to set options
to pass to ``uic``.  The ``CMAKE_AUTOUIC_OPTIONS`` variable may be
populated to pre-set the options for all following targets.  The
``AUTOUIC_OPTIONS`` source file property may be set on the
``<basename>.ui`` file to set particular options for the file.  This
overrides options from the ``AUTOUIC_OPTIONS`` target property.

A target may populate the ``INTERFACE_AUTOUIC_OPTIONS`` target
property with options that should be used when invoking ``uic``.  This must be
consistent with the ``AUTOUIC_OPTIONS`` target property content of the
depender target.  The ``CMAKE_DEBUG_TARGET_PROPERTIES`` variable may
be used to track the origin target of such
``INTERFACE_AUTOUIC_OPTIONS``.  This means that a library which
provides an alternative translation system for Qt may specify options which
should be used when running ``uic``:

 add_library(KI18n klocalizedstring.cpp)
 target_link_libraries(KI18n Qt5::Core)

 # KI18n uses the tr2i18n() function instead of tr().  That function is
 # declared in the klocalizedstring.h header.
 set(autouic_options
   -tr tr2i18n
   -include klocalizedstring.h
 )

 set_property(TARGET KI18n APPEND PROPERTY
   INTERFACE_AUTOUIC_OPTIONS ${autouic_options}
 )

A consuming project linking to the target exported from upstream automatically
uses appropriate options when ``uic`` is run by ``AUTOUIC``, as a
result of linking with the ``IMPORTED`` target:

 set(CMAKE_AUTOUIC ON)
 # Uses a libwidget.ui file:
 add_library(LibWidget libwidget.cpp)
 target_link_libraries(LibWidget
   KF5::KI18n
   Qt5::Widgets
 )

AUTORCC
^^^^^^^

The ``AUTORCC`` target property controls whether ``cmake(1)``
creates rules to execute ``rcc`` at the appropriate time on source files
which have the suffix ``.qrc``.

 add_executable(myexe main.cpp resource_file.qrc)

The ``AUTORCC`` target property may be pre-set for all following targets
by setting the ``CMAKE_AUTORCC`` variable.  The
``AUTORCC_OPTIONS`` target property may be populated to set options
to pass to ``rcc``.  The ``CMAKE_AUTORCC_OPTIONS`` variable may be
populated to pre-set the options for all following targets.  The
``AUTORCC_OPTIONS`` source file property may be set on the
``<name>.qrc`` file to set particular options for the file.  This
overrides options from the ``AUTORCC_OPTIONS`` target property.

qtmain.lib on Windows
=====================

The Qt 4 and 5 ``IMPORTED`` targets for the QtGui libraries specify
that the qtmain.lib static library shipped with Qt will be linked by all
dependent executables which have the ``WIN32_EXECUTABLE`` enabled.

To disable this behavior, enable the ``Qt5_NO_LINK_QTMAIN`` target property for
Qt 5 based targets or ``QT4_NO_LINK_QTMAIN`` target property for Qt 4 based
targets.

 add_executable(myexe WIN32 main.cpp)
 target_link_libraries(myexe Qt4::QtGui)

 add_executable(myexe_no_qtmain WIN32 main_no_qtmain.cpp)
 set_property(TARGET main_no_qtmain PROPERTY QT4_NO_LINK_QTMAIN ON)
 target_link_libraries(main_no_qtmain Qt4::QtGui)

cmake-toolchains(7)
*******************

Introduction
============

CMake uses a toolchain of utilities to compile, link libraries and create
archives, and other tasks to drive the build. The toolchain utilities available
are determined by the languages enabled. In normal builds, CMake automatically
determines the toolchain for host builds based on system introspection and
defaults. In cross-compiling scenarios, a toolchain file may be specified
with information about compiler and utility paths.

Languages
=========

Languages are enabled by the ``project()`` command.  Language-specific
built-in variables, such as
``CMAKE_CXX_COMPILER``,
``CMAKE_CXX_COMPILER_ID`` etc are set by
invoking the ``project()`` command.  If no project command
is in the top-level CMakeLists file, one will be implicitly generated. By default
the enabled languages are C and CXX:

 project(C_Only C)

A special value of NONE can also be used with the ``project()`` command
to enable no languages:

 project(MyProject NONE)

The ``enable_language()`` command can be used to enable languages after the
``project()`` command:

 enable_language(CXX)

When a language is enabled, CMake finds a compiler for that language, and
determines some information, such as the vendor and version of the compiler,
the target architecture and bitwidth, the location of corresponding utilities
etc.

The ``ENABLED_LANGUAGES`` global property contains the languages which
are currently enabled.

Variables and Properties
========================

Several variables relate to the language components of a toolchain which are
enabled. ``CMAKE_<LANG>_COMPILER`` is the full path to the compiler used
for ``<LANG>``. ``CMAKE_<LANG>_COMPILER_ID`` is the identifier used
by CMake for the compiler and ``CMAKE_<LANG>_COMPILER_VERSION`` is the
version of the compiler.

The ``CMAKE_<LANG>_FLAGS`` variables and the configuration-specific
equivalents contain flags that will be added to the compile command when
compiling a file of a particular language.

As the linker is invoked by the compiler driver, CMake needs a way to determine
which compiler to use to invoke the linker. This is calculated by the
``LANGUAGE`` of source files in the target, and in the case of static
libraries, the language of the dependent libraries. The choice CMake makes may
be overridden with the ``LINKER_LANGUAGE`` target property.

Toolchain Features
==================

CMake provides the ``try_compile()`` command and wrapper macros such as
``CheckCXXSourceCompiles``, ``CheckCXXSymbolExists`` and
``CheckIncludeFile`` to test capability and availability of various
toolchain features. These APIs test the toolchain in some way and cache the
result so that the test does not have to be performed again the next time
CMake runs.

Some toolchain features have built-in handling in CMake, and do not require
compile-tests. For example, ``POSITION_INDEPENDENT_CODE`` allows
specifying that a target should be built as position-independent code, if
the compiler supports that feature. The ``<LANG>_VISIBILITY_PRESET``
and ``VISIBILITY_INLINES_HIDDEN`` target properties add flags for
hidden visibility, if supported by the compiler.

Cross Compiling
===============

If ``cmake(1)`` is invoked with the command line parameter
``-DCMAKE_TOOLCHAIN_FILE=path/to/file``, the file will be loaded early to set
values for the compilers.
The ``CMAKE_CROSSCOMPILING`` variable is set to true when CMake is
cross-compiling.

Cross Compiling for Linux
-------------------------

A typical cross-compiling toolchain for Linux has content such
as:

 set(CMAKE_SYSTEM_NAME Linux)
 set(CMAKE_SYSTEM_PROCESSOR arm)

 set(CMAKE_SYSROOT /home/devel/rasp-pi-rootfs)
 set(CMAKE_STAGING_PREFIX /home/devel/stage)

 set(tools /home/devel/gcc-4.7-linaro-rpi-gnueabihf)
 set(CMAKE_C_COMPILER ${tools}/bin/arm-linux-gnueabihf-gcc)
 set(CMAKE_CXX_COMPILER ${tools}/bin/arm-linux-gnueabihf-g++)

 set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
 set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
 set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
 set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

The ``CMAKE_SYSTEM_NAME`` is the CMake-identifier of the target platform
to build for.

The ``CMAKE_SYSTEM_PROCESSOR`` is the CMake-identifier of the target architecture
to build for.

The ``CMAKE_SYSROOT`` is optional, and may be specified if a sysroot
is available.

The ``CMAKE_STAGING_PREFIX`` is also optional. It may be used to specify
a path on the host to install to. The ``CMAKE_INSTALL_PREFIX`` is always
the runtime installation location, even when cross-compiling.

The ``CMAKE_<LANG>_COMPILER`` variables may be set to full paths, or to
names of compilers to search for in standard locations.   For toolchains that
do not support linking binaries without custom flags or scripts one may set
the ``CMAKE_TRY_COMPILE_TARGET_TYPE`` variable to ``STATIC_LIBRARY``
to tell CMake not to try to link executables during its checks.

CMake ``find_*`` commands will look in the sysroot, and the ``CMAKE_FIND_ROOT_PATH``
entries by default in all cases, as well as looking in the host system root prefix.
Although this can be controlled on a case-by-case basis, when cross-compiling, it
can be useful to exclude looking in either the host or the target for particular
artifacts. Generally, includes, libraries and packages should be found in the
target system prefixes, whereas executables which must be run as part of the build
should be found only on the host and not on the target. This is the purpose of
the ``CMAKE_FIND_ROOT_PATH_MODE_*`` variables.

Cross Compiling for the Cray Linux Environment
----------------------------------------------

Cross compiling for compute nodes in the Cray Linux Environment can be done
without needing a separate toolchain file.  Specifying
``-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment`` on the CMake command line will
ensure that the appropriate build settings and search paths are configured.
The platform will pull its configuration from the current environment
variables and will configure a project to use the compiler wrappers from the
Cray Programming Environment's ``PrgEnv-*`` modules if present and loaded.

The default configuration of the Cray Programming Environment is to only
support static libraries.  This can be overridden and shared libraries
enabled by setting the ``CRAYPE_LINK_TYPE`` environment variable to
``dynamic``.

Running CMake without specifying ``CMAKE_SYSTEM_NAME`` will
run the configure step in host mode assuming a standard Linux environment.
If not overridden, the ``PrgEnv-*`` compiler wrappers will end up getting used,
which if targeting the either the login node or compute node, is likely not the
desired behavior.  The exception to this would be if you are building directly
on a NID instead of cross-compiling from a login node. If trying to build
software for a login node, you will need to either first unload the
currently loaded ``PrgEnv-*`` module or explicitly tell CMake to use the
system compilers in ``/usr/bin`` instead of the Cray wrappers.  If instead
targeting a compute node is desired, just specify the
``CMAKE_SYSTEM_NAME`` as mentioned above.

Cross Compiling using Clang
---------------------------

Some compilers such as Clang are inherently cross compilers.
The ``CMAKE_<LANG>_COMPILER_TARGET`` can be set to pass a
value to those supported compilers when compiling:

 set(CMAKE_SYSTEM_NAME Linux)
 set(CMAKE_SYSTEM_PROCESSOR arm)

 set(triple arm-linux-gnueabihf)

 set(CMAKE_C_COMPILER clang)
 set(CMAKE_C_COMPILER_TARGET ${triple})
 set(CMAKE_CXX_COMPILER clang++)
 set(CMAKE_CXX_COMPILER_TARGET ${triple})

Similarly, some compilers do not ship their own supplementary utilities
such as linkers, but provide a way to specify the location of the external
toolchain which will be used by the compiler driver. The
``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` variable can be set in a
toolchain file to pass the path to the compiler driver.

Cross Compiling for QNX
-----------------------

As the Clang compiler the QNX QCC compile is inherently a cross compiler.
And the ``CMAKE_<LANG>_COMPILER_TARGET`` can be set to pass a
value to those supported compilers when compiling:

 set(CMAKE_SYSTEM_NAME QNX)

 set(arch gcc_ntoarmv7le)

 set(CMAKE_C_COMPILER qcc)
 set(CMAKE_C_COMPILER_TARGET ${arch})
 set(CMAKE_CXX_COMPILER QCC)
 set(CMAKE_CXX_COMPILER_TARGET ${arch})

Cross Compiling for Windows CE
------------------------------

Cross compiling for Windows CE requires the corresponding SDK being
installed on your system.  These SDKs are usually installed under
``C:/Program Files (x86)/Windows CE Tools/SDKs``.

A toolchain file to configure a Visual Studio generator for
Windows CE may look like this:

 set(CMAKE_SYSTEM_NAME WindowsCE)

 set(CMAKE_SYSTEM_VERSION 8.0)
 set(CMAKE_SYSTEM_PROCESSOR arm)

 set(CMAKE_GENERATOR_TOOLSET CE800) # Can be omitted for 8.0
 set(CMAKE_GENERATOR_PLATFORM SDK_AM335X_SK_WEC2013_V310)

The ``CMAKE_GENERATOR_PLATFORM`` tells the generator which SDK to use.
Further ``CMAKE_SYSTEM_VERSION`` tells the generator what version of
Windows CE to use.  Currently version 8.0 (Windows Embedded Compact 2013) is
supported out of the box.  Other versions may require one to set
``CMAKE_GENERATOR_TOOLSET`` to the correct value.

Cross Compiling for Windows 10 Universal Applications
-----------------------------------------------------

A toolchain file to configure a Visual Studio generator for a
Windows 10 Universal Application may look like this:

 set(CMAKE_SYSTEM_NAME WindowsStore)
 set(CMAKE_SYSTEM_VERSION 10.0)

A Windows 10 Universal Application targets both Windows Store and
Windows Phone.  Specify the ``CMAKE_SYSTEM_VERSION`` variable
to be ``10.0`` to build with the latest available Windows 10 SDK.
Specify a more specific version (e.g. ``10.0.10240.0`` for RTM)
to build with the corresponding SDK.

Cross Compiling for Windows Phone
---------------------------------

A toolchain file to configure a Visual Studio generator for
Windows Phone may look like this:

 set(CMAKE_SYSTEM_NAME WindowsPhone)
 set(CMAKE_SYSTEM_VERSION 8.1)

Cross Compiling for Windows Store
---------------------------------

A toolchain file to configure a Visual Studio generator for
Windows Store may look like this:

 set(CMAKE_SYSTEM_NAME WindowsStore)
 set(CMAKE_SYSTEM_VERSION 8.1)

Cross Compiling using NVIDIA Nsight Tegra
-----------------------------------------

A toolchain file to configure a Visual Studio generator to
build using NVIDIA Nsight Tegra targeting Android may look
like this:

 set(CMAKE_SYSTEM_NAME Android)

The ``CMAKE_GENERATOR_TOOLSET`` may be set to select
the Nsight Tegra "Toolchain Version" value.

See also target properties:

* ``ANDROID_ANT_ADDITIONAL_OPTIONS``
* ``ANDROID_API_MIN``
* ``ANDROID_API``
* ``ANDROID_ARCH``
* ``ANDROID_ASSETS_DIRECTORIES``
* ``ANDROID_GUI``
* ``ANDROID_JAR_DEPENDENCIES``
* ``ANDROID_JAR_DIRECTORIES``
* ``ANDROID_JAVA_SOURCE_DIR``
* ``ANDROID_NATIVE_LIB_DEPENDENCIES``
* ``ANDROID_NATIVE_LIB_DIRECTORIES``
* ``ANDROID_PROCESS_MAX``
* ``ANDROID_PROGUARD_CONFIG_PATH``
* ``ANDROID_PROGUARD``
* ``ANDROID_SECURE_PROPS_PATH``
* ``ANDROID_SKIP_ANT_STEP``
* ``ANDROID_STL_TYPE``

cmake-variables(7)
******************

Variables that Provide Information
==================================

CMAKE_ARGC
----------

Number of command line arguments passed to CMake in script mode.

When run in :ref:`-P <CMake Options>` script mode, CMake sets this variable to
the number of command line arguments.  See also ``CMAKE_ARGV0``,
``1``, ``2`` ...

CMAKE_ARGV0
-----------

Command line argument passed to CMake in script mode.

When run in :ref:`-P <CMake Options>` script mode, CMake sets this variable to
the first command line argument.  It then also sets ``CMAKE_ARGV1``,
``CMAKE_ARGV2``, ... and so on, up to the number of command line arguments
given.  See also ``CMAKE_ARGC``.

CMAKE_AR
--------

Name of archiving tool for static libraries.

This specifies the name of the program that creates archive or static
libraries.

CMAKE_BINARY_DIR
----------------

The path to the top level of the build tree.

This is the full path to the top level of the current CMake build
tree.  For an in-source build, this would be the same as
``CMAKE_SOURCE_DIR``.

When run in -P script mode, CMake sets the variables
``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,
``CMAKE_CURRENT_BINARY_DIR`` and
``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.

CMAKE_BUILD_TOOL
----------------

This variable exists only for backwards compatibility.
It contains the same value as ``CMAKE_MAKE_PROGRAM``.
Use that variable instead.

CMAKE_CACHEFILE_DIR
-------------------

The directory with the ``CMakeCache.txt`` file.

This is the full path to the directory that has the ``CMakeCache.txt``
file in it.  This is the same as ``CMAKE_BINARY_DIR``.

CMAKE_CACHE_MAJOR_VERSION
-------------------------

Major version of CMake used to create the ``CMakeCache.txt`` file

This stores the major version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.

CMAKE_CACHE_MINOR_VERSION
-------------------------

Minor version of CMake used to create the ``CMakeCache.txt`` file

This stores the minor version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.

CMAKE_CACHE_PATCH_VERSION
-------------------------

Patch version of CMake used to create the ``CMakeCache.txt`` file

This stores the patch version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.

CMAKE_CFG_INTDIR
----------------

Build-time reference to per-configuration output subdirectory.

For native build systems supporting multiple configurations in the
build tree (such as :ref:`Visual Studio Generators` and ``Xcode``),
the value is a reference to a build-time variable specifying the name
of the per-configuration output subdirectory.  On :ref:`Makefile Generators`
this evaluates to `.` because there is only one configuration in a build tree.
Example values:

::

 $(ConfigurationName) = Visual Studio 7, 8, 9
 $(Configuration)     = Visual Studio 10
 $(CONFIGURATION)     = Xcode
 .                    = Make-based tools

Since these values are evaluated by the native build system, this
variable is suitable only for use in command lines that will be
evaluated at build time.  Example of intended usage:

::

 add_executable(mytool mytool.c)
 add_custom_command(
   OUTPUT out.txt
   COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool
           ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt
   DEPENDS mytool in.txt
   )
 add_custom_target(drive ALL DEPENDS out.txt)

Note that ``CMAKE_CFG_INTDIR`` is no longer necessary for this purpose but
has been left for compatibility with existing projects.  Instead
``add_custom_command()`` recognizes executable target names in its
``COMMAND`` option, so
``${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool`` can be replaced
by just ``mytool``.

This variable is read-only.  Setting it is undefined behavior.  In
multi-configuration build systems the value of this variable is passed
as the value of preprocessor symbol ``CMAKE_INTDIR`` to the compilation
of all source files.

CMAKE_COMMAND
-------------

The full path to the ``cmake(1)`` executable.

This is the full path to the CMake executable ``cmake(1)`` which is
useful from custom commands that want to use the ``cmake -E`` option for
portable system commands.  (e.g.  ``/usr/local/bin/cmake``)

CMAKE_CROSSCOMPILING
--------------------

Is CMake currently cross compiling.

This variable will be set to true by CMake if CMake is cross
compiling.  Specifically if the build platform is different from the
target platform.

CMAKE_CROSSCOMPILING_EMULATOR
-----------------------------

This variable is only used when ``CMAKE_CROSSCOMPILING`` is on. It
should point to a command on the host system that can run executable built
for the target system.

The command will be used to run ``try_run()`` generated executables,
which avoids manual population of the TryRunResults.cmake file.

It is also used as the default value for the
``CROSSCOMPILING_EMULATOR`` target property of executables.

CMAKE_CTEST_COMMAND
-------------------

Full path to ``ctest(1)`` command installed with CMake.

This is the full path to the CTest executable ``ctest(1)`` which is
useful from custom commands that want to use the ``cmake(1)`` ``-E``
option for portable system commands.

CMAKE_CURRENT_BINARY_DIR
------------------------

The path to the binary directory currently being processed.

This the full path to the build directory that is currently being
processed by cmake.  Each directory added by ``add_subdirectory()`` will
create a binary directory in the build tree, and as it is being
processed this variable will be set.  For in-source builds this is the
current source directory being processed.

When run in -P script mode, CMake sets the variables
``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,
``CMAKE_CURRENT_BINARY_DIR`` and
``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.

CMAKE_CURRENT_LIST_DIR
----------------------

Full directory of the listfile currently being processed.

As CMake processes the listfiles in your project this variable will
always be set to the directory where the listfile which is currently
being processed (``CMAKE_CURRENT_LIST_FILE``) is located.  The value
has dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the directory where this file is located.
When CMake finishes processing commands from the file it restores the
previous value.  Therefore the value of the variable inside a macro or
function is the directory of the file invoking the bottom-most entry
on the call stack, not the directory of the file containing the macro
or function definition.

See also ``CMAKE_CURRENT_LIST_FILE``.

CMAKE_CURRENT_LIST_FILE
-----------------------

Full path to the listfile currently being processed.

As CMake processes the listfiles in your project this variable will
always be set to the one currently being processed.  The value has
dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the location of the file.  When CMake
finishes processing commands from the file it restores the previous
value.  Therefore the value of the variable inside a macro or function
is the file invoking the bottom-most entry on the call stack, not the
file containing the macro or function definition.

See also ``CMAKE_PARENT_LIST_FILE``.

CMAKE_CURRENT_LIST_LINE
-----------------------

The line number of the current file being processed.

This is the line number of the file currently being processed by
cmake.

CMAKE_CURRENT_SOURCE_DIR
------------------------

The path to the source directory currently being processed.

This the full path to the source directory that is currently being
processed by cmake.

When run in -P script mode, CMake sets the variables
``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,
``CMAKE_CURRENT_BINARY_DIR`` and
``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.

CMAKE_DL_LIBS
-------------

Name of library containing ``dlopen`` and ``dlcose``.

The name of the library that has ``dlopen`` and ``dlclose`` in it, usually
``-ldl`` on most UNIX machines.

CMAKE_EDIT_COMMAND
------------------

Full path to ``cmake-gui(1)`` or ``ccmake(1)``.  Defined only for
:ref:`Makefile Generators` when not using an "extra" generator for an IDE.

This is the full path to the CMake executable that can graphically
edit the cache.  For example, ``cmake-gui(1)`` or ``ccmake(1)``.

CMAKE_EXECUTABLE_SUFFIX
-----------------------

The suffix for executables on this platform.

The suffix to use for the end of an executable filename if any, ``.exe``
on Windows.

``CMAKE_EXECUTABLE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_EXTRA_GENERATOR
---------------------

The extra generator used to build the project.  See
``cmake-generators(7)``.

When using the Eclipse, CodeBlocks or KDevelop generators, CMake
generates Makefiles (``CMAKE_GENERATOR``) and additionally project
files for the respective IDE.  This IDE project file generator is stored in
``CMAKE_EXTRA_GENERATOR`` (e.g.  ``Eclipse CDT4``).

CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
-----------------------------------

Additional suffixes for shared libraries.

Extensions for shared libraries other than that specified by
``CMAKE_SHARED_LIBRARY_SUFFIX``, if any.  CMake uses this to recognize
external shared library files during analysis of libraries linked by a
target.

CMAKE_FIND_PACKAGE_NAME
-----------------------

Defined by the ``find_package()`` command while loading
a find module to record the caller-specified package name.
See command documentation for details.

CMAKE_GENERATOR
---------------

The generator used to build the project.  See ``cmake-generators(7)``.

The name of the generator that is being used to generate the build
files.  (e.g.  ``Unix Makefiles``, ``Ninja``, etc.)

CMAKE_GENERATOR_PLATFORM
------------------------

Generator-specific target platform name specified by user.

Some CMake generators support a target platform name to be given
to the native build system to choose a compiler toolchain.
If the user specifies a platform name (e.g. via the ``cmake(1)`` ``-A``
option) the value will be available in this variable.

The value of this variable should never be modified by project code.
A toolchain file specified by the ``CMAKE_TOOLCHAIN_FILE``
variable may initialize ``CMAKE_GENERATOR_PLATFORM``.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.

CMAKE_GENERATOR_TOOLSET
-----------------------

Native build system toolset name specified by user.

Some CMake generators support a toolset name to be given to the native
build system to choose a compiler.  If the user specifies a toolset
name (e.g.  via the ``cmake(1)`` ``-T`` option) the value will be
available in this variable.

The value of this variable should never be modified by project code.
A toolchain file specified by the ``CMAKE_TOOLCHAIN_FILE``
variable may initialize ``CMAKE_GENERATOR_TOOLSET``.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.

CMAKE_HOME_DIRECTORY
--------------------

Path to top of source tree.

This is the path to the top level of the source tree.

CMAKE_IMPORT_LIBRARY_PREFIX
---------------------------

The prefix for import libraries that you link to.

The prefix to use for the name of an import library if used on this
platform.

``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_IMPORT_LIBRARY_SUFFIX
---------------------------

The suffix for import libraries that you link to.

The suffix to use for the end of an import library filename if used on
this platform.

``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_JOB_POOL_COMPILE
----------------------

This variable is used to initialize the ``JOB_POOL_COMPILE``
property on all the targets. See ``JOB_POOL_COMPILE``
for additional information.

CMAKE_JOB_POOL_LINK
----------------------

This variable is used to initialize the ``JOB_POOL_LINK``
property on all the targets. See ``JOB_POOL_LINK``
for additional information.

CMAKE_LINK_LIBRARY_SUFFIX
-------------------------

The suffix for libraries that you link to.

The suffix to use for the end of a library filename, ``.lib`` on Windows.

CMAKE_LINK_SEARCH_END_STATIC
----------------------------

End a link line such that static system libraries are used.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default CMake adds an option at the
end of the library list (if necessary) to set the linker search type
back to its starting type.  This property switches the final linker
search type to ``-Bstatic`` regardless of how it started.

This variable is used to initialize the target property
``LINK_SEARCH_END_STATIC`` for all targets. If set, it's
value is also used by the ``try_compile()`` command.

See also ``CMAKE_LINK_SEARCH_START_STATIC``.

CMAKE_LINK_SEARCH_START_STATIC
------------------------------

Assume the linker looks for static libraries by default.

Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to
determine whether to use static or shared libraries for ``-lXXX`` options.
CMake uses these options to set the link type for libraries whose full
paths are not known or (in some cases) are in implicit link
directories for the platform.  By default the linker search type is
assumed to be ``-Bdynamic`` at the beginning of the library list.  This
property switches the assumption to ``-Bstatic``.  It is intended for use
when linking an executable statically (e.g.  with the GNU ``-static``
option).

This variable is used to initialize the target property
``LINK_SEARCH_START_STATIC`` for all targets.  If set, it's
value is also used by the ``try_compile()`` command.

See also ``CMAKE_LINK_SEARCH_END_STATIC``.

CMAKE_MAJOR_VERSION
-------------------

First version number component of the ``CMAKE_VERSION``
variable.

CMAKE_MAKE_PROGRAM
------------------

Tool that can launch the native build system.
The value may be the full path to an executable or just the tool
name if it is expected to be in the ``PATH``.

The tool selected depends on the ``CMAKE_GENERATOR`` used
to configure the project:

* The :ref:`Makefile Generators` set this to ``make``, ``gmake``, or
  a generator-specific tool (e.g. ``nmake`` for ``NMake Makefiles``).

  These generators store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  so that it may be edited by the user.

* The ``Ninja`` generator sets this to ``ninja``.

  This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  so that it may be edited by the user.

* The ``Xcode`` generator sets this to ``xcodebuild`` (or possibly an
  otherwise undocumented ``cmakexbuild`` wrapper implementing some
  workarounds).

  This generator prefers to lookup the build tool at build time
  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  ahead of time.  This is because ``xcodebuild`` is easy to find,
  the ``cmakexbuild`` wrapper is needed only for older Xcode versions,
  and the path to ``cmakexbuild`` may be outdated if CMake itself moves.

  For compatibility with versions of CMake prior to 3.2, if
  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to
  the CMake cache then CMake will use the specified value.

* The :ref:`Visual Studio Generators` set this to the full path to
  ``MSBuild.exe`` (VS >= 10), ``devenv.com`` (VS 7,8,9), or
  ``VCExpress.exe`` (VS Express 8,9).
  (See also variables
  ``CMAKE_VS_MSBUILD_COMMAND`` and
  ``CMAKE_VS_DEVENV_COMMAND``.

  These generators prefer to lookup the build tool at build time
  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache
  ahead of time.  This is because the tools are version-specific
  and can be located using the Windows Registry.  It is also
  necessary because the proper build tool may depend on the
  project content (e.g. the Intel Fortran plugin to VS 10 and 11
  requires ``devenv.com`` to build its ``.vfproj`` project files
  even though ``MSBuild.exe`` is normally preferred to support
  the ``CMAKE_GENERATOR_TOOLSET``).

  For compatibility with versions of CMake prior to 3.0, if
  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to
  the CMake cache then CMake will use the specified value if
  possible.

* The ``Green Hills MULTI`` generator sets this to ``gbuild``.
  If a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to
  the CMake cache then CMake will use the specified value.

The ``CMAKE_MAKE_PROGRAM`` variable is set for use by project code.
The value is also used by the ``cmake(1)`` ``--build`` and
``ctest(1)`` ``--build-and-test`` tools to launch the native
build process.

CMAKE_MATCH_COUNT
-----------------

The number of matches with the last regular expression.

When a regular expression match is used, CMake fills in ``CMAKE_MATCH_<n>``
variables with the match contents. The ``CMAKE_MATCH_COUNT`` variable holds
the number of match expressions when these are filled.

CMAKE_MINIMUM_REQUIRED_VERSION
------------------------------

Version specified to ``cmake_minimum_required()`` command

Variable containing the ``VERSION`` component specified in the
``cmake_minimum_required()`` command.

CMAKE_MINOR_VERSION
-------------------

Second version number component of the ``CMAKE_VERSION``
variable.

CMAKE_PARENT_LIST_FILE
----------------------

Full path to the CMake file that included the current one.

While processing a CMake file loaded by ``include()`` or
``find_package()`` this variable contains the full path to the file
including it.  The top of the include stack is always the ``CMakeLists.txt``
for the current directory.  See also ``CMAKE_CURRENT_LIST_FILE``.

CMAKE_PATCH_VERSION
-------------------

Third version number component of the ``CMAKE_VERSION``
variable.

CMAKE_PROJECT_NAME
------------------

The name of the current project.

This specifies name of the current project from the closest inherited
``project()`` command.

CMAKE_RANLIB
------------

Name of randomizing tool for static libraries.

This specifies name of the program that randomizes libraries on UNIX,
not used on Windows, but may be present.

CMAKE_ROOT
----------

Install directory for running cmake.

This is the install root for the running CMake and the ``Modules``
directory can be found here.  This is commonly used in this format:
``${CMAKE_ROOT}/Modules``

CMAKE_SCRIPT_MODE_FILE
----------------------

Full path to the ``cmake(1)`` ``-P`` script file currently being
processed.

When run in ``cmake(1)`` ``-P`` script mode, CMake sets this variable to
the full path of the script file.  When run to configure a ``CMakeLists.txt``
file, this variable is not set.

CMAKE_SHARED_LIBRARY_PREFIX
---------------------------

The prefix for shared libraries that you link to.

The prefix to use for the name of a shared library, ``lib`` on UNIX.

``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_SHARED_LIBRARY_SUFFIX
---------------------------

The suffix for shared libraries that you link to.

The suffix to use for the end of a shared library filename, ``.dll`` on
Windows.

``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_SHARED_MODULE_PREFIX
--------------------------

The prefix for loadable modules that you link to.

The prefix to use for the name of a loadable module on this platform.

``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_SHARED_MODULE_SUFFIX
--------------------------

The suffix for shared libraries that you link to.

The suffix to use for the end of a loadable module filename on this
platform

``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_SIZEOF_VOID_P
-------------------

Size of a ``void`` pointer.

This is set to the size of a pointer on the target machine, and is determined
by a try compile.  If a 64-bit size is found, then the library search
path is modified to look for 64-bit libraries first.

CMAKE_SKIP_INSTALL_RULES
------------------------

Whether to disable generation of installation rules.

If ``TRUE``, cmake will neither generate installaton rules nor
will it generate ``cmake_install.cmake`` files. This variable is ``FALSE`` by
default.

CMAKE_SKIP_RPATH
----------------

If true, do not add run time path information.

If this is set to ``TRUE``, then the rpath information is not added to
compiled executables.  The default is to add rpath information if the
platform supports it.  This allows for easy running from the build
tree.  To omit RPATH in the install step, but not the build step, use
``CMAKE_SKIP_INSTALL_RPATH`` instead.

CMAKE_SOURCE_DIR
----------------

The path to the top level of the source tree.

This is the full path to the top level of the current CMake source
tree.  For an in-source build, this would be the same as
``CMAKE_BINARY_DIR``.

When run in -P script mode, CMake sets the variables
``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,
``CMAKE_CURRENT_BINARY_DIR`` and
``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.

CMAKE_STATIC_LIBRARY_PREFIX
---------------------------

The prefix for static libraries that you link to.

The prefix to use for the name of a static library, ``lib`` on UNIX.

``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_STATIC_LIBRARY_SUFFIX
---------------------------

The suffix for static libraries that you link to.

The suffix to use for the end of a static library filename, ``.lib`` on
Windows.

``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.

CMAKE_TOOLCHAIN_FILE
--------------------

Path to toolchain file supplied to ``cmake(1)``.

This variable is specified on the command line when cross-compiling with CMake.
It is the path to a file which is read early in the CMake run and which
specifies locations for compilers and toolchain utilities, and other target
platform and compiler related information.

CMAKE_TWEAK_VERSION
-------------------

Defined to ``0`` for compatibility with code written for older
CMake versions that may have defined higher values.

.. note::

  In CMake versions 2.8.2 through 2.8.12, this variable holds
  the fourth version number component of the
  ``CMAKE_VERSION`` variable.

CMAKE_VERBOSE_MAKEFILE
----------------------

Enable verbose output from Makefile builds.

This variable is a cache entry initialized (to ``FALSE``) by
the ``project()`` command.  Users may enable the option
in their local build tree to get more verbose output from
Makefile builds and show each command line as it is launched.

CMAKE_VERSION
-------------

The CMake version string as three non-negative integer components
separated by ``.`` and possibly followed by ``-`` and other information.
The first two components represent the feature level and the third
component represents either a bug-fix level or development date.

Release versions and release candidate versions of CMake use the format::

 <major>.<minor>.<patch>[-rc<n>]

where the ``<patch>`` component is less than ``20000000``.  Development
versions of CMake use the format::

 <major>.<minor>.<date>[-<id>]

where the ``<date>`` component is of format ``CCYYMMDD`` and ``<id>``
may contain arbitrary text.  This represents development as of a
particular date following the ``<major>.<minor>`` feature release.

Individual component values are also available in variables:

* ``CMAKE_MAJOR_VERSION``
* ``CMAKE_MINOR_VERSION``
* ``CMAKE_PATCH_VERSION``
* ``CMAKE_TWEAK_VERSION``

Use the ``if()`` command ``VERSION_LESS``, ``VERSION_EQUAL``, or
``VERSION_GREATER`` operators to compare version string values against
``CMAKE_VERSION`` using a component-wise test.  Version component
values may be 10 or larger so do not attempt to compare version
strings as floating-point numbers.

.. note::

  CMake versions 2.8.2 through 2.8.12 used three components for the
  feature level.  Release versions represented the bug-fix level in a
  fourth component, i.e. ``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``.
  Development versions represented the development date in the fourth
  component, i.e. ``<major>.<minor>.<patch>.<date>[-<id>]``.

  CMake versions prior to 2.8.2 used three components for the
  feature level and had no bug-fix component.  Release versions
  used an even-valued second component, i.e.
  ``<major>.<even-minor>.<patch>[-rc<n>]``.  Development versions
  used an odd-valued second component with the development date as
  the third component, i.e. ``<major>.<odd-minor>.<date>``.

  The ``CMAKE_VERSION`` variable is defined by CMake 2.6.3 and higher.
  Earlier versions defined only the individual component variables.

CMAKE_VS_DEVENV_COMMAND
-----------------------

The generators for ``Visual Studio 7`` and above set this
variable to the ``devenv.com`` command installed with the corresponding
Visual Studio version.  Note that this variable may be empty on
Visual Studio Express editions because they do not provide this tool.

This variable is not defined by other generators even if ``devenv.com``
is installed on the computer.

The ``CMAKE_VS_MSBUILD_COMMAND`` is also provided for
``Visual Studio 10 2010`` and above.
See also the ``CMAKE_MAKE_PROGRAM`` variable.

CMAKE_VS_INTEL_Fortran_PROJECT_VERSION
--------------------------------------

When generating for ``Visual Studio 7`` or greater with the Intel
Fortran plugin installed, this specifies the ``.vfproj`` project file format
version.  This is intended for internal use by CMake and should not be
used by project code.

CMAKE_VS_MSBUILD_COMMAND
------------------------

The generators for ``Visual Studio 10 2010`` and above set this
variable to the ``MSBuild.exe`` command installed with the corresponding
Visual Studio version.

This variable is not defined by other generators even if ``MSBuild.exe``
is installed on the computer.

The ``CMAKE_VS_DEVENV_COMMAND`` is also provided for the
non-Express editions of Visual Studio.
See also the ``CMAKE_MAKE_PROGRAM`` variable.

CMAKE_VS_NsightTegra_VERSION
----------------------------

When using a Visual Studio generator with the
``CMAKE_SYSTEM_NAME`` variable set to ``Android``,
this variable contains the version number of the
installed NVIDIA Nsight Tegra Visual Studio Edition.

CMAKE_VS_PLATFORM_NAME
----------------------

Visual Studio target platform name.

VS 8 and above allow project files to specify a target platform.
CMake provides the name of the chosen platform in this variable.

CMAKE_VS_PLATFORM_TOOLSET
-------------------------

Visual Studio Platform Toolset name.

VS 10 and above use MSBuild under the hood and support multiple
compiler toolchains.  CMake may specify a toolset explicitly, such as
``v110`` for VS 11 or ``Windows7.1SDK`` for 64-bit support in VS 10
Express.  CMake provides the name of the chosen toolset in this
variable.

CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION
----------------------------------------

Visual Studio Windows Target Platform Version.

When targeting Windows 10 and above Visual Studio 2015 and above support
specification of a target Windows version to select a corresponding SDK.
The ``CMAKE_SYSTEM_VERSION`` variable may be set to specify a
version.  Otherwise CMake computes a default version based on the Windows
SDK versions available.  The chosen Windows target version number is provided
in ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION``.  If no Windows 10 SDK
is available this value will be empty.

CMAKE_XCODE_PLATFORM_TOOLSET
----------------------------

Xcode compiler selection.

``Xcode`` supports selection of a compiler from one of the installed
toolsets.  CMake provides the name of the chosen toolset in this
variable, if any is explicitly selected (e.g.  via the ``cmake(1)``
``-T`` option).

PROJECT_BINARY_DIR
------------------

Full path to build directory for project.

This is the binary directory of the most recent ``project()`` command.

<PROJECT-NAME>_BINARY_DIR
-------------------------

Top level binary directory for the named project.

A variable is created with the name used in the ``project()`` command,
and is the binary directory for the project.  This can be useful when
``add_subdirectory()`` is used to connect several projects.

PROJECT_NAME
------------

Name of the project given to the project command.

This is the name given to the most recent ``project()`` command.

<PROJECT-NAME>_SOURCE_DIR
-------------------------

Top level source directory for the named project.

A variable is created with the name used in the ``project()`` command,
and is the source directory for the project.  This can be useful when
``add_subdirectory()`` is used to connect several projects.

<PROJECT-NAME>_VERSION
----------------------

Value given to the ``VERSION`` option of the most recent call to the
``project()`` command with project name ``<PROJECT-NAME>``, if any.

See also the component-wise version variables
``<PROJECT-NAME>_VERSION_MAJOR``,
``<PROJECT-NAME>_VERSION_MINOR``,
``<PROJECT-NAME>_VERSION_PATCH``, and
``<PROJECT-NAME>_VERSION_TWEAK``.

<PROJECT-NAME>_VERSION_MAJOR
----------------------------

First version number component of the ``<PROJECT-NAME>_VERSION``
variable as set by the ``project()`` command.

<PROJECT-NAME>_VERSION_MINOR
----------------------------

Second version number component of the ``<PROJECT-NAME>_VERSION``
variable as set by the ``project()`` command.

<PROJECT-NAME>_VERSION_PATCH
----------------------------

Third version number component of the ``<PROJECT-NAME>_VERSION``
variable as set by the ``project()`` command.

<PROJECT-NAME>_VERSION_TWEAK
----------------------------

Fourth version number component of the ``<PROJECT-NAME>_VERSION``
variable as set by the ``project()`` command.

PROJECT_SOURCE_DIR
------------------

Top level source directory for the current project.

This is the source directory of the most recent ``project()`` command.

PROJECT_VERSION
---------------

Value given to the ``VERSION`` option of the most recent call to the
``project()`` command, if any.

See also the component-wise version variables
``PROJECT_VERSION_MAJOR``,
``PROJECT_VERSION_MINOR``,
``PROJECT_VERSION_PATCH``, and
``PROJECT_VERSION_TWEAK``.

PROJECT_VERSION_MAJOR
---------------------

First version number component of the ``PROJECT_VERSION``
variable as set by the ``project()`` command.

PROJECT_VERSION_MINOR
---------------------

Second version number component of the ``PROJECT_VERSION``
variable as set by the ``project()`` command.

PROJECT_VERSION_PATCH
---------------------

Third version number component of the ``PROJECT_VERSION``
variable as set by the ``project()`` command.

PROJECT_VERSION_TWEAK
---------------------

Fourth version number component of the ``PROJECT_VERSION``
variable as set by the ``project()`` command.

Variables that Change Behavior
==============================

BUILD_SHARED_LIBS
-----------------

Global flag to cause ``add_library()`` to create shared libraries if on.

If present and true, this will cause all libraries to be built shared
unless the library was explicitly added as a static library.  This
variable is often added to projects as an ``option()`` so that each user
of a project can decide if they want to build the project using shared or
static libraries.

CMAKE_ABSOLUTE_DESTINATION_FILES
--------------------------------

List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.

This variable is defined by CMake-generated ``cmake_install.cmake``
scripts.  It can be used (read-only) by programs or scripts that
source those install scripts.  This is used by some CPack generators
(e.g.  RPM).

CMAKE_APPBUNDLE_PATH
--------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for OS X application bundles used by the ``find_program()``, and
``find_package()`` commands.

CMAKE_AUTOMOC_RELAXED_MODE
--------------------------

Switch between strict and relaxed automoc mode.

By default, ``AUTOMOC`` behaves exactly as described in the
documentation of the ``AUTOMOC`` target property.  When set to
``TRUE``, it accepts more input and tries to find the correct input file for
``moc`` even if it differs from the documented behaviour.  In this mode it
e.g.  also checks whether a header file is intended to be processed by moc
when a ``"foo.moc"`` file has been included.

Relaxed mode has to be enabled for KDE4 compatibility.

CMAKE_BACKWARDS_COMPATIBILITY
-----------------------------

Deprecated.  See CMake Policy ``CMP0001`` documentation.

CMAKE_BUILD_TYPE
----------------

Specifies the build type on single-configuration generators.

This statically specifies what build type (configuration) will be
built in this build tree.  Possible values are empty, ``Debug``, ``Release``,
``RelWithDebInfo`` and ``MinSizeRel``.  This variable is only meaningful to
single-configuration generators (such as :ref:`Makefile Generators` and
``Ninja``) i.e.  those which choose a single configuration when CMake
runs to generate a build tree as opposed to multi-configuration generators
which offer selection of the build configuration within the generated build
environment.  There are many per-config properties and variables
(usually following clean ``SOME_VAR_<CONFIG>`` order conventions), such as
``CMAKE_C_FLAGS_<CONFIG>``, specified as uppercase:
``CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]``.  For example,
in a build tree configured to build type ``Debug``, CMake will see to
having ``CMAKE_C_FLAGS_DEBUG`` settings get
added to the ``CMAKE_C_FLAGS`` settings.  See
also ``CMAKE_CONFIGURATION_TYPES``.

CMAKE_COLOR_MAKEFILE
--------------------

Enables color output when using the :ref:`Makefile Generators`.

When enabled, the generated Makefiles will produce colored output.
Default is ``ON``.

CMAKE_CONFIGURATION_TYPES
-------------------------

Specifies the available build types on multi-config generators.

This specifies what build types (configurations) will be available
such as ``Debug``, ``Release``, ``RelWithDebInfo`` etc.  This has reasonable
defaults on most platforms, but can be extended to provide other build
types.  See also ``CMAKE_BUILD_TYPE`` for details of managing
configuration data, and ``CMAKE_CFG_INTDIR``.

CMAKE_DEBUG_TARGET_PROPERTIES
-----------------------------

Enables tracing output for target properties.

This variable can be populated with a list of properties to generate
debug output for when evaluating target properties.  Currently it can
only be used when evaluating the ``INCLUDE_DIRECTORIES``,
``COMPILE_DEFINITIONS``, ``COMPILE_OPTIONS``,
``AUTOUIC_OPTIONS``, ``SOURCES``, ``COMPILE_FEATURES``,
``POSITION_INDEPENDENT_CODE`` target properties and any other property
listed in ``COMPATIBLE_INTERFACE_STRING`` and other
``COMPATIBLE_INTERFACE_`` properties.  It outputs an origin for each entry in
the target property.  Default is unset.

CMAKE_DEPENDS_IN_PROJECT_ONLY
-----------------------------

When set to ``TRUE`` in a directory, the build system produced by the
:ref:`Makefile Generators` is set up to only consider dependencies on source
files that appear either in the source or in the binary directories.  Changes
to source files outside of these directories will not cause rebuilds.

This should be used carefully in cases where some source files are picked up
through external headers during the build.

CMAKE_DISABLE_FIND_PACKAGE_<PackageName>
----------------------------------------

Variable for disabling ``find_package()`` calls.

Every non-``REQUIRED`` ``find_package()`` call in a project can be
disabled by setting the variable
``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` to ``TRUE``.
This can be used to build a project without an optional package,
although that package is installed.

This switch should be used during the initial CMake run.  Otherwise if
the package has already been found in a previous CMake run, the
variables which have been stored in the cache will still be there.  In
that case it is recommended to remove the cache variables for this
package from the cache using the cache editor or ``cmake(1)`` ``-U``

CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES
---------------------------------------

This cache variable is used by the Eclipse project generator.  See
``cmake-generators(7)``.

The Eclipse project generator generates so-called linked resources
e.g. to the subproject root dirs in the source tree or to the source files
of targets.
This can be disabled by setting this variable to FALSE.

CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT
-------------------------------------

This cache variable is used by the Eclipse project generator.  See
``cmake-generators(7)``.

If this variable is set to TRUE, the Eclipse project generator will generate
an Eclipse project in ``CMAKE_SOURCE_DIR`` . This project can then
be used in Eclipse e.g. for the version control functionality.
``CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT`` defaults to FALSE; so
nothing is written into the source directory.

CMAKE_ECLIPSE_MAKE_ARGUMENTS
----------------------------

This cache variable is used by the Eclipse project generator.  See
``cmake-generators(7)``.

This variable holds arguments which are used when Eclipse invokes the make
tool. By default it is initialized to hold flags to enable parallel builds
(using -j typically).

CMAKE_ECLIPSE_VERSION
---------------------

This cache variable is used by the Eclipse project generator.  See
``cmake-generators(7)``.

When using the Eclipse project generator, CMake tries to find the Eclipse
executable and detect the version of it. Depending on the version it finds,
some features are enabled or disabled. If CMake doesn't find
Eclipse, it assumes the oldest supported version, Eclipse Callisto (3.2).

CMAKE_ERROR_DEPRECATED
----------------------

Whether to issue errors for deprecated functionality.

If ``TRUE``, use of deprecated functionality will issue fatal errors.
If this variable is not set, CMake behaves as if it were set to ``FALSE``.

CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
-------------------------------------------

Ask ``cmake_install.cmake`` script to error out as soon as a file with
absolute ``INSTALL DESTINATION`` is encountered.

The fatal error is emitted before the installation of the offending
file takes place.  This variable is used by CMake-generated
``cmake_install.cmake`` scripts.  If one sets this variable to ``ON`` while
running the script, it may get fatal error messages from the script.

CMAKE_EXPORT_COMPILE_COMMANDS
-----------------------------

Enable/Disable output of compile commands during generation.

If enabled, generates a ``compile_commands.json`` file containing the exact
compiler calls for all translation units of the project in machine-readable
form.  The format of the JSON file looks like:

 [
   {
     "directory": "/home/user/development/project",
     "command": "/usr/bin/c++ ... -c ../foo/foo.cc",
     "file": "../foo/foo.cc"
   },

   ...

   {
     "directory": "/home/user/development/project",
     "command": "/usr/bin/c++ ... -c ../foo/bar.cc",
     "file": "../foo/bar.cc"
   }
 ]

.. note::
  This option is implemented only by :ref:`Makefile Generators`
  and the ``Ninja``.  It is ignored on other generators.

CMAKE_EXPORT_NO_PACKAGE_REGISTRY
--------------------------------

Disable the ``export(PACKAGE)`` command.

In some cases, for example for packaging and for system wide
installations, it is not desirable to write the user package registry.
If the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable is enabled,
the ``export(PACKAGE)`` command will do nothing.

See also :ref:`Disabling the Package Registry`.

CMAKE_SYSROOT
-------------

Path to pass to the compiler in the ``--sysroot`` flag.

The ``CMAKE_SYSROOT`` content is passed to the compiler in the ``--sysroot``
flag, if supported.  The path is also stripped from the RPATH/RUNPATH if
necessary on installation.  The ``CMAKE_SYSROOT`` is also used to prefix
paths searched by the ``find_*`` commands.

This variable may only be set in a toolchain file specified by
the ``CMAKE_TOOLCHAIN_FILE`` variable.

CMAKE_FIND_APPBUNDLE
--------------------

This variable affects how ``find_*`` commands choose between
OS X Application Bundles and unix-style package components.

On Darwin or systems supporting OS X Application Bundles, the
``CMAKE_FIND_APPBUNDLE`` variable can be set to empty or
one of the following:

``FIRST``
  Try to find application bundles before standard programs.
  This is the default on Darwin.

``LAST``
  Try to find application bundles after standard programs.

``ONLY``
  Only try to find application bundles.

``NEVER``
  Never try to find application bundles.

CMAKE_FIND_FRAMEWORK
--------------------

This variable affects how ``find_*`` commands choose between
OS X Frameworks and unix-style package components.

On Darwin or systems supporting OS X Frameworks, the
``CMAKE_FIND_FRAMEWORK`` variable can be set to empty or
one of the following:

``FIRST``
  Try to find frameworks before standard libraries or headers.
  This is the default on Darwin.

``LAST``
  Try to find frameworks after standard libraries or headers.

``ONLY``
  Only try to find frameworks.

``NEVER``
  Never try to find frameworks.

CMAKE_FIND_LIBRARY_PREFIXES
---------------------------

Prefixes to prepend when looking for libraries.

This specifies what prefixes to add to library names when the
``find_library()`` command looks for libraries.  On UNIX systems this is
typically ``lib``, meaning that when trying to find the ``foo`` library it
will look for ``libfoo``.

CMAKE_FIND_LIBRARY_SUFFIXES
---------------------------

Suffixes to append when looking for libraries.

This specifies what suffixes to add to library names when the
``find_library()`` command looks for libraries.  On Windows systems this
is typically ``.lib`` and ``.dll``, meaning that when trying to find the
``foo`` library it will look for ``foo.dll`` etc.

CMAKE_FIND_NO_INSTALL_PREFIX
----------------------------

Ignore the ``CMAKE_INSTALL_PREFIX`` when searching for assets.

CMake adds the ``CMAKE_INSTALL_PREFIX`` and the
``CMAKE_STAGING_PREFIX`` variable to the
``CMAKE_SYSTEM_PREFIX_PATH`` by default. This variable may be set
on the command line to control that behavior.

Set ``CMAKE_FIND_NO_INSTALL_PREFIX`` to ``TRUE`` to tell
``find_package()`` not to search in the ``CMAKE_INSTALL_PREFIX``
or ``CMAKE_STAGING_PREFIX`` by default.  Note that the
prefix may still be searched for other reasons, such as being the same prefix
as the CMake installation, or for being a built-in system prefix.

CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY
--------------------------------------

Skip :ref:`User Package Registry` in ``find_package()`` calls.

In some cases, for example to locate only system wide installations, it
is not desirable to use the :ref:`User Package Registry` when searching
for packages. If the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``
variable is enabled, all the ``find_package()`` commands will skip
the :ref:`User Package Registry` as if they were called with the
``NO_CMAKE_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry`.

CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY
---------------------------------------------

Skip :ref:`System Package Registry` in ``find_package()`` calls.

In some cases, it is not desirable to use the
:ref:`System Package Registry` when searching for packages. If the
``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` variable is
enabled, all the ``find_package()`` commands will skip
the :ref:`System Package Registry` as if they were called with the
``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument.

See also :ref:`Disabling the Package Registry`.

CMAKE_FIND_PACKAGE_WARN_NO_MODULE
---------------------------------

Tell ``find_package()`` to warn if called without an explicit mode.

If ``find_package()`` is called without an explicit mode option
(``MODULE``, ``CONFIG``, or ``NO_MODULE``) and no ``Find<pkg>.cmake`` module
is in ``CMAKE_MODULE_PATH`` then CMake implicitly assumes that the
caller intends to search for a package configuration file.  If no package
configuration file is found then the wording of the failure message
must account for both the case that the package is really missing and
the case that the project has a bug and failed to provide the intended
Find module.  If instead the caller specifies an explicit mode option
then the failure message can be more specific.

Set ``CMAKE_FIND_PACKAGE_WARN_NO_MODULE`` to ``TRUE`` to tell
``find_package()`` to warn when it implicitly assumes Config mode.  This
helps developers enforce use of an explicit mode in all calls to
``find_package()`` within a project.

CMAKE_FIND_ROOT_PATH
--------------------

:ref:`;-list <CMake Language Lists>` of root paths to search on the filesystem.

This variable is most useful when cross-compiling. CMake uses the paths in
this list as alternative roots to find filesystem items with
``find_package()``, ``find_library()`` etc.

CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
---------------------------------

This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and
``CMAKE_SYSROOT`` are used by ``find_file()`` and ``find_path()``.

If set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``
will be searched. If set to ``NEVER``, then the roots in
``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system
root will be used. If set to ``BOTH``, then the host system paths and the
paths in ``CMAKE_FIND_ROOT_PATH`` will be searched.

CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
---------------------------------

This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and
``CMAKE_SYSROOT`` are used by ``find_library()``.

If set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``
will be searched. If set to ``NEVER``, then the roots in
``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system
root will be used. If set to ``BOTH``, then the host system paths and the
paths in ``CMAKE_FIND_ROOT_PATH`` will be searched.

CMAKE_FIND_ROOT_PATH_MODE_PACKAGE
---------------------------------

This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and
``CMAKE_SYSROOT`` are used by ``find_package()``.

If set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``
will be searched. If set to ``NEVER``, then the roots in
``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system
root will be used. If set to ``BOTH``, then the host system paths and the
paths in ``CMAKE_FIND_ROOT_PATH`` will be searched.

CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
---------------------------------

This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and
``CMAKE_SYSROOT`` are used by ``find_program()``.

If set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``
will be searched. If set to ``NEVER``, then the roots in
``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system
root will be used. If set to ``BOTH``, then the host system paths and the
paths in ``CMAKE_FIND_ROOT_PATH`` will be searched.

CMAKE_FRAMEWORK_PATH
--------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for OS X frameworks used by the ``find_library()``,
``find_package()``, ``find_path()``, and ``find_file()``
commands.

CMAKE_IGNORE_PATH
-----------------

:ref:`;-list <CMake Language Lists>` of directories to be *ignored* by
the ``find_program()``, ``find_library()``, ``find_file()``,
and ``find_path()`` commands.  This is useful in cross-compiling
environments where some system directories contain incompatible but
possibly linkable libraries.  For example, on cross-compiled cluster
environments, this allows a user to ignore directories containing
libraries meant for the front-end machine.

By default this is empty; it is intended to be set by the project.
Note that ``CMAKE_IGNORE_PATH`` takes a list of directory names, *not*
a list of prefixes.  To ignore paths under prefixes (``bin``, ``include``,
``lib``, etc.), specify them explicitly.

See also the ``CMAKE_PREFIX_PATH``, ``CMAKE_LIBRARY_PATH``,
``CMAKE_INCLUDE_PATH``, and ``CMAKE_PROGRAM_PATH`` variables.

CMAKE_INCLUDE_PATH
------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_file()`` and ``find_path()`` commands.  By default it
is empty, it is intended to be set by the project.  See also
``CMAKE_SYSTEM_INCLUDE_PATH`` and ``CMAKE_PREFIX_PATH``.

CMAKE_INCLUDE_DIRECTORIES_BEFORE
--------------------------------

Whether to append or prepend directories by default in
``include_directories()``.

This variable affects the default behavior of the ``include_directories()``
command.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``
option in all uses of that command.

CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE
----------------------------------------

Whether to force prepending of project include directories.

This variable affects the order of include directories generated in compiler
command lines.  If set to ``ON``, it causes the ``CMAKE_SOURCE_DIR``
and the ``CMAKE_BINARY_DIR`` to appear first.

CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
------------------------------------

Default component used in ``install()`` commands.

If an ``install()`` command is used without the ``COMPONENT`` argument,
these files will be grouped into a default component.  The name of this
default install component will be taken from this variable.  It
defaults to ``Unspecified``.

CMAKE_INSTALL_MESSAGE
---------------------

Specify verbosity of installation script code generated by the
``install()`` command (using the ``file(INSTALL)`` command).
For paths that are newly installed or updated, installation
may print lines like::

 -- Installing: /some/destination/path

For paths that are already up to date, installation may print
lines like::

 -- Up-to-date: /some/destination/path

The ``CMAKE_INSTALL_MESSAGE`` variable may be set to control
which messages are printed:

``ALWAYS``
  Print both ``Installing`` and ``Up-to-date`` messages.

``LAZY``
  Print ``Installing`` but not ``Up-to-date`` messages.

``NEVER``
  Print neither ``Installing`` nor ``Up-to-date`` messages.

Other values have undefined behavior and may not be diagnosed.

If this variable is not set, the default behavior is ``ALWAYS``.

CMAKE_INSTALL_PREFIX
--------------------

Install directory used by ``install()``.

If ``make install`` is invoked or ``INSTALL`` is built, this directory is
prepended onto all install directories.  This variable defaults to
``/usr/local`` on UNIX and ``c:/Program Files`` on Windows.

On UNIX one can use the ``DESTDIR`` mechanism in order to relocate the
whole installation.  ``DESTDIR`` means DESTination DIRectory.  It is
commonly used by makefile users in order to install software at
non-default location.  It is usually invoked like this:

::

 make DESTDIR=/home/john install

which will install the concerned software using the installation
prefix, e.g.  ``/usr/local`` prepended with the ``DESTDIR`` value which
finally gives ``/home/john/usr/local``.

WARNING: ``DESTDIR`` may not be used on Windows because installation
prefix usually contains a drive letter like in ``C:/Program Files``
which cannot be prepended with some other prefix.

The installation prefix is also added to ``CMAKE_SYSTEM_PREFIX_PATH``
so that ``find_package()``, ``find_program()``,
``find_library()``, ``find_path()``, and ``find_file()``
will search the prefix for other software.

.. note::

  Use the ``GNUInstallDirs`` module to provide GNU-style
  options for the layout of directories within the installation.

CMAKE_LIBRARY_PATH
------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_library()`` command.  By default it is empty, it is
intended to be set by the project.  See also
``CMAKE_SYSTEM_LIBRARY_PATH`` and ``CMAKE_PREFIX_PATH``.

CMAKE_MFC_FLAG
--------------

Tell cmake to use MFC for an executable or dll.

This can be set in a ``CMakeLists.txt`` file and will enable MFC in the
application.  It should be set to ``1`` for the static MFC library, and ``2``
for the shared MFC library.  This is used in Visual Studio 7
project files.  The CMakeSetup dialog used MFC and the ``CMakeLists.txt``
looks like this:

::

 add_definitions(-D_AFXDLL)
 set(CMAKE_MFC_FLAG 2)
 add_executable(CMakeSetup WIN32 ${SRCS})

CMAKE_MODULE_PATH
-----------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for CMake modules to be loaded by the the ``include()`` or
``find_package()`` commands before checking the default modules that come
with CMake.  By default it is empty, it is intended to be set by the project.

CMAKE_NOT_USING_CONFIG_FLAGS
----------------------------

Skip ``_BUILD_TYPE`` flags if true.

This is an internal flag used by the generators in CMake to tell CMake
to skip the ``_BUILD_TYPE`` flags.

CMAKE_POLICY_DEFAULT_CMP<NNNN>
------------------------------

Default for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset.

Commands ``cmake_minimum_required(VERSION)`` and
``cmake_policy(VERSION)`` by default leave policies introduced after
the given version unset.  Set ``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` to ``OLD``
or ``NEW`` to specify the default for policy ``CMP<NNNN>``, where ``<NNNN>``
is the policy number.

This variable should not be set by a project in CMake code; use
``cmake_policy(SET)`` instead.  Users running CMake may set this
variable in the cache (e.g. ``-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>``)
to set a policy not otherwise set by the project.  Set to ``OLD`` to quiet a
policy warning while using old behavior or to ``NEW`` to try building the
project with new behavior.

CMAKE_POLICY_WARNING_CMP<NNNN>
------------------------------

Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``
is not set.  This is meaningful only for the few policies that do not
warn by default:

* ``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for
  policy ``CMP0025``.
* ``CMAKE_POLICY_WARNING_CMP0047`` controls the warning for
  policy ``CMP0047``.
* ``CMAKE_POLICY_WARNING_CMP0056`` controls the warning for
  policy ``CMP0056``.
* ``CMAKE_POLICY_WARNING_CMP0060`` controls the warning for
  policy ``CMP0060``.
* ``CMAKE_POLICY_WARNING_CMP0065`` controls the warning for
  policy ``CMP0065``.

This variable should not be set by a project in CMake code.  Project
developers running CMake may set this variable in their cache to
enable the warning (e.g. ``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``).
Alternatively, running ``cmake(1)`` with the ``--debug-output``,
``--trace``, or ``--trace-expand`` option will also enable the warning.

CMAKE_PREFIX_PATH
-----------------

:ref:`;-list <CMake Language Lists>` of directories specifying installation
*prefixes* to be searched by the ``find_package()``,
``find_program()``, ``find_library()``, ``find_file()``, and
``find_path()`` commands.  Each command will add appropriate
subdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own
documentation.

By default this is empty.  It is intended to be set by the project.

See also ``CMAKE_SYSTEM_PREFIX_PATH``, ``CMAKE_INCLUDE_PATH``,
``CMAKE_LIBRARY_PATH``, ``CMAKE_PROGRAM_PATH``, and
``CMAKE_IGNORE_PATH``.

CMAKE_PROGRAM_PATH
------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_program()`` command.  By default it is empty, it is
intended to be set by the project.  See also
``CMAKE_SYSTEM_PROGRAM_PATH`` and ``CMAKE_PREFIX_PATH``.

CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE
------------------------------------

A CMake language file or module to be included by the ``project()``
command.  This is is intended for injecting custom code into project
builds without modifying their source.

CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
---------------------------------

Don't make the ``install`` target depend on the ``all`` target.

By default, the ``install`` target depends on the ``all`` target.  This
has the effect, that when ``make install`` is invoked or ``INSTALL`` is
built, first the ``all`` target is built, then the installation starts.
If ``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` is set to ``TRUE``, this
dependency is not created, so the installation process will start immediately,
independent from whether the project has been completely built or not.

CMAKE_STAGING_PREFIX
--------------------

This variable may be set to a path to install to when cross-compiling. This can
be useful if the path in ``CMAKE_SYSROOT`` is read-only, or otherwise
should remain pristine.

The ``CMAKE_STAGING_PREFIX`` location is also used as a search prefix by the
``find_*`` commands. This can be controlled by setting the
``CMAKE_FIND_NO_INSTALL_PREFIX`` variable.

If any RPATH/RUNPATH entries passed to the linker contain the
``CMAKE_STAGING_PREFIX``, the matching path fragments are replaced with the
``CMAKE_INSTALL_PREFIX``.

CMAKE_SYSTEM_APPBUNDLE_PATH
---------------------------

Search path for OS X application bundles used by the ``find_program()``,
and ``find_package()`` commands.  By default it contains the standard
directories for the current system.  It is *not* intended to be modified by
the project, use ``CMAKE_APPBUNDLE_PATH`` for this.

CMAKE_SYSTEM_FRAMEWORK_PATH
---------------------------

Search path for OS X frameworks used by the ``find_library()``,
``find_package()``, ``find_path()``, and ``find_file()``
commands.  By default it contains the standard directories for the
current system.  It is *not* intended to be modified by the project,
use ``CMAKE_FRAMEWORK_PATH`` for this.

CMAKE_SYSTEM_IGNORE_PATH
------------------------

:ref:`;-list <CMake Language Lists>` of directories to be *ignored* by
the ``find_program()``, ``find_library()``, ``find_file()``,
and ``find_path()`` commands.  This is useful in cross-compiling
environments where some system directories contain incompatible but
possibly linkable libraries.  For example, on cross-compiled cluster
environments, this allows a user to ignore directories containing
libraries meant for the front-end machine.

By default this contains a list of directories containing incompatible
binaries for the host system.  See the ``CMAKE_IGNORE_PATH`` variable
that is intended to be set by the project.

See also the ``CMAKE_SYSTEM_PREFIX_PATH``,
``CMAKE_SYSTEM_LIBRARY_PATH``, ``CMAKE_SYSTEM_INCLUDE_PATH``,
and ``CMAKE_SYSTEM_PROGRAM_PATH`` variables.

CMAKE_SYSTEM_INCLUDE_PATH
-------------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_file()`` and ``find_path()`` commands.  By default
this contains the standard directories for the current system.  It is *not*
intended to be modified by the project; use ``CMAKE_INCLUDE_PATH`` for
this.  See also ``CMAKE_SYSTEM_PREFIX_PATH``.

CMAKE_SYSTEM_LIBRARY_PATH
-------------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_library()`` command.  By default this contains the
standard directories for the current system.  It is *not* intended to be
modified by the project; use ``CMAKE_LIBRARY_PATH`` for this.
See also ``CMAKE_SYSTEM_PREFIX_PATH``.

CMAKE_SYSTEM_PREFIX_PATH
------------------------

:ref:`;-list <CMake Language Lists>` of directories specifying installation
*prefixes* to be searched by the ``find_package()``,
``find_program()``, ``find_library()``, ``find_file()``, and
``find_path()`` commands.  Each command will add appropriate
subdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own
documentation.

By default this contains the standard directories for the current system, the
``CMAKE_INSTALL_PREFIX``, and the ``CMAKE_STAGING_PREFIX``.
It is *not* intended to be modified by the project; use
``CMAKE_PREFIX_PATH`` for this.

See also ``CMAKE_SYSTEM_INCLUDE_PATH``,
``CMAKE_SYSTEM_LIBRARY_PATH``, ``CMAKE_SYSTEM_PROGRAM_PATH``,
and ``CMAKE_SYSTEM_IGNORE_PATH``.

CMAKE_SYSTEM_PROGRAM_PATH
-------------------------

:ref:`;-list <CMake Language Lists>` of directories specifying a search path
for the ``find_program()`` command.  By default this contains the
standard directories for the current system.  It is *not* intended to be
modified by the project; use ``CMAKE_PROGRAM_PATH`` for this.
See also ``CMAKE_SYSTEM_PREFIX_PATH``.

CMAKE_USER_MAKE_RULES_OVERRIDE
------------------------------

Specify a CMake file that overrides platform information.

CMake loads the specified file while enabling support for each
language from either the ``project()`` or ``enable_language()``
commands.  It is loaded after CMake's builtin compiler and platform information
modules have been loaded but before the information is used.  The file
may set platform information variables to override CMake's defaults.

This feature is intended for use only in overriding information
variables that must be set before CMake builds its first test project
to check that the compiler for a language works.  It should not be
used to load a file in cases that a normal ``include()`` will work.  Use
it only as a last resort for behavior that cannot be achieved any
other way.  For example, one may set ``CMAKE_C_FLAGS_INIT`` to change the
default value used to initialize ``CMAKE_C_FLAGS``
before it is cached.  The override file should NOT be used to set anything
that could be set after languages are enabled, such as variables like
``CMAKE_RUNTIME_OUTPUT_DIRECTORY`` that affect the placement of
binaries.  Information set in the file will be used for ``try_compile()``
and ``try_run()`` builds too.

CMAKE_WARN_DEPRECATED
---------------------

Whether to issue warnings for deprecated functionality.

If not ``FALSE``, use of deprecated functionality will issue warnings.
If this variable is not set, CMake behaves as if it were set to ``TRUE``.

When running ``cmake(1)``, this option can be enabled with the
``-Wdeprecated`` option, or disabled with the ``-Wno-deprecated`` option.

CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
------------------------------------------

Ask ``cmake_install.cmake`` script to warn each time a file with absolute
``INSTALL DESTINATION`` is encountered.

This variable is used by CMake-generated ``cmake_install.cmake`` scripts.
If one sets this variable to ``ON`` while running the script, it may get
warning messages from the script.

Variables that Describe the System
==================================

APPLE
-----

``True`` if running on OS X.

Set to ``true`` on OS X.

BORLAND
-------

``True`` if the Borland compiler is being used.

This is set to ``true`` if the Borland compiler is being used.

CMAKE_CL_64
-----------

Using the 64-bit compiler from Microsoft

Set to ``true`` when using the 64-bit ``cl`` compiler from Microsoft.

CMAKE_COMPILER_2005
-------------------

Using the Visual Studio 2005 compiler from Microsoft

Set to true when using the Visual Studio 2005 compiler from Microsoft.

CMAKE_HOST_APPLE
----------------

``True`` for Apple OS X operating systems.

Set to ``true`` when the host system is Apple OS X.

CMAKE_HOST_SOLARIS
------------------

``True`` for Oracle Solaris operating systems.

Set to ``true`` when the host system is Oracle Solaris.

CMAKE_HOST_SYSTEM_NAME
----------------------

Name of the OS CMake is running on.

On systems that have the uname command, this variable is set to the
output of ``uname -s``.  ``Linux``, ``Windows``, and ``Darwin`` for OS X
are the values found on the big three operating systems.

CMAKE_HOST_SYSTEM_PROCESSOR
---------------------------

The name of the CPU CMake is running on.

On systems that support ``uname``, this variable is set to the output of
``uname -p``.  On Windows it is set to the value of the environment variable
``PROCESSOR_ARCHITECTURE``.

CMAKE_HOST_SYSTEM
-----------------

Composit Name of OS CMake is being run on.

This variable is the composite of ``CMAKE_HOST_SYSTEM_NAME`` and
``CMAKE_HOST_SYSTEM_VERSION``, e.g.
``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``.  If
``CMAKE_HOST_SYSTEM_VERSION`` is not set, then this variable is
the same as ``CMAKE_HOST_SYSTEM_NAME``.

CMAKE_HOST_SYSTEM_VERSION
-------------------------

The OS version CMake is running on.

A numeric version string for the system.  On systems that support
``uname``, this variable is set to the output of ``uname -r``. On other
systems this is set to major-minor version numbers.

CMAKE_HOST_UNIX
---------------

``True`` for UNIX and UNIX like operating systems.

Set to ``true`` when the host system is UNIX or UNIX like (i.e.  APPLE and
CYGWIN).

CMAKE_HOST_WIN32
----------------

``True`` on Windows systems, including Win64.

Set to ``true`` when the host system is Windows and on Cygwin.

CMAKE_LIBRARY_ARCHITECTURE_REGEX
--------------------------------

Regex matching possible target architecture library directory names.

This is used to detect ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` from the
implicit linker search path by matching the ``<arch>`` name.

CMAKE_LIBRARY_ARCHITECTURE
--------------------------

Target architecture library directory name, if detected.

This is the value of ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` as detected
for one of the enabled languages.

CMAKE_OBJECT_PATH_MAX
---------------------

Maximum object file full-path length allowed by native build tools.

CMake computes for every source file an object file name that is
unique to the source file and deterministic with respect to the full
path to the source file.  This allows multiple source files in a
target to share the same name if they lie in different directories
without rebuilding when one is added or removed.  However, it can
produce long full paths in a few cases, so CMake shortens the path
using a hashing scheme when the full path to an object file exceeds a
limit.  CMake has a built-in limit for each platform that is
sufficient for common tools, but some native tools may have a lower
limit.  This variable may be set to specify the limit explicitly.  The
value must be an integer no less than 128.

CMAKE_SYSTEM_NAME
-----------------

The name of the operating system for which CMake is to build.
See the ``CMAKE_SYSTEM_VERSION`` variable for the OS version.

System Name for Host Builds
^^^^^^^^^^^^^^^^^^^^^^^^^^^

``CMAKE_SYSTEM_NAME`` is by default set to the same value as the
``CMAKE_HOST_SYSTEM_NAME`` variable so that the build
targets the host system.

System Name for Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``CMAKE_SYSTEM_NAME`` may be set explicitly when first configuring a new build
tree in order to enable :ref:`cross compiling <Cross Compiling Toolchain>`.
In this case the ``CMAKE_SYSTEM_VERSION`` variable must also be
set explicitly.

CMAKE_SYSTEM_PROCESSOR
----------------------

The name of the CPU CMake is building for.

This variable is the same as ``CMAKE_HOST_SYSTEM_PROCESSOR`` if
you build for the host system instead of the target system when
cross compiling.

* The ``Green Hills MULTI`` generator sets this to ``ARM`` by default.

CMAKE_SYSTEM
------------

Composite name of operating system CMake is compiling for.

This variable is the composite of ``CMAKE_SYSTEM_NAME`` and
``CMAKE_SYSTEM_VERSION``, e.g.
``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``.  If
``CMAKE_SYSTEM_VERSION`` is not set, then this variable is
the same as ``CMAKE_SYSTEM_NAME``.

CMAKE_SYSTEM_VERSION
--------------------

The version of the operating system for which CMake is to build.
See the ``CMAKE_SYSTEM_NAME`` variable for the OS name.

System Version for Host Builds
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the ``CMAKE_SYSTEM_NAME`` variable takes its default value
then ``CMAKE_SYSTEM_VERSION`` is by default set to the same value as the
``CMAKE_HOST_SYSTEM_VERSION`` variable so that the build targets
the host system version.

In the case of a host build then ``CMAKE_SYSTEM_VERSION`` may be set
explicitly when first configuring a new build tree in order to enable
targeting the build for a different version of the host operating system
than is actually running on the host.  This is allowed and not considered
cross compiling so long as the binaries built for the specified OS version
can still run on the host.

System Version for Cross Compiling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the ``CMAKE_SYSTEM_NAME`` variable is set explicitly to
enable :ref:`cross compiling <Cross Compiling Toolchain>` then the
value of ``CMAKE_SYSTEM_VERSION`` must also be set explicitly to specify
the target system version.

CYGWIN
------

``True`` for Cygwin.

Set to ``true`` when using Cygwin.

ENV
---

Access environment variables.

Use the syntax ``$ENV{VAR}`` to read environment variable ``VAR``.  See also
the ``set()`` command to set ``ENV{VAR}``.

GHS-MULTI
---------

True when using Green Hills MULTI

MINGW
-----

``True`` when using MinGW

Set to ``true`` when the compiler is some version of MinGW.

MSVC10
------

``True`` when using Microsoft Visual C++ 10.0

Set to ``true`` when the compiler is version 10.0 of Microsoft Visual C++.

MSVC11
------

``True`` when using Microsoft Visual C++ 11.0

Set to ``true`` when the compiler is version 11.0 of Microsoft Visual C++.

MSVC12
------

``True`` when using Microsoft Visual C++ 12.0.

Set to ``true`` when the compiler is version 12.0 of Microsoft Visual C++.

MSVC14
------

``True`` when using Microsoft Visual C++ 14.0.

Set to ``true`` when the compiler is version 14.0 of Microsoft Visual C++.

MSVC60
------

``True`` when using Microsoft Visual C++ 6.0.

Set to ``true`` when the compiler is version 6.0 of Microsoft Visual C++.

MSVC70
------

``True`` when using Microsoft Visual C++ 7.0.

Set to ``true`` when the compiler is version 7.0 of Microsoft Visual C++.

MSVC71
------

``True`` when using Microsoft Visual C++ 7.1.

Set to ``true`` when the compiler is version 7.1 of Microsoft Visual C++.

MSVC80
------

``True`` when using Microsoft Visual C++ 8.0.

Set to ``true`` when the compiler is version 8.0 of Microsoft Visual C++.

MSVC90
------

``True`` when using Microsoft Visual C++ 9.0.

Set to ``true`` when the compiler is version 9.0 of Microsoft Visual C++.

MSVC_IDE
--------

``True`` when using the Microsoft Visual C++ IDE.

Set to ``true`` when the target platform is the Microsoft Visual C++ IDE, as
opposed to the command line compiler.

MSVC
----

``True`` when using Microsoft Visual C++.

Set to ``true`` when the compiler is some version of Microsoft Visual C++.

MSVC_VERSION
------------

The version of Microsoft Visual C/C++ being used if any.

Known version numbers are::

 1200 = VS  6.0
 1300 = VS  7.0
 1310 = VS  7.1
 1400 = VS  8.0
 1500 = VS  9.0
 1600 = VS 10.0
 1700 = VS 11.0
 1800 = VS 12.0
 1900 = VS 14.0

UNIX
----

``True`` for UNIX and UNIX like operating systems.

Set to ``true`` when the target system is UNIX or UNIX like (i.e.
``APPLE`` and ``CYGWIN``).

WIN32
-----

``True`` on Windows systems, including Win64.

Set to ``true`` when the target system is Windows.

WINCE
-----

True when the ``CMAKE_SYSTEM_NAME`` variable is set
to ``WindowsCE``.

WINDOWS_PHONE
-------------

True when the ``CMAKE_SYSTEM_NAME`` variable is set
to ``WindowsPhone``.

WINDOWS_STORE
-------------

True when the ``CMAKE_SYSTEM_NAME`` variable is set
to ``WindowsStore``.

XCODE_VERSION
-------------

Version of Xcode (``Xcode`` generator only).

Under the Xcode generator, this is the version of Xcode as specified
in ``Xcode.app/Contents/version.plist`` (such as ``3.1.2``).

Variables that Control the Build
================================

CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS
------------------------------------

Default value for the ``ANDROID_ANT_ADDITIONAL_OPTIONS`` target property.
See that target property for additional information.

CMAKE_ANDROID_API
-----------------

Default value for the ``ANDROID_API`` target property.
See that target property for additional information.

CMAKE_ANDROID_API_MIN
---------------------

Default value for the ``ANDROID_API_MIN`` target property.
See that target property for additional information.

CMAKE_ANDROID_ARCH
------------------

Default value for the ``ANDROID_ARCH`` target property.
See that target property for additional information.

CMAKE_ANDROID_ASSETS_DIRECTORIES
--------------------------------

Default value for the ``ANDROID_ASSETS_DIRECTORIES`` target property.
See that target property for additional information.

CMAKE_ANDROID_GUI
-----------------

Default value for the ``ANDROID_GUI`` target property of
executables.  See that target property for additional information.

CMAKE_ANDROID_JAR_DEPENDENCIES
------------------------------

Default value for the ``ANDROID_JAR_DEPENDENCIES`` target property.
See that target property for additional information.

CMAKE_ANDROID_JAR_DIRECTORIES
-----------------------------

Default value for the ``ANDROID_JAR_DIRECTORIES`` target property.
See that target property for additional information.

CMAKE_ANDROID_JAVA_SOURCE_DIR
-----------------------------

Default value for the ``ANDROID_JAVA_SOURCE_DIR`` target property.
See that target property for additional information.

CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES
-------------------------------------

Default value for the ``ANDROID_NATIVE_LIB_DEPENDENCIES`` target
property.  See that target property for additional information.

CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES
------------------------------------

Default value for the ``ANDROID_NATIVE_LIB_DIRECTORIES`` target
property.  See that target property for additional information.

CMAKE_ANDROID_PROCESS_MAX
-------------------------

Default value for the ``ANDROID_PROCESS_MAX`` target property.
See that target property for additional information.

CMAKE_ANDROID_PROGUARD
----------------------

Default value for the ``ANDROID_PROGUARD`` target property.
See that target property for additional information.

CMAKE_ANDROID_PROGUARD_CONFIG_PATH
----------------------------------

Default value for the ``ANDROID_PROGUARD_CONFIG_PATH`` target property.
See that target property for additional information.

CMAKE_ANDROID_SECURE_PROPS_PATH
-------------------------------

Default value for the ``ANDROID_SECURE_PROPS_PATH`` target property.
See that target property for additional information.

CMAKE_ANDROID_SKIP_ANT_STEP
---------------------------

Default value for the ``ANDROID_SKIP_ANT_STEP`` target property.
See that target property for additional information.

CMAKE_ANDROID_STL_TYPE
----------------------

Default value for the ``ANDROID_STL_TYPE`` target property.
See that target property for additional information.

CMAKE_ARCHIVE_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`
target files when built.

This variable is used to initialize the ``ARCHIVE_OUTPUT_DIRECTORY``
property on all the targets.  See that target property for additional
information.

CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.
See that target property for additional information.

CMAKE_AUTOMOC_MOC_OPTIONS
-------------------------

Additional options for ``moc`` when using ``CMAKE_AUTOMOC``.

This variable is used to initialize the ``AUTOMOC_MOC_OPTIONS`` property
on all the targets.  See that target property for additional information.

CMAKE_AUTOMOC
-------------

Whether to handle ``moc`` automatically for Qt targets.

This variable is used to initialize the ``AUTOMOC`` property on all the
targets.  See that target property for additional information.

CMAKE_AUTORCC
-------------

Whether to handle ``rcc`` automatically for Qt targets.

This variable is used to initialize the ``AUTORCC`` property on all
the targets.  See that target property for additional information.

CMAKE_AUTORCC_OPTIONS
---------------------

Whether to handle ``rcc`` automatically for Qt targets.

This variable is used to initialize the ``AUTORCC_OPTIONS`` property on
all the targets.  See that target property for additional information.

CMAKE_AUTOUIC
-------------

Whether to handle ``uic`` automatically for Qt targets.

This variable is used to initialize the ``AUTOUIC`` property on all
the targets.  See that target property for additional information.

CMAKE_AUTOUIC_OPTIONS
---------------------

Whether to handle ``uic`` automatically for Qt targets.

This variable is used to initialize the ``AUTOUIC_OPTIONS`` property on
all the targets.  See that target property for additional information.

CMAKE_BUILD_WITH_INSTALL_RPATH
------------------------------

Use the install path for the ``RPATH``.

Normally CMake uses the build tree for the ``RPATH`` when building
executables etc on systems that use ``RPATH``.  When the software is
installed the executables etc are relinked by CMake to have the
install ``RPATH``.  If this variable is set to true then the software is
always built with the install path for the ``RPATH`` and does not need to
be relinked when installed.

CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY
----------------------------------

Output directory for MS debug symbol ``.pdb`` files
generated by the compiler while building source files.

This variable is used to initialize the
``COMPILE_PDB_OUTPUT_DIRECTORY`` property on all the targets.

CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-------------------------------------------

Per-configuration output directory for MS debug symbol ``.pdb`` files
generated by the compiler while building source files.

This is a per-configuration version of
``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY``.
This variable is used to initialize the
``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>``
property on all the targets.

CMAKE_<CONFIG>_POSTFIX
----------------------

Default filename postfix for libraries under configuration ``<CONFIG>``.

When a non-executable target is created its ``<CONFIG>_POSTFIX``
target property is initialized with the value of this variable if it is set.

CMAKE_DEBUG_POSTFIX
-------------------

See variable ``CMAKE_<CONFIG>_POSTFIX``.

This variable is a special case of the more-general
``CMAKE_<CONFIG>_POSTFIX`` variable for the `DEBUG` configuration.

CMAKE_ENABLE_EXPORTS
--------------------

Specify whether an executable exports symbols for loadable modules.

Normally an executable does not export any symbols because it is the
final program.  It is possible for an executable to export symbols to
be used by loadable modules.  When this property is set to true CMake
will allow other targets to ``link`` to the executable with the
``TARGET_LINK_LIBRARIES()`` command.  On all platforms a target-level
dependency on the executable is created for targets that link to it.
For DLL platforms an import library will be created for the exported
symbols and then used for linking.  All Windows-based systems
including Cygwin are DLL platforms.  For non-DLL platforms that
require all symbols to be resolved at link time, such as OS X, the
module will ``link`` to the executable using a flag like
``-bundle_loader``.  For other non-DLL platforms the link rule is simply
ignored since the dynamic loader will automatically bind symbols when
the module is loaded.

This variable is used to initialize the target property
``ENABLE_EXPORTS`` for executable targets.

CMAKE_EXE_LINKER_FLAGS_<CONFIG>
-------------------------------

Flags to be used when linking an executable.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating
executables.

CMAKE_EXE_LINKER_FLAGS
----------------------

Linker flags to be used to create executables.

These flags will be used by the linker when creating an executable.

CMAKE_Fortran_FORMAT
--------------------

Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.

This variable is used to initialize the ``Fortran_FORMAT`` property on
all the targets.  See that target property for additional information.

CMAKE_Fortran_MODULE_DIRECTORY
------------------------------

Fortran module output directory.

This variable is used to initialize the ``Fortran_MODULE_DIRECTORY``
property on all the targets.  See that target property for additional
information.

CMAKE_GNUtoMS
-------------

Convert GNU import libraries (``.dll.a``) to MS format (``.lib``).

This variable is used to initialize the ``GNUtoMS`` property on
targets when they are created.  See that target property for additional
information.

CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
--------------------------------------

Automatically add the current source- and build directories to the
``INTERFACE_INCLUDE_DIRECTORIES`` target property.

If this variable is enabled, CMake automatically adds for each shared
library target, static library target, module target and executable
target, ``CMAKE_CURRENT_SOURCE_DIR`` and
``CMAKE_CURRENT_BINARY_DIR`` to
the ``INTERFACE_INCLUDE_DIRECTORIES`` target property.  By default
``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` is ``OFF``.

CMAKE_INCLUDE_CURRENT_DIR
-------------------------

Automatically add the current source- and build directories to the include path.

If this variable is enabled, CMake automatically adds
``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``
to the include path for each directory.  These additional include
directories do not propagate down to subdirectories.  This is useful
mainly for out-of-source builds, where files generated into the build
tree are included by files located in the source tree.

By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.

CMAKE_INSTALL_NAME_DIR
----------------------

OS X directory name for installed targets.

``CMAKE_INSTALL_NAME_DIR`` is used to initialize the
``INSTALL_NAME_DIR`` property on all targets.  See that target
property for more information.

CMAKE_INSTALL_RPATH
-------------------

The rpath to use for installed targets.

A semicolon-separated list specifying the rpath to use in installed
targets (for platforms that support it).  This is used to initialize
the target property ``INSTALL_RPATH`` for all targets.

CMAKE_INSTALL_RPATH_USE_LINK_PATH
---------------------------------

Add paths to linker search and installed rpath.

``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``true``
will append directories in the linker search path and outside the
project to the ``INSTALL_RPATH``.  This is used to initialize the
target property ``INSTALL_RPATH_USE_LINK_PATH`` for all targets.

CMAKE_IOS_INSTALL_COMBINED
--------------------------

Default value for ``IOS_INSTALL_COMBINED`` of targets.

This variable is used to initialize the ``IOS_INSTALL_COMBINED``
property on all the targets.  See that target property for additional
information.

CMAKE_<LANG>_CLANG_TIDY
-----------------------

Default value for ``<LANG>_CLANG_TIDY`` target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.

CMAKE_<LANG>_COMPILER_LAUNCHER
------------------------------

Default value for ``<LANG>_COMPILER_LAUNCHER`` target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.

CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE
---------------------------------

Default value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.

CMAKE_<LANG>_VISIBILITY_PRESET
------------------------------

Default value for the ``<LANG>_VISIBILITY_PRESET`` target
property when a target is created.

CMAKE_LIBRARY_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`LIBRARY <Library Output Artifacts>`
target files when built.

This variable is used to initialize the ``LIBRARY_OUTPUT_DIRECTORY``
property on all the targets.  See that target property for additional
information.

CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

Where to put all the :ref:`LIBRARY <Library Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.
See that target property for additional information.

CMAKE_LIBRARY_PATH_FLAG
-----------------------

The flag to be used to add a library search path to a compiler.

The flag will be used to specify a library directory to the compiler.
On most compilers this is ``-L``.

CMAKE_LINK_DEF_FILE_FLAG
------------------------

Linker flag to be used to specify a ``.def`` file for dll creation.

The flag will be used to add a ``.def`` file when creating a dll on
Windows; this is only defined on Windows.

CMAKE_LINK_DEPENDS_NO_SHARED
----------------------------

Whether to skip link dependencies on shared library files.

This variable initializes the ``LINK_DEPENDS_NO_SHARED`` property on
targets when they are created.  See that target property for
additional information.

CMAKE_LINK_INTERFACE_LIBRARIES
------------------------------

Default value for ``LINK_INTERFACE_LIBRARIES`` of targets.

This variable is used to initialize the ``LINK_INTERFACE_LIBRARIES``
property on all the targets.  See that target property for additional
information.

CMAKE_LINK_LIBRARY_FILE_FLAG
----------------------------

Flag to be used to link a library specified by a path to its file.

The flag will be used before a library file path is given to the
linker.  This is needed only on very few platforms.

CMAKE_LINK_LIBRARY_FLAG
-----------------------

Flag to be used to link a library into an executable.

The flag will be used to specify a library to link to an executable.
On most compilers this is ``-l``.

CMAKE_MACOSX_BUNDLE
-------------------

Default value for ``MACOSX_BUNDLE`` of targets.

This variable is used to initialize the ``MACOSX_BUNDLE`` property on
all the targets.  See that target property for additional information.

CMAKE_MACOSX_RPATH
-------------------

Whether to use rpaths on OS X and iOS.

This variable is used to initialize the ``MACOSX_RPATH`` property on
all targets.

CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>
----------------------------------

Default value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets.

This variable is used to initialize the
``MAP_IMPORTED_CONFIG_<CONFIG>`` property on all the targets.  See
that target property for additional information.

CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used when linking a module.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.

CMAKE_MODULE_LINKER_FLAGS
-------------------------

Linker flags to be used to create modules.

These flags will be used by the linker when creating a module.

CMAKE_NINJA_OUTPUT_PATH_PREFIX
------------------------------

Set output files path prefix for the ``Ninja`` generator.

Every output files listed in the generated ``build.ninja`` will be
prefixed by the contents of this variable (a trailing slash is
appended if missing).  This is useful when the generated ninja file is
meant to be embedded as a ``subninja`` file into a *super* ninja
project.  For example, a ninja build file generated with a command
like::

 cd top-build-dir/sub &&
 cmake -G Ninja -DCMAKE_NINJA_OUTPUT_PATH_PREFIX=sub/ path/to/source

can be embedded in ``top-build-dir/build.ninja`` with a directive like
this::

 subninja sub/build.ninja

The ``auto-regeneration`` rule in ``top-build-dir/build.ninja`` must have an
order-only dependency on ``sub/build.ninja``.

.. note::
  When ``CMAKE_NINJA_OUTPUT_PATH_PREFIX`` is set, the project generated
  by CMake cannot be used as a standalone project.  No default targets
  are specified.

CMAKE_NO_BUILTIN_CHRPATH
------------------------

Do not use the builtin ELF editor to fix RPATHs on installation.

When an ELF binary needs to have a different RPATH after installation
than it does in the build tree, CMake uses a builtin editor to change
the RPATH in the installed copy.  If this variable is set to true then
CMake will relink the binary before installation instead of using its
builtin editor.

CMAKE_NO_SYSTEM_FROM_IMPORTED
-----------------------------

Default value for ``NO_SYSTEM_FROM_IMPORTED`` of targets.

This variable is used to initialize the ``NO_SYSTEM_FROM_IMPORTED``
property on all the targets.  See that target property for additional
information.

CMAKE_OSX_ARCHITECTURES
-----------------------

Target specific architectures for OS X and iOS.

This variable is used to initialize the ``OSX_ARCHITECTURES``
property on each target as it is creaed.  See that target property
for additional information.

The value of this variable should be set prior to the first
``project()`` or ``enable_language()`` command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.

This variable is ignored on platforms other than OS X.

CMAKE_OSX_DEPLOYMENT_TARGET
---------------------------

Specify the minimum version of OS X on which the target binaries are
to be deployed.  CMake uses this value for the ``-mmacosx-version-min``
flag and to help choose the default SDK
(see ``CMAKE_OSX_SYSROOT``).

If not set explicitly the value is initialized by the
``MACOSX_DEPLOYMENT_TARGET`` environment variable, if set,
and otherwise computed based on the host platform.

The value of this variable should be set prior to the first
``project()`` or ``enable_language()`` command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.

This variable is ignored on platforms other than OS X.

CMAKE_OSX_SYSROOT
-----------------

Specify the location or name of the OS X platform SDK to be used.
CMake uses this value to compute the value of the ``-isysroot`` flag
or equivalent and to help the ``find_*`` commands locate files in
the SDK.

If not set explicitly the value is initialized by the ``SDKROOT``
environment variable, if set, and otherwise computed based on the
``CMAKE_OSX_DEPLOYMENT_TARGET`` or the host platform.

The value of this variable should be set prior to the first
``project()`` or ``enable_language()`` command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.

This variable is ignored on platforms other than OS X.

CMAKE_PDB_OUTPUT_DIRECTORY
--------------------------

Output directory for MS debug symbol ``.pdb`` files generated by the
linker for executable and shared library targets.

This variable is used to initialize the ``PDB_OUTPUT_DIRECTORY``
property on all the targets.  See that target property for additional
information.

CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>
-----------------------------------

Per-configuration output directory for MS debug symbol ``.pdb`` files
generated by the linker for executable and shared library targets.

This is a per-configuration version of ``CMAKE_PDB_OUTPUT_DIRECTORY``.
This variable is used to initialize the
``PDB_OUTPUT_DIRECTORY_<CONFIG>``
property on all the targets.  See that target property for additional
information.

CMAKE_POSITION_INDEPENDENT_CODE
-------------------------------

Default value for ``POSITION_INDEPENDENT_CODE`` of targets.

This variable is used to initialize the
``POSITION_INDEPENDENT_CODE`` property on all the targets.
See that target property for additional information.  If set, it's
value is also used by the ``try_compile()`` command.

CMAKE_RUNTIME_OUTPUT_DIRECTORY
------------------------------

Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`
target files when built.

This variable is used to initialize the ``RUNTIME_OUTPUT_DIRECTORY``
property on all the targets.  See that target property for additional
information.

CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
---------------------------------------

Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`
target files when built for a specific configuration.

This variable is used to initialize the
``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.
See that target property for additional information.

CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used when linking a shared library.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared
libraries.

CMAKE_SHARED_LINKER_FLAGS
-------------------------

Linker flags to be used to create shared libraries.

These flags will be used by the linker when creating a shared library.

CMAKE_SKIP_BUILD_RPATH
----------------------

Do not include RPATHs in the build tree.

Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always built with no RPATH.

CMAKE_SKIP_INSTALL_RPATH
------------------------

Do not include RPATHs in the install tree.

Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always installed without RPATH, even if RPATH is enabled when
building.  This can be useful for example to allow running tests from
the build directory with RPATH enabled before the installation step.
To omit RPATH in both the build and install steps, use
``CMAKE_SKIP_RPATH`` instead.

CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
----------------------------------

Flags to be used when linking a static library.

Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating static
libraries.

CMAKE_STATIC_LINKER_FLAGS
-------------------------

Linker flags to be used to create static libraries.

These flags will be used by the linker when creating a static library.

CMAKE_TRY_COMPILE_CONFIGURATION
-------------------------------

Build configuration used for ``try_compile()`` and ``try_run()``
projects.

Projects built by ``try_compile()`` and ``try_run()`` are built
synchronously during the CMake configuration step.  Therefore a specific build
configuration must be chosen even if the generated build system
supports multiple configurations.

CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
------------------------------------

List of variables that the ``try_compile()`` command source file signature
must propagate into the test project in order to target the same platform as
the host project.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.

Variables meaningful to CMake, such as ``CMAKE_<LANG>_FLAGS``, are
propagated automatically.  The ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES``
variable may be set to pass custom variables meaningful to a toolchain file.
For example, a toolchain file may contain:

 set(CMAKE_SYSTEM_NAME ...)
 set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES MY_CUSTOM_VARIABLE)
 # ... use MY_CUSTOM_VARIABLE ...

If a user passes ``-DMY_CUSTOM_VARIABLE=SomeValue`` to CMake then this
setting will be made visible to the toolchain file both for the main
project and for test projects generated by the ``try_compile()``
command source file signature.

CMAKE_TRY_COMPILE_TARGET_TYPE
-----------------------------

Type of target generated for ``try_compile()`` calls using the
source file signature.  Valid values are:

``EXECUTABLE``
  Use ``add_executable()`` to name the source file in the
  generated project.  This is the default if no value is given.

``STATIC_LIBRARY``
  Use ``add_library()`` with the ``STATIC`` option to name the
  source file in the generated project.  This avoids running the
  linker and is intended for use with cross-compiling toolchains
  that cannot link without custom flags or linker scripts.

CMAKE_USE_RELATIVE_PATHS
------------------------

This variable has no effect.  The partially implemented effect it
had in previous releases was removed in CMake 3.4.

CMAKE_VISIBILITY_INLINES_HIDDEN
-------------------------------

Default value for the ``VISIBILITY_INLINES_HIDDEN`` target
property when a target is created.

CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD
-----------------------------------------

Include ``INSTALL`` target to default build.

In Visual Studio solution, by default the ``INSTALL`` target will not be part
of the default build. Setting this variable will enable the ``INSTALL`` target
to be part of the default build.

CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS
--------------------------------

Default value for ``WINDOWS_EXPORT_ALL_SYMBOLS`` target property.
This variable is used to initialize the property on each target as it is
created.

CMAKE_WIN32_EXECUTABLE
----------------------

Default value for ``WIN32_EXECUTABLE`` of targets.

This variable is used to initialize the ``WIN32_EXECUTABLE`` property
on all the targets.  See that target property for additional information.

CMAKE_XCODE_ATTRIBUTE_<an-attribute>
------------------------------------

Set Xcode target attributes directly.

Tell the ``Xcode`` generator to set '<an-attribute>' to a given value
in the generated Xcode project.  Ignored on other generators.

See the ``XCODE_ATTRIBUTE_<an-attribute>`` target property
to set attributes on a specific target.

Contents of ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` may use
"generator expressions" with the syntax ``$<...>``.  See the
``cmake-generator-expressions(7)`` manual for available
expressions.  See the ``cmake-buildsystem(7)`` manual
for more on defining buildsystem properties.

EXECUTABLE_OUTPUT_PATH
----------------------

Old executable location variable.

The target property ``RUNTIME_OUTPUT_DIRECTORY`` supercedes this
variable for a target if it is set.  Executable targets are otherwise placed in
this directory.

LIBRARY_OUTPUT_PATH
-------------------

Old library location variable.

The target properties ``ARCHIVE_OUTPUT_DIRECTORY``,
``LIBRARY_OUTPUT_DIRECTORY``, and ``RUNTIME_OUTPUT_DIRECTORY``
supercede this variable for a target if they are set.  Library targets are
otherwise placed in this directory.

Variables for Languages
=======================

CMAKE_COMPILER_IS_GNU<LANG>
---------------------------

True if the compiler is GNU.

If the selected ``<LANG>`` compiler is the GNU compiler then this is ``TRUE``,
if not it is ``FALSE``.  Unlike the other per-language variables, this
uses the GNU syntax for identifying languages instead of the CMake
syntax.  Recognized values of the ``<LANG>`` suffix are:

::

 CC = C compiler
 CXX = C++ compiler
 G77 = Fortran compiler

CMAKE_C_COMPILE_FEATURES
------------------------

List of features known to the C compiler

These features are known to be available for use with the C compiler. This
list is a subset of the features listed in the
``CMAKE_C_KNOWN_FEATURES`` global property.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_C_EXTENSIONS
------------------

Default value for ``C_EXTENSIONS`` property of targets.

This variable is used to initialize the ``C_EXTENSIONS``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_C_STANDARD
----------------

Default value for ``C_STANDARD`` property of targets.

This variable is used to initialize the ``C_STANDARD``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_C_STANDARD_REQUIRED
-------------------------

Default value for ``C_STANDARD_REQUIRED`` property of targets.

This variable is used to initialize the ``C_STANDARD_REQUIRED``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_CXX_COMPILE_FEATURES
--------------------------

List of features known to the C++ compiler

These features are known to be available for use with the C++ compiler. This
list is a subset of the features listed in the
``CMAKE_CXX_KNOWN_FEATURES`` global property.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_CXX_EXTENSIONS
--------------------

Default value for ``CXX_EXTENSIONS`` property of targets.

This variable is used to initialize the ``CXX_EXTENSIONS``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_CXX_STANDARD
------------------

Default value for ``CXX_STANDARD`` property of targets.

This variable is used to initialize the ``CXX_STANDARD``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_CXX_STANDARD_REQUIRED
---------------------------

Default value for ``CXX_STANDARD_REQUIRED`` property of targets.

This variable is used to initialize the ``CXX_STANDARD_REQUIRED``
property on all targets.  See that target property for additional
information.

See the ``cmake-compile-features(7)`` manual for information on
compile features and a list of supported compilers.

CMAKE_Fortran_MODDIR_DEFAULT
----------------------------

Fortran default module output directory.

Most Fortran compilers write ``.mod`` files to the current working
directory.  For those that do not, this is set to ``.`` and used when
the ``Fortran_MODULE_DIRECTORY`` target property is not set.

CMAKE_Fortran_MODDIR_FLAG
-------------------------

Fortran flag for module output directory.

This stores the flag needed to pass the value of the
``Fortran_MODULE_DIRECTORY`` target property to the compiler.

CMAKE_Fortran_MODOUT_FLAG
-------------------------

Fortran flag to enable module output.

Most Fortran compilers write ``.mod`` files out by default.  For others,
this stores the flag needed to enable module output.

CMAKE_INTERNAL_PLATFORM_ABI
---------------------------

An internal variable subject to change.

This is used in determining the compiler ABI and is subject to change.

CMAKE_<LANG>_ARCHIVE_APPEND
---------------------------

Rule variable to append to a static archive.

This is a rule variable that tells CMake how to append to a static
archive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``
on some platforms in order to support large object counts.  See also
``CMAKE_<LANG>_ARCHIVE_CREATE`` and
``CMAKE_<LANG>_ARCHIVE_FINISH``.

CMAKE_<LANG>_ARCHIVE_CREATE
---------------------------

Rule variable to create a new static archive.

This is a rule variable that tells CMake how to create a static
archive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``
on some platforms in order to support large object counts.  See also
``CMAKE_<LANG>_ARCHIVE_APPEND`` and
``CMAKE_<LANG>_ARCHIVE_FINISH``.

CMAKE_<LANG>_ARCHIVE_FINISH
---------------------------

Rule variable to finish an existing static archive.

This is a rule variable that tells CMake how to finish a static
archive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``
on some platforms in order to support large object counts.  See also
``CMAKE_<LANG>_ARCHIVE_CREATE`` and
``CMAKE_<LANG>_ARCHIVE_APPEND``.

CMAKE_<LANG>_COMPILE_OBJECT
---------------------------

Rule variable to compile a single object file.

This is a rule variable that tells CMake how to compile a single
object file for the language ``<LANG>``.

CMAKE_<LANG>_COMPILER_ABI
-------------------------

An internal variable subject to change.

This is used in determining the compiler ABI and is subject to change.

CMAKE_<LANG>_COMPILER_ID
------------------------

Compiler identification string.

A short string unique to the compiler vendor.  Possible values
include:

::

 Absoft = Absoft Fortran (absoft.com)
 ADSP = Analog VisualDSP++ (analog.com)
 AppleClang = Apple Clang (apple.com)
 ARMCC = ARM Compiler (arm.com)
 Bruce = Bruce C Compiler
 CCur = Concurrent Fortran (ccur.com)
 Clang = LLVM Clang (clang.llvm.org)
 Cray = Cray Compiler (cray.com)
 Embarcadero, Borland = Embarcadero (embarcadero.com)
 G95 = G95 Fortran (g95.org)
 GNU = GNU Compiler Collection (gcc.gnu.org)
 HP = Hewlett-Packard Compiler (hp.com)
 Intel = Intel Compiler (intel.com)
 MIPSpro = SGI MIPSpro (sgi.com)
 MSVC = Microsoft Visual Studio (microsoft.com)
 OpenWatcom = Open Watcom (openwatcom.org)
 PGI = The Portland Group (pgroup.com)
 PathScale = PathScale (pathscale.com)
 SDCC = Small Device C Compiler (sdcc.sourceforge.net)
 SunPro = Oracle Solaris Studio (oracle.com)
 TI = Texas Instruments (ti.com)
 TinyCC = Tiny C Compiler (tinycc.org)
 XL, VisualAge, zOS = IBM XL (ibm.com)

This variable is not guaranteed to be defined for all compilers or
languages.

CMAKE_<LANG>_COMPILER_LOADED
----------------------------

Defined to true if the language is enabled.

When language ``<LANG>`` is enabled by ``project()`` or
``enable_language()`` this variable is defined to ``1``.

CMAKE_<LANG>_COMPILER
---------------------

The full path to the compiler for ``LANG``.

This is the command that will be used as the ``<LANG>`` compiler.  Once
set, you can not change this variable.

CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN
----------------------------------------

The external toolchain for cross-compiling, if supported.

Some compiler toolchains do not ship their own auxiliary utilities such as
archivers and linkers.  The compiler driver may support a command-line argument
to specify the location of such tools.
``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to a path to
the external toolchain and will be passed to the compiler driver if supported.

This variable may only be set in a toolchain file specified by
the ``CMAKE_TOOLCHAIN_FILE`` variable.

CMAKE_<LANG>_COMPILER_TARGET
----------------------------

The target for cross-compiling, if supported.

Some compiler drivers are inherently cross-compilers, such as clang and
QNX qcc. These compiler drivers support a command-line argument to specify
the target to cross-compile for.

This variable may only be set in a toolchain file specified by
the ``CMAKE_TOOLCHAIN_FILE`` variable.

CMAKE_<LANG>_COMPILER_VERSION
-----------------------------

Compiler version string.

Compiler version in major[.minor[.patch[.tweak]]] format.  This
variable is not guaranteed to be defined for all compilers or
languages.

CMAKE_<LANG>_CREATE_SHARED_LIBRARY
----------------------------------

Rule variable to create a shared library.

This is a rule variable that tells CMake how to create a shared
library for the language ``<LANG>``.

CMAKE_<LANG>_CREATE_SHARED_MODULE
---------------------------------

Rule variable to create a shared module.

This is a rule variable that tells CMake how to create a shared
library for the language ``<LANG>``.

CMAKE_<LANG>_CREATE_STATIC_LIBRARY
----------------------------------

Rule variable to create a static library.

This is a rule variable that tells CMake how to create a static
library for the language ``<LANG>``.

CMAKE_<LANG>_FLAGS_DEBUG
------------------------

Flags for ``Debug`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``Debug``.

CMAKE_<LANG>_FLAGS_MINSIZEREL
-----------------------------

Flags for ``MinSizeRel`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``MinSizeRel``
(short for minimum size release).

CMAKE_<LANG>_FLAGS_RELEASE
--------------------------

Flags for ``Release`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``Release``.

CMAKE_<LANG>_FLAGS_RELWITHDEBINFO
---------------------------------

Flags for ``RelWithDebInfo`` type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``RelWithDebInfo``
(short for Release With Debug Information).

CMAKE_<LANG>_FLAGS
------------------

Flags for all build types.

``<LANG>`` flags used regardless of the value of ``CMAKE_BUILD_TYPE``.

CMAKE_<LANG>_GHS_KERNEL_FLAGS_DEBUG
-----------------------------------

GHS kernel flags for ``Debug`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``Debug``.

CMAKE_<LANG>_GHS_KERNEL_FLAGS_MINSIZEREL
----------------------------------------

GHS kernel flags for ``MinSizeRel`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``MinSizeRel``
(short for minimum size release).

CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELEASE
-------------------------------------

GHS kernel flags for ``Release`` build type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``Release``.

CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELWITHDEBINFO
--------------------------------------------

GHS kernel flags for ``RelWithDebInfo`` type or configuration.

``<LANG>`` flags used when ``CMAKE_BUILD_TYPE`` is ``RelWithDebInfo``
(short for Release With Debug Information).

CMAKE_<LANG>_IGNORE_EXTENSIONS
------------------------------

File extensions that should be ignored by the build.

This is a list of file extensions that may be part of a project for a
given language but are not compiled.

CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES
-----------------------------------------

Directories implicitly searched by the compiler for header files.

CMake does not explicitly specify these directories on compiler
command lines for language ``<LANG>``.  This prevents system include
directories from being treated as user include directories on some
compilers.

CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES
--------------------------------------

Implicit linker search path detected for language ``<LANG>``.

Compilers typically pass directories containing language runtime
libraries and default library search paths when they invoke a linker.
These paths are implicit linker search directories for the compiler's
language.  CMake automatically detects these directories for each
language and reports the results in this variable.

When a library in one of these directories is given by full path to
``target_link_libraries()`` CMake will generate the ``-l<name>`` form on
link lines to ensure the linker searches its implicit directories for the
library.  Note that some toolchains read implicit directories from an
environment variable such as ``LIBRARY_PATH`` so keep its value consistent
when operating in a given build tree.

CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
------------------------------------------------

Implicit linker framework search path detected for language ``<LANG>``.

These paths are implicit linker framework search directories for the
compiler's language.  CMake automatically detects these directories
for each language and reports the results in this variable.

CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES
------------------------------------

Implicit link libraries and flags detected for language ``<LANG>``.

Compilers typically pass language runtime library names and other
flags when they invoke a linker.  These flags are implicit link
options for the compiler's language.  CMake automatically detects
these libraries and flags for each language and reports the results in
this variable.

CMAKE_<LANG>_LIBRARY_ARCHITECTURE
---------------------------------

Target architecture library directory name detected for ``<LANG>``.

If the ``<LANG>`` compiler passes to the linker an architecture-specific
system library search directory such as ``<prefix>/lib/<arch>`` this
variable contains the ``<arch>`` name if/as detected by CMake.

CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES
-----------------------------------------

True if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets.

This is used when CMake selects a linker language for a target.
Languages compiled directly into the target are always considered.  A
language compiled into static libraries linked by the target is
considered if this variable is true.

CMAKE_<LANG>_LINKER_PREFERENCE
------------------------------

Preference value for linker language selection.

The "linker language" for executable, shared library, and module
targets is the language whose compiler will invoke the linker.  The
``LINKER_LANGUAGE`` target property sets the language explicitly.
Otherwise, the linker language is that whose linker preference value
is highest among languages compiled and linked into the target.  See
also the ``CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES`` variable.

CMAKE_<LANG>_LINK_EXECUTABLE
----------------------------

Rule variable to link an executable.

Rule variable to link an executable for the given language.

CMAKE_<LANG>_OUTPUT_EXTENSION
-----------------------------

Extension for the output of a compile for a single file.

This is the extension for an object file for the given ``<LANG>``.  For
example ``.obj`` for C on Windows.

CMAKE_<LANG>_PLATFORM_ID
------------------------

An internal variable subject to change.

This is used in determining the platform and is subject to change.

CMAKE_<LANG>_SIMULATE_ID
------------------------

Identification string of "simulated" compiler.

Some compilers simulate other compilers to serve as drop-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the ``CMAKE_<LANG>_COMPILER_ID`` for
the simulated compiler.

CMAKE_<LANG>_SIMULATE_VERSION
-----------------------------

Version string of "simulated" compiler.

Some compilers simulate other compilers to serve as drop-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the ``CMAKE_<LANG>_COMPILER_VERSION``
for the simulated compiler.

CMAKE_<LANG>_SIZEOF_DATA_PTR
----------------------------

Size of pointer-to-data types for language ``<LANG>``.

This holds the size (in bytes) of pointer-to-data types in the target
platform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).

CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS
-----------------------------------

Extensions of source files for the given language.

This is the list of extensions for a given language's source files.

CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES
-----------------------------------------

Include directories to be used for every source file compiled with
the ``<LANG>`` compiler.  This is meant for specification of system
include directories needed by the language for the current platform.
The directories always appear at the end of the include path passed
to the compiler.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.

See also ``CMAKE_<LANG>_STANDARD_LIBRARIES``.

CMAKE_<LANG>_STANDARD_LIBRARIES
-------------------------------

Libraries linked into every executable and shared library linked
for language ``<LANG>``.  This is meant for specification of system
libraries needed by the language for the current platform.

This variable should not be set by project code.  It is meant to be set by
CMake's platform information modules for the current toolchain, or by a
toolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.

See also ``CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES``.

CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>
-------------------------------------

Specify a CMake file that overrides platform information for ``<LANG>``.

This is a language-specific version of
``CMAKE_USER_MAKE_RULES_OVERRIDE`` loaded only when enabling language
``<LANG>``.

Variables for CTest
===================

CTEST_BINARY_DIRECTORY
----------------------

Specify the CTest ``BuildDirectory`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_BUILD_COMMAND
-------------------

Specify the CTest ``MakeCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_BUILD_NAME
----------------

Specify the CTest ``BuildName`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_BZR_COMMAND
-----------------

Specify the CTest ``BZRCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_BZR_UPDATE_OPTIONS
------------------------

Specify the CTest ``BZRUpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_CHANGE_ID
---------------

Specify the CTest ``ChangeId`` setting
in a ``ctest(1)`` dashboard client script.

This setting allows CTest to pass arbitrary information about this
build up to CDash.  One use of this feature is to allow CDash to
post comments on your pull request if anything goes wrong with your build.

CTEST_CHECKOUT_COMMAND
----------------------

Tell the ``ctest_start()`` command how to checkout or initialize
the source directory in a ``ctest(1)`` dashboard client script.

CTEST_CONFIGURATION_TYPE
------------------------

Specify the CTest ``DefaultCTestConfigurationType`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_CONFIGURE_COMMAND
-----------------------

Specify the CTest ``ConfigureCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_COVERAGE_COMMAND
----------------------

Specify the CTest ``CoverageCommand`` setting
in a ``ctest(1)`` dashboard client script.

Cobertura
'''''''''

Using `Cobertura`_ as the coverage generation within your multi-module
Java project can generate a series of XML files.

The Cobertura Coverage parser expects to read the coverage data from a
single XML file which contains the coverage data for all modules.
Cobertura has a program with the ability to merge given ``cobertura.ser`` files
and then another program to generate a combined XML file from the previous
merged file.  For command line testing, this can be done by hand prior to
CTest looking for the coverage files. For script builds,
set the ``CTEST_COVERAGE_COMMAND`` variable to point to a file which will
perform these same steps, such as a ``.sh`` or ``.bat`` file.

 set(CTEST_COVERAGE_COMMAND .../run-coverage-and-consolidate.sh)

where the ``run-coverage-and-consolidate.sh`` script is perhaps created by
the ``configure_file()`` command and might contain the following code:

 #!/usr/bin/env bash
 CoberturaFiles="$(find "/path/to/source" -name "cobertura.ser")"
 SourceDirs="$(find "/path/to/source" -name "java" -type d)"
 cobertura-merge --datafile coberturamerge.ser $CoberturaFiles
 cobertura-report --datafile coberturamerge.ser --destination . \
                  --format xml $SourceDirs

The script uses ``find`` to capture the paths to all of the ``cobertura.ser``
files found below the project's source directory.  It keeps the list of files
and supplies it as an argument to the ``cobertura-merge`` program. The
``--datafile`` argument signifies where the result of the merge will be kept.

The combined ``coberturamerge.ser`` file is then used to generate the XML report
using the ``cobertura-report`` program.  The call to the cobertura-report
program requires some named arguments.

``--datafila``
  path to the merged ``.ser`` file

``--destination``
  path to put the output files(s)

``--format``
  file format to write output in: xml or html

The rest of the supplied arguments consist of the full paths to the
``/src/main/java`` directories of each module within the source tree. These
directories are needed and should not be forgotten.


CTEST_COVERAGE_EXTRA_FLAGS
--------------------------

Specify the CTest ``CoverageExtraFlags`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_CURL_OPTIONS
------------------

Specify the CTest ``CurlOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_CUSTOM_COVERAGE_EXCLUDE
-----------------------------

A list of regular expressions which will be used to exclude files by their
path from coverage output by the ``ctest_coverage()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_ERROR_EXCEPTION
----------------------------

A list of regular expressions which will be used to exclude when detecting
error messages in build outputs by the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_ERROR_MATCH
------------------------

A list of regular expressions which will be used to detect error messages in
build outputs by the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_ERROR_POST_CONTEXT
-------------------------------

The number of lines to include as context which follow an error message by the
``ctest_test()`` command. The default is 10.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_ERROR_PRE_CONTEXT
------------------------------

The number of lines to include as context which precede an error message by
the ``ctest_test()`` command. The default is 10.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE
--------------------------------------------

When saving a failing test's output, this is the maximum size, in bytes, that
will be collected by the ``ctest_test()`` command. Defaults to 307200
(300 KiB).

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS
-------------------------------------

The maximum number of errors in a single build step which will be detected.
After this, the ``ctest_test()`` command will truncate the output.
Defaults to 50.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS
---------------------------------------

The maximum number of warnings in a single build step which will be detected.
After this, the ``ctest_test()`` command will truncate the output.
Defaults to 50.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE
--------------------------------------------

When saving a passing test's output, this is the maximum size, in bytes, that
will be collected by the ``ctest_test()`` command. Defaults to 1024
(1 KiB).

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_MEMCHECK_IGNORE
----------------------------

A list of regular expressions to use to exclude tests during the
``ctest_memcheck()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_POST_MEMCHECK
--------------------------

A list of commands to run at the end of the ``ctest_memcheck()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_POST_TEST
----------------------

A list of commands to run at the end of the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_PRE_MEMCHECK
-------------------------

A list of commands to run at the start of the ``ctest_memcheck()``
command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_PRE_TEST
----------------------

A list of commands to run at the start of the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_TEST_IGNORE
------------------------

A list of regular expressions to use to exclude tests during the
``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_WARNING_EXCEPTION
------------------------------

A list of regular expressions which will be used to exclude when detecting
warning messages in build outputs by the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CUSTOM_WARNING_MATCH
--------------------------

A list of regular expressions which will be used to detect warning messages in
build outputs by the ``ctest_test()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_CVS_CHECKOUT
------------------

Deprecated.  Use ``CTEST_CHECKOUT_COMMAND`` instead.

CTEST_CVS_COMMAND
-----------------

Specify the CTest ``CVSCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_CVS_UPDATE_OPTIONS
------------------------

Specify the CTest ``CVSUpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_LOCATION
-------------------

Specify the CTest ``DropLocation`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_METHOD
-----------------

Specify the CTest ``DropMethod`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_SITE
---------------

Specify the CTest ``DropSite`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_SITE_CDASH
---------------------

Specify the CTest ``IsCDash`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_SITE_PASSWORD
------------------------

Specify the CTest ``DropSitePassword`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_DROP_SITE_USER
--------------------

Specify the CTest ``DropSiteUser`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_EXTRA_COVERAGE_GLOB
-------------------------

A list of regular expressions which will be used to find files which should be
covered by the ``ctest_coverage()`` command.

It is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``
file. See ``ctest_read_custom_files()`` documentation.

CTEST_GIT_COMMAND
-----------------

Specify the CTest ``GITCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_GIT_INIT_SUBMODULES
-------------------------

Specify the CTest ``GITInitSubmodules`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_GIT_UPDATE_CUSTOM
-----------------------

Specify the CTest ``GITUpdateCustom`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_GIT_UPDATE_OPTIONS
------------------------

Specify the CTest ``GITUpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_HG_COMMAND
----------------

Specify the CTest ``HGCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_HG_UPDATE_OPTIONS
-----------------------

Specify the CTest ``HGUpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_MEMORYCHECK_COMMAND
-------------------------

Specify the CTest ``MemoryCheckCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_MEMORYCHECK_COMMAND_OPTIONS
---------------------------------

Specify the CTest ``MemoryCheckCommandOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_MEMORYCHECK_SANITIZER_OPTIONS
-----------------------------------

Specify the CTest ``MemoryCheckSanitizerOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
-----------------------------------

Specify the CTest ``MemoryCheckSuppressionFile`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_MEMORYCHECK_TYPE
----------------------

Specify the CTest ``MemoryCheckType`` setting
in a ``ctest(1)`` dashboard client script.
Valid values are ``Valgrind``, ``Purify``, ``BoundsChecker``, and
``ThreadSanitizer``, ``AddressSanitizer``, ``MemorySanitizer``, and
``UndefinedBehaviorSanitizer``.

CTEST_NIGHTLY_START_TIME
------------------------

Specify the CTest ``NightlyStartTime`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_P4_CLIENT
---------------

Specify the CTest ``P4Client`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_P4_COMMAND
----------------

Specify the CTest ``P4Command`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_P4_OPTIONS
----------------

Specify the CTest ``P4Options`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_P4_UPDATE_OPTIONS
-----------------------

Specify the CTest ``P4UpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SCP_COMMAND
-----------------

Specify the CTest ``SCPCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SITE
----------

Specify the CTest ``Site`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SOURCE_DIRECTORY
----------------------

Specify the CTest ``SourceDirectory`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SVN_COMMAND
-----------------

Specify the CTest ``SVNCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SVN_OPTIONS
-----------------

Specify the CTest ``SVNOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_SVN_UPDATE_OPTIONS
------------------------

Specify the CTest ``SVNUpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_TEST_LOAD
---------------

Specify the ``TestLoad`` setting in the :ref:`CTest Test Step`
of a ``ctest(1)`` dashboard client script.  This sets the
default value for the ``TEST_LOAD`` option of the ``ctest_test()``
command.

CTEST_TEST_TIMEOUT
------------------

Specify the CTest ``TimeOut`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_TRIGGER_SITE
------------------

Specify the CTest ``TriggerSite`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_UPDATE_COMMAND
--------------------

Specify the CTest ``UpdateCommand`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_UPDATE_OPTIONS
--------------------

Specify the CTest ``UpdateOptions`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_UPDATE_VERSION_ONLY
-------------------------

Specify the CTest ``UpdateVersionOnly`` setting
in a ``ctest(1)`` dashboard client script.

CTEST_USE_LAUNCHERS
-------------------

Specify the CTest ``UseLaunchers`` setting
in a ``ctest(1)`` dashboard client script.

Variables for CPack
===================

CPACK_ABSOLUTE_DESTINATION_FILES
--------------------------------

List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.

This variable is a Read-Only variable which is set internally by CPack
during installation and before packaging using
``CMAKE_ABSOLUTE_DESTINATION_FILES`` defined in ``cmake_install.cmake``
scripts.  The value can be used within CPack project configuration
file and/or ``CPack<GEN>.cmake`` file of ``<GEN>`` generator.

CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
------------------------------------------

Boolean toggle to include/exclude top level directory (component case).

Similar usage as ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY`` but for the
component case.  See ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY``
documentation for the detail.

CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
-------------------------------------------

Ask CPack to error out as soon as a file with absolute ``INSTALL DESTINATION``
is encountered.

The fatal error is emitted before the installation of the offending
file takes place.  Some CPack generators, like NSIS, enforce this
internally.  This variable triggers the definition
of ``CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION`` when CPack
runs.

CPACK_INCLUDE_TOPLEVEL_DIRECTORY
--------------------------------

Boolean toggle to include/exclude top level directory.

When preparing a package CPack installs the item under the so-called
top level directory.  The purpose of is to include (set to ``1`` or ``ON`` or
``TRUE``) the top level directory in the package or not (set to ``0`` or
``OFF`` or ``FALSE``).

Each CPack generator has a built-in default value for this variable.
E.g.  Archive generators (ZIP, TGZ, ...) includes the top level
whereas RPM or DEB don't.  The user may override the default value by
setting this variable.

There is a similar variable
``CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY`` which may be used
to override the behavior for the component packaging
case which may have different default value for historical (now
backward compatibility) reason.

CPACK_INSTALL_SCRIPT
--------------------

Extra CMake script provided by the user.

If set this CMake script will be executed by CPack during its local
[CPack-private] installation which is done right before packaging the
files.  The script is not called by e.g.: ``make install``.

CPACK_PACKAGING_INSTALL_PREFIX
------------------------------

The prefix used in the built package.

Each CPack generator has a default value (like ``/usr``).  This default
value may be overwritten from the ``CMakeLists.txt`` or the ``cpack(1)``
command line by setting an alternative value.  Example:

::

 set(CPACK_PACKAGING_INSTALL_PREFIX "/opt")

This is not the same purpose as ``CMAKE_INSTALL_PREFIX`` which is used
when installing from the build tree without building a package.

CPACK_SET_DESTDIR
-----------------

Boolean toggle to make CPack use ``DESTDIR`` mechanism when packaging.

``DESTDIR`` means DESTination DIRectory.  It is commonly used by makefile
users in order to install software at non-default location.  It is a
basic relocation mechanism that should not be used on Windows (see
``CMAKE_INSTALL_PREFIX`` documentation).  It is usually invoked like
this:

::

 make DESTDIR=/home/john install

which will install the concerned software using the installation
prefix, e.g. ``/usr/local`` prepended with the ``DESTDIR`` value which
finally gives ``/home/john/usr/local``.  When preparing a package, CPack
first installs the items to be packaged in a local (to the build tree)
directory by using the same ``DESTDIR`` mechanism.  Nevertheless, if
``CPACK_SET_DESTDIR`` is set then CPack will set ``DESTDIR`` before doing the
local install.  The most noticeable difference is that without
``CPACK_SET_DESTDIR``, CPack uses ``CPACK_PACKAGING_INSTALL_PREFIX``
as a prefix whereas with ``CPACK_SET_DESTDIR`` set, CPack will use
``CMAKE_INSTALL_PREFIX`` as a prefix.

Manually setting ``CPACK_SET_DESTDIR`` may help (or simply be necessary)
if some install rules uses absolute ``DESTINATION`` (see CMake
``install()`` command).  However, starting with CPack/CMake 2.8.3 RPM
and DEB installers tries to handle ``DESTDIR`` automatically so that it is
seldom necessary for the user to set it.

CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
------------------------------------------

Ask CPack to warn each time a file with absolute ``INSTALL DESTINATION`` is
encountered.

This variable triggers the definition of
``CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION`` when CPack runs
``cmake_install.cmake`` scripts.
